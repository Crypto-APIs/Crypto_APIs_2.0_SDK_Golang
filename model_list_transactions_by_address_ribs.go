/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// ListTransactionsByAddressRIBS - struct for ListTransactionsByAddressRIBS
type ListTransactionsByAddressRIBS struct {
	ListTransactionsByAddressRIBSB *ListTransactionsByAddressRIBSB
	ListTransactionsByAddressRIBSBC *ListTransactionsByAddressRIBSBC
	ListTransactionsByAddressRIBSD *ListTransactionsByAddressRIBSD
	ListTransactionsByAddressRIBSD2 *ListTransactionsByAddressRIBSD2
	ListTransactionsByAddressRIBSE *ListTransactionsByAddressRIBSE
	ListTransactionsByAddressRIBSEC *ListTransactionsByAddressRIBSEC
	ListTransactionsByAddressRIBSL *ListTransactionsByAddressRIBSL
}

// ListTransactionsByAddressRIBSBAsListTransactionsByAddressRIBS is a convenience function that returns ListTransactionsByAddressRIBSB wrapped in ListTransactionsByAddressRIBS
func ListTransactionsByAddressRIBSBAsListTransactionsByAddressRIBS(v *ListTransactionsByAddressRIBSB) ListTransactionsByAddressRIBS {
	return ListTransactionsByAddressRIBS{ ListTransactionsByAddressRIBSB: v}
}

// ListTransactionsByAddressRIBSBCAsListTransactionsByAddressRIBS is a convenience function that returns ListTransactionsByAddressRIBSBC wrapped in ListTransactionsByAddressRIBS
func ListTransactionsByAddressRIBSBCAsListTransactionsByAddressRIBS(v *ListTransactionsByAddressRIBSBC) ListTransactionsByAddressRIBS {
	return ListTransactionsByAddressRIBS{ ListTransactionsByAddressRIBSBC: v}
}

// ListTransactionsByAddressRIBSDAsListTransactionsByAddressRIBS is a convenience function that returns ListTransactionsByAddressRIBSD wrapped in ListTransactionsByAddressRIBS
func ListTransactionsByAddressRIBSDAsListTransactionsByAddressRIBS(v *ListTransactionsByAddressRIBSD) ListTransactionsByAddressRIBS {
	return ListTransactionsByAddressRIBS{ ListTransactionsByAddressRIBSD: v}
}

// ListTransactionsByAddressRIBSD2AsListTransactionsByAddressRIBS is a convenience function that returns ListTransactionsByAddressRIBSD2 wrapped in ListTransactionsByAddressRIBS
func ListTransactionsByAddressRIBSD2AsListTransactionsByAddressRIBS(v *ListTransactionsByAddressRIBSD2) ListTransactionsByAddressRIBS {
	return ListTransactionsByAddressRIBS{ ListTransactionsByAddressRIBSD2: v}
}

// ListTransactionsByAddressRIBSEAsListTransactionsByAddressRIBS is a convenience function that returns ListTransactionsByAddressRIBSE wrapped in ListTransactionsByAddressRIBS
func ListTransactionsByAddressRIBSEAsListTransactionsByAddressRIBS(v *ListTransactionsByAddressRIBSE) ListTransactionsByAddressRIBS {
	return ListTransactionsByAddressRIBS{ ListTransactionsByAddressRIBSE: v}
}

// ListTransactionsByAddressRIBSECAsListTransactionsByAddressRIBS is a convenience function that returns ListTransactionsByAddressRIBSEC wrapped in ListTransactionsByAddressRIBS
func ListTransactionsByAddressRIBSECAsListTransactionsByAddressRIBS(v *ListTransactionsByAddressRIBSEC) ListTransactionsByAddressRIBS {
	return ListTransactionsByAddressRIBS{ ListTransactionsByAddressRIBSEC: v}
}

// ListTransactionsByAddressRIBSLAsListTransactionsByAddressRIBS is a convenience function that returns ListTransactionsByAddressRIBSL wrapped in ListTransactionsByAddressRIBS
func ListTransactionsByAddressRIBSLAsListTransactionsByAddressRIBS(v *ListTransactionsByAddressRIBSL) ListTransactionsByAddressRIBS {
	return ListTransactionsByAddressRIBS{ ListTransactionsByAddressRIBSL: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListTransactionsByAddressRIBS) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListTransactionsByAddressRIBSB
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressRIBSB)
	if err == nil {
		jsonListTransactionsByAddressRIBSB, _ := json.Marshal(dst.ListTransactionsByAddressRIBSB)
		if string(jsonListTransactionsByAddressRIBSB) == "{}" { // empty struct
			dst.ListTransactionsByAddressRIBSB = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressRIBSB = nil
	}

	// try to unmarshal data into ListTransactionsByAddressRIBSBC
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressRIBSBC)
	if err == nil {
		jsonListTransactionsByAddressRIBSBC, _ := json.Marshal(dst.ListTransactionsByAddressRIBSBC)
		if string(jsonListTransactionsByAddressRIBSBC) == "{}" { // empty struct
			dst.ListTransactionsByAddressRIBSBC = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressRIBSBC = nil
	}

	// try to unmarshal data into ListTransactionsByAddressRIBSD
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressRIBSD)
	if err == nil {
		jsonListTransactionsByAddressRIBSD, _ := json.Marshal(dst.ListTransactionsByAddressRIBSD)
		if string(jsonListTransactionsByAddressRIBSD) == "{}" { // empty struct
			dst.ListTransactionsByAddressRIBSD = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressRIBSD = nil
	}

	// try to unmarshal data into ListTransactionsByAddressRIBSD2
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressRIBSD2)
	if err == nil {
		jsonListTransactionsByAddressRIBSD2, _ := json.Marshal(dst.ListTransactionsByAddressRIBSD2)
		if string(jsonListTransactionsByAddressRIBSD2) == "{}" { // empty struct
			dst.ListTransactionsByAddressRIBSD2 = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressRIBSD2 = nil
	}

	// try to unmarshal data into ListTransactionsByAddressRIBSE
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressRIBSE)
	if err == nil {
		jsonListTransactionsByAddressRIBSE, _ := json.Marshal(dst.ListTransactionsByAddressRIBSE)
		if string(jsonListTransactionsByAddressRIBSE) == "{}" { // empty struct
			dst.ListTransactionsByAddressRIBSE = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressRIBSE = nil
	}

	// try to unmarshal data into ListTransactionsByAddressRIBSEC
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressRIBSEC)
	if err == nil {
		jsonListTransactionsByAddressRIBSEC, _ := json.Marshal(dst.ListTransactionsByAddressRIBSEC)
		if string(jsonListTransactionsByAddressRIBSEC) == "{}" { // empty struct
			dst.ListTransactionsByAddressRIBSEC = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressRIBSEC = nil
	}

	// try to unmarshal data into ListTransactionsByAddressRIBSL
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressRIBSL)
	if err == nil {
		jsonListTransactionsByAddressRIBSL, _ := json.Marshal(dst.ListTransactionsByAddressRIBSL)
		if string(jsonListTransactionsByAddressRIBSL) == "{}" { // empty struct
			dst.ListTransactionsByAddressRIBSL = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressRIBSL = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListTransactionsByAddressRIBSB = nil
		dst.ListTransactionsByAddressRIBSBC = nil
		dst.ListTransactionsByAddressRIBSD = nil
		dst.ListTransactionsByAddressRIBSD2 = nil
		dst.ListTransactionsByAddressRIBSE = nil
		dst.ListTransactionsByAddressRIBSEC = nil
		dst.ListTransactionsByAddressRIBSL = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ListTransactionsByAddressRIBS)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ListTransactionsByAddressRIBS)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListTransactionsByAddressRIBS) MarshalJSON() ([]byte, error) {
	if src.ListTransactionsByAddressRIBSB != nil {
		return json.Marshal(&src.ListTransactionsByAddressRIBSB)
	}

	if src.ListTransactionsByAddressRIBSBC != nil {
		return json.Marshal(&src.ListTransactionsByAddressRIBSBC)
	}

	if src.ListTransactionsByAddressRIBSD != nil {
		return json.Marshal(&src.ListTransactionsByAddressRIBSD)
	}

	if src.ListTransactionsByAddressRIBSD2 != nil {
		return json.Marshal(&src.ListTransactionsByAddressRIBSD2)
	}

	if src.ListTransactionsByAddressRIBSE != nil {
		return json.Marshal(&src.ListTransactionsByAddressRIBSE)
	}

	if src.ListTransactionsByAddressRIBSEC != nil {
		return json.Marshal(&src.ListTransactionsByAddressRIBSEC)
	}

	if src.ListTransactionsByAddressRIBSL != nil {
		return json.Marshal(&src.ListTransactionsByAddressRIBSL)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListTransactionsByAddressRIBS) GetActualInstance() (interface{}) {
	if obj.ListTransactionsByAddressRIBSB != nil {
		return obj.ListTransactionsByAddressRIBSB
	}

	if obj.ListTransactionsByAddressRIBSBC != nil {
		return obj.ListTransactionsByAddressRIBSBC
	}

	if obj.ListTransactionsByAddressRIBSD != nil {
		return obj.ListTransactionsByAddressRIBSD
	}

	if obj.ListTransactionsByAddressRIBSD2 != nil {
		return obj.ListTransactionsByAddressRIBSD2
	}

	if obj.ListTransactionsByAddressRIBSE != nil {
		return obj.ListTransactionsByAddressRIBSE
	}

	if obj.ListTransactionsByAddressRIBSEC != nil {
		return obj.ListTransactionsByAddressRIBSEC
	}

	if obj.ListTransactionsByAddressRIBSL != nil {
		return obj.ListTransactionsByAddressRIBSL
	}

	// all schemas are nil
	return nil
}

type NullableListTransactionsByAddressRIBS struct {
	value *ListTransactionsByAddressRIBS
	isSet bool
}

func (v NullableListTransactionsByAddressRIBS) Get() *ListTransactionsByAddressRIBS {
	return v.value
}

func (v *NullableListTransactionsByAddressRIBS) Set(val *ListTransactionsByAddressRIBS) {
	v.value = val
	v.isSet = true
}

func (v NullableListTransactionsByAddressRIBS) IsSet() bool {
	return v.isSet
}

func (v *NullableListTransactionsByAddressRIBS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTransactionsByAddressRIBS(val *ListTransactionsByAddressRIBS) *NullableListTransactionsByAddressRIBS {
	return &NullableListTransactionsByAddressRIBS{value: val, isSet: true}
}

func (v NullableListTransactionsByAddressRIBS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTransactionsByAddressRIBS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


