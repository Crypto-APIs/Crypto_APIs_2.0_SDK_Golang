/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// GetBlockDetailsByBlockHashFromCallbackRIBST Tron
type GetBlockDetailsByBlockHashFromCallbackRIBST struct {
	// Represents the bandwidth used for the transaction.
	BandwidthUsed string `json:"bandwidthUsed"`
	// Represents the block burned TRX.
	BurnedTrx string `json:"burnedTrx"`
	// Representats the used energy for the transaction.
	EnergyUsed string `json:"energyUsed"`
	// Represents the total size of the block in Bytes.
	Size int32 `json:"size"`
}

// NewGetBlockDetailsByBlockHashFromCallbackRIBST instantiates a new GetBlockDetailsByBlockHashFromCallbackRIBST object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetBlockDetailsByBlockHashFromCallbackRIBST(bandwidthUsed string, burnedTrx string, energyUsed string, size int32) *GetBlockDetailsByBlockHashFromCallbackRIBST {
	this := GetBlockDetailsByBlockHashFromCallbackRIBST{}
	this.BandwidthUsed = bandwidthUsed
	this.BurnedTrx = burnedTrx
	this.EnergyUsed = energyUsed
	this.Size = size
	return &this
}

// NewGetBlockDetailsByBlockHashFromCallbackRIBSTWithDefaults instantiates a new GetBlockDetailsByBlockHashFromCallbackRIBST object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetBlockDetailsByBlockHashFromCallbackRIBSTWithDefaults() *GetBlockDetailsByBlockHashFromCallbackRIBST {
	this := GetBlockDetailsByBlockHashFromCallbackRIBST{}
	return &this
}

// GetBandwidthUsed returns the BandwidthUsed field value
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) GetBandwidthUsed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BandwidthUsed
}

// GetBandwidthUsedOk returns a tuple with the BandwidthUsed field value
// and a boolean to check if the value has been set.
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) GetBandwidthUsedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BandwidthUsed, true
}

// SetBandwidthUsed sets field value
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) SetBandwidthUsed(v string) {
	o.BandwidthUsed = v
}

// GetBurnedTrx returns the BurnedTrx field value
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) GetBurnedTrx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BurnedTrx
}

// GetBurnedTrxOk returns a tuple with the BurnedTrx field value
// and a boolean to check if the value has been set.
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) GetBurnedTrxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BurnedTrx, true
}

// SetBurnedTrx sets field value
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) SetBurnedTrx(v string) {
	o.BurnedTrx = v
}

// GetEnergyUsed returns the EnergyUsed field value
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) GetEnergyUsed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnergyUsed
}

// GetEnergyUsedOk returns a tuple with the EnergyUsed field value
// and a boolean to check if the value has been set.
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) GetEnergyUsedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnergyUsed, true
}

// SetEnergyUsed sets field value
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) SetEnergyUsed(v string) {
	o.EnergyUsed = v
}

// GetSize returns the Size field value
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *GetBlockDetailsByBlockHashFromCallbackRIBST) SetSize(v int32) {
	o.Size = v
}

func (o GetBlockDetailsByBlockHashFromCallbackRIBST) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bandwidthUsed"] = o.BandwidthUsed
	}
	if true {
		toSerialize["burnedTrx"] = o.BurnedTrx
	}
	if true {
		toSerialize["energyUsed"] = o.EnergyUsed
	}
	if true {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableGetBlockDetailsByBlockHashFromCallbackRIBST struct {
	value *GetBlockDetailsByBlockHashFromCallbackRIBST
	isSet bool
}

func (v NullableGetBlockDetailsByBlockHashFromCallbackRIBST) Get() *GetBlockDetailsByBlockHashFromCallbackRIBST {
	return v.value
}

func (v *NullableGetBlockDetailsByBlockHashFromCallbackRIBST) Set(val *GetBlockDetailsByBlockHashFromCallbackRIBST) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBlockDetailsByBlockHashFromCallbackRIBST) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBlockDetailsByBlockHashFromCallbackRIBST) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBlockDetailsByBlockHashFromCallbackRIBST(val *GetBlockDetailsByBlockHashFromCallbackRIBST) *NullableGetBlockDetailsByBlockHashFromCallbackRIBST {
	return &NullableGetBlockDetailsByBlockHashFromCallbackRIBST{value: val, isSet: true}
}

func (v NullableGetBlockDetailsByBlockHashFromCallbackRIBST) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBlockDetailsByBlockHashFromCallbackRIBST) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


