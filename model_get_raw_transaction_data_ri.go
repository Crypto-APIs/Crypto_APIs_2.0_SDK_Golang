/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// GetRawTransactionDataRI struct for GetRawTransactionDataRI
type GetRawTransactionDataRI struct {
	// Represents the raw transaction data in hexadecimal format.
	TransactionHex string `json:"transactionHex"`
}

// NewGetRawTransactionDataRI instantiates a new GetRawTransactionDataRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRawTransactionDataRI(transactionHex string) *GetRawTransactionDataRI {
	this := GetRawTransactionDataRI{}
	this.TransactionHex = transactionHex
	return &this
}

// NewGetRawTransactionDataRIWithDefaults instantiates a new GetRawTransactionDataRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRawTransactionDataRIWithDefaults() *GetRawTransactionDataRI {
	this := GetRawTransactionDataRI{}
	return &this
}

// GetTransactionHex returns the TransactionHex field value
func (o *GetRawTransactionDataRI) GetTransactionHex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionHex
}

// GetTransactionHexOk returns a tuple with the TransactionHex field value
// and a boolean to check if the value has been set.
func (o *GetRawTransactionDataRI) GetTransactionHexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionHex, true
}

// SetTransactionHex sets field value
func (o *GetRawTransactionDataRI) SetTransactionHex(v string) {
	o.TransactionHex = v
}

func (o GetRawTransactionDataRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transactionHex"] = o.TransactionHex
	}
	return json.Marshal(toSerialize)
}

type NullableGetRawTransactionDataRI struct {
	value *GetRawTransactionDataRI
	isSet bool
}

func (v NullableGetRawTransactionDataRI) Get() *GetRawTransactionDataRI {
	return v.value
}

func (v *NullableGetRawTransactionDataRI) Set(val *GetRawTransactionDataRI) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRawTransactionDataRI) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRawTransactionDataRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRawTransactionDataRI(val *GetRawTransactionDataRI) *NullableGetRawTransactionDataRI {
	return &NullableGetRawTransactionDataRI{value: val, isSet: true}
}

func (v NullableGetRawTransactionDataRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRawTransactionDataRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


