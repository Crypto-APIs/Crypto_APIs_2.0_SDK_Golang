/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// BlockHeightReachedDataItem Defines an `item` as one result.
type BlockHeightReachedDataItem struct {
	// Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
	Blockchain string `json:"blockchain"`
	// Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\", \"rinkeby\" are test networks.
	Network string `json:"network"`
	// Defines the number of blocks in the blockchain preceding this specific block.
	Height int32 `json:"height"`
	// Represents the hash of the block's header, i.e. an output that has a fixed length.
	Hash string `json:"hash"`
	// Defines the exact date/time when this block was mined in seconds since Unix Epoch time.
	Timestamp int32 `json:"timestamp"`
}

// NewBlockHeightReachedDataItem instantiates a new BlockHeightReachedDataItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockHeightReachedDataItem(blockchain string, network string, height int32, hash string, timestamp int32) *BlockHeightReachedDataItem {
	this := BlockHeightReachedDataItem{}
	this.Blockchain = blockchain
	this.Network = network
	this.Height = height
	this.Hash = hash
	this.Timestamp = timestamp
	return &this
}

// NewBlockHeightReachedDataItemWithDefaults instantiates a new BlockHeightReachedDataItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockHeightReachedDataItemWithDefaults() *BlockHeightReachedDataItem {
	this := BlockHeightReachedDataItem{}
	return &this
}

// GetBlockchain returns the Blockchain field value
func (o *BlockHeightReachedDataItem) GetBlockchain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Blockchain
}

// GetBlockchainOk returns a tuple with the Blockchain field value
// and a boolean to check if the value has been set.
func (o *BlockHeightReachedDataItem) GetBlockchainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blockchain, true
}

// SetBlockchain sets field value
func (o *BlockHeightReachedDataItem) SetBlockchain(v string) {
	o.Blockchain = v
}

// GetNetwork returns the Network field value
func (o *BlockHeightReachedDataItem) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *BlockHeightReachedDataItem) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *BlockHeightReachedDataItem) SetNetwork(v string) {
	o.Network = v
}

// GetHeight returns the Height field value
func (o *BlockHeightReachedDataItem) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *BlockHeightReachedDataItem) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *BlockHeightReachedDataItem) SetHeight(v int32) {
	o.Height = v
}

// GetHash returns the Hash field value
func (o *BlockHeightReachedDataItem) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *BlockHeightReachedDataItem) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *BlockHeightReachedDataItem) SetHash(v string) {
	o.Hash = v
}

// GetTimestamp returns the Timestamp field value
func (o *BlockHeightReachedDataItem) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *BlockHeightReachedDataItem) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *BlockHeightReachedDataItem) SetTimestamp(v int32) {
	o.Timestamp = v
}

func (o BlockHeightReachedDataItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blockchain"] = o.Blockchain
	}
	if true {
		toSerialize["network"] = o.Network
	}
	if true {
		toSerialize["height"] = o.Height
	}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableBlockHeightReachedDataItem struct {
	value *BlockHeightReachedDataItem
	isSet bool
}

func (v NullableBlockHeightReachedDataItem) Get() *BlockHeightReachedDataItem {
	return v.value
}

func (v *NullableBlockHeightReachedDataItem) Set(val *BlockHeightReachedDataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockHeightReachedDataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockHeightReachedDataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockHeightReachedDataItem(val *BlockHeightReachedDataItem) *NullableBlockHeightReachedDataItem {
	return &NullableBlockHeightReachedDataItem{value: val, isSet: true}
}

func (v NullableBlockHeightReachedDataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockHeightReachedDataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


