/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// GetFeeAddressDetailsRI struct for GetFeeAddressDetailsRI
type GetFeeAddressDetailsRI struct {
	// Represents the specific fee address, which is always automatically generated. Users must fund it.
	Address string `json:"address"`
	Balance GetFeeAddressDetailsRIBalance `json:"balance"`
	// Represents the minimum transfer amount of the currency in the `fromAddress` that can be allowed for an automatic forwarding.
	MinimumTransferAmount string `json:"minimumTransferAmount"`
}

// NewGetFeeAddressDetailsRI instantiates a new GetFeeAddressDetailsRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetFeeAddressDetailsRI(address string, balance GetFeeAddressDetailsRIBalance, minimumTransferAmount string) *GetFeeAddressDetailsRI {
	this := GetFeeAddressDetailsRI{}
	this.Address = address
	this.Balance = balance
	this.MinimumTransferAmount = minimumTransferAmount
	return &this
}

// NewGetFeeAddressDetailsRIWithDefaults instantiates a new GetFeeAddressDetailsRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetFeeAddressDetailsRIWithDefaults() *GetFeeAddressDetailsRI {
	this := GetFeeAddressDetailsRI{}
	return &this
}

// GetAddress returns the Address field value
func (o *GetFeeAddressDetailsRI) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *GetFeeAddressDetailsRI) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *GetFeeAddressDetailsRI) SetAddress(v string) {
	o.Address = v
}

// GetBalance returns the Balance field value
func (o *GetFeeAddressDetailsRI) GetBalance() GetFeeAddressDetailsRIBalance {
	if o == nil {
		var ret GetFeeAddressDetailsRIBalance
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *GetFeeAddressDetailsRI) GetBalanceOk() (*GetFeeAddressDetailsRIBalance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *GetFeeAddressDetailsRI) SetBalance(v GetFeeAddressDetailsRIBalance) {
	o.Balance = v
}

// GetMinimumTransferAmount returns the MinimumTransferAmount field value
func (o *GetFeeAddressDetailsRI) GetMinimumTransferAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinimumTransferAmount
}

// GetMinimumTransferAmountOk returns a tuple with the MinimumTransferAmount field value
// and a boolean to check if the value has been set.
func (o *GetFeeAddressDetailsRI) GetMinimumTransferAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumTransferAmount, true
}

// SetMinimumTransferAmount sets field value
func (o *GetFeeAddressDetailsRI) SetMinimumTransferAmount(v string) {
	o.MinimumTransferAmount = v
}

func (o GetFeeAddressDetailsRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["balance"] = o.Balance
	}
	if true {
		toSerialize["minimumTransferAmount"] = o.MinimumTransferAmount
	}
	return json.Marshal(toSerialize)
}

type NullableGetFeeAddressDetailsRI struct {
	value *GetFeeAddressDetailsRI
	isSet bool
}

func (v NullableGetFeeAddressDetailsRI) Get() *GetFeeAddressDetailsRI {
	return v.value
}

func (v *NullableGetFeeAddressDetailsRI) Set(val *GetFeeAddressDetailsRI) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFeeAddressDetailsRI) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFeeAddressDetailsRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFeeAddressDetailsRI(val *GetFeeAddressDetailsRI) *NullableGetFeeAddressDetailsRI {
	return &NullableGetFeeAddressDetailsRI{value: val, isSet: true}
}

func (v NullableGetFeeAddressDetailsRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFeeAddressDetailsRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


