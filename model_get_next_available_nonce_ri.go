/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// GetNextAvailableNonceRI struct for GetNextAvailableNonceRI
type GetNextAvailableNonceRI struct {
	// Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
	NextAvailableNonce int32 `json:"nextAvailableNonce"`
}

// NewGetNextAvailableNonceRI instantiates a new GetNextAvailableNonceRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNextAvailableNonceRI(nextAvailableNonce int32) *GetNextAvailableNonceRI {
	this := GetNextAvailableNonceRI{}
	this.NextAvailableNonce = nextAvailableNonce
	return &this
}

// NewGetNextAvailableNonceRIWithDefaults instantiates a new GetNextAvailableNonceRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNextAvailableNonceRIWithDefaults() *GetNextAvailableNonceRI {
	this := GetNextAvailableNonceRI{}
	return &this
}

// GetNextAvailableNonce returns the NextAvailableNonce field value
func (o *GetNextAvailableNonceRI) GetNextAvailableNonce() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NextAvailableNonce
}

// GetNextAvailableNonceOk returns a tuple with the NextAvailableNonce field value
// and a boolean to check if the value has been set.
func (o *GetNextAvailableNonceRI) GetNextAvailableNonceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextAvailableNonce, true
}

// SetNextAvailableNonce sets field value
func (o *GetNextAvailableNonceRI) SetNextAvailableNonce(v int32) {
	o.NextAvailableNonce = v
}

func (o GetNextAvailableNonceRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nextAvailableNonce"] = o.NextAvailableNonce
	}
	return json.Marshal(toSerialize)
}

type NullableGetNextAvailableNonceRI struct {
	value *GetNextAvailableNonceRI
	isSet bool
}

func (v NullableGetNextAvailableNonceRI) Get() *GetNextAvailableNonceRI {
	return v.value
}

func (v *NullableGetNextAvailableNonceRI) Set(val *GetNextAvailableNonceRI) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNextAvailableNonceRI) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNextAvailableNonceRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNextAvailableNonceRI(val *GetNextAvailableNonceRI) *NullableGetNextAvailableNonceRI {
	return &NullableGetNextAvailableNonceRI{value: val, isSet: true}
}

func (v NullableGetNextAvailableNonceRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNextAvailableNonceRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


