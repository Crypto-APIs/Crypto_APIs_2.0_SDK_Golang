/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// BroadcastLocallySignedTransactionRI struct for BroadcastLocallySignedTransactionRI
type BroadcastLocallySignedTransactionRI struct {
	// Represents the unique identifier of a transaction, i.e. it could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction `hash` in Ethereum blockchain.
	TransactionId string `json:"transactionId"`
}

// NewBroadcastLocallySignedTransactionRI instantiates a new BroadcastLocallySignedTransactionRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBroadcastLocallySignedTransactionRI(transactionId string) *BroadcastLocallySignedTransactionRI {
	this := BroadcastLocallySignedTransactionRI{}
	this.TransactionId = transactionId
	return &this
}

// NewBroadcastLocallySignedTransactionRIWithDefaults instantiates a new BroadcastLocallySignedTransactionRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBroadcastLocallySignedTransactionRIWithDefaults() *BroadcastLocallySignedTransactionRI {
	this := BroadcastLocallySignedTransactionRI{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *BroadcastLocallySignedTransactionRI) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *BroadcastLocallySignedTransactionRI) GetTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *BroadcastLocallySignedTransactionRI) SetTransactionId(v string) {
	o.TransactionId = v
}

func (o BroadcastLocallySignedTransactionRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transactionId"] = o.TransactionId
	}
	return json.Marshal(toSerialize)
}

type NullableBroadcastLocallySignedTransactionRI struct {
	value *BroadcastLocallySignedTransactionRI
	isSet bool
}

func (v NullableBroadcastLocallySignedTransactionRI) Get() *BroadcastLocallySignedTransactionRI {
	return v.value
}

func (v *NullableBroadcastLocallySignedTransactionRI) Set(val *BroadcastLocallySignedTransactionRI) {
	v.value = val
	v.isSet = true
}

func (v NullableBroadcastLocallySignedTransactionRI) IsSet() bool {
	return v.isSet
}

func (v *NullableBroadcastLocallySignedTransactionRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBroadcastLocallySignedTransactionRI(val *BroadcastLocallySignedTransactionRI) *NullableBroadcastLocallySignedTransactionRI {
	return &NullableBroadcastLocallySignedTransactionRI{value: val, isSet: true}
}

func (v NullableBroadcastLocallySignedTransactionRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBroadcastLocallySignedTransactionRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


