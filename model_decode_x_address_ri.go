/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// DecodeXAddressRI struct for DecodeXAddressRI
type DecodeXAddressRI struct {
	// Defines a specific Tag that is an additional XRP address feature. It helps identifying a transaction recipient beyond a wallet address.
	AddressTag int32 `json:"addressTag"`
	// Represents the public address, which is a compressed and shortened form of a public key.
	ClassicAddress string `json:"classicAddress"`
}

// NewDecodeXAddressRI instantiates a new DecodeXAddressRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecodeXAddressRI(addressTag int32, classicAddress string) *DecodeXAddressRI {
	this := DecodeXAddressRI{}
	this.AddressTag = addressTag
	this.ClassicAddress = classicAddress
	return &this
}

// NewDecodeXAddressRIWithDefaults instantiates a new DecodeXAddressRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecodeXAddressRIWithDefaults() *DecodeXAddressRI {
	this := DecodeXAddressRI{}
	return &this
}

// GetAddressTag returns the AddressTag field value
func (o *DecodeXAddressRI) GetAddressTag() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AddressTag
}

// GetAddressTagOk returns a tuple with the AddressTag field value
// and a boolean to check if the value has been set.
func (o *DecodeXAddressRI) GetAddressTagOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressTag, true
}

// SetAddressTag sets field value
func (o *DecodeXAddressRI) SetAddressTag(v int32) {
	o.AddressTag = v
}

// GetClassicAddress returns the ClassicAddress field value
func (o *DecodeXAddressRI) GetClassicAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassicAddress
}

// GetClassicAddressOk returns a tuple with the ClassicAddress field value
// and a boolean to check if the value has been set.
func (o *DecodeXAddressRI) GetClassicAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassicAddress, true
}

// SetClassicAddress sets field value
func (o *DecodeXAddressRI) SetClassicAddress(v string) {
	o.ClassicAddress = v
}

func (o DecodeXAddressRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["addressTag"] = o.AddressTag
	}
	if true {
		toSerialize["classicAddress"] = o.ClassicAddress
	}
	return json.Marshal(toSerialize)
}

type NullableDecodeXAddressRI struct {
	value *DecodeXAddressRI
	isSet bool
}

func (v NullableDecodeXAddressRI) Get() *DecodeXAddressRI {
	return v.value
}

func (v *NullableDecodeXAddressRI) Set(val *DecodeXAddressRI) {
	v.value = val
	v.isSet = true
}

func (v NullableDecodeXAddressRI) IsSet() bool {
	return v.isSet
}

func (v *NullableDecodeXAddressRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecodeXAddressRI(val *DecodeXAddressRI) *NullableDecodeXAddressRI {
	return &NullableDecodeXAddressRI{value: val, isSet: true}
}

func (v NullableDecodeXAddressRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecodeXAddressRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


