/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GetTransactionDetailsByTransactionIDRIBS - struct for GetTransactionDetailsByTransactionIDRIBS
type GetTransactionDetailsByTransactionIDRIBS struct {
	GetTransactionDetailsByTransactionIDRIBSB *GetTransactionDetailsByTransactionIDRIBSB
	GetTransactionDetailsByTransactionIDRIBSBC *GetTransactionDetailsByTransactionIDRIBSBC
	GetTransactionDetailsByTransactionIDRIBSBSC *GetTransactionDetailsByTransactionIDRIBSBSC
	GetTransactionDetailsByTransactionIDRIBSD *GetTransactionDetailsByTransactionIDRIBSD
	GetTransactionDetailsByTransactionIDRIBSD2 *GetTransactionDetailsByTransactionIDRIBSD2
	GetTransactionDetailsByTransactionIDRIBSE *GetTransactionDetailsByTransactionIDRIBSE
	GetTransactionDetailsByTransactionIDRIBSEC *GetTransactionDetailsByTransactionIDRIBSEC
	GetTransactionDetailsByTransactionIDRIBSL *GetTransactionDetailsByTransactionIDRIBSL
	GetTransactionDetailsByTransactionIDRIBSZ *GetTransactionDetailsByTransactionIDRIBSZ
}

// GetTransactionDetailsByTransactionIDRIBSBAsGetTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDRIBSB wrapped in GetTransactionDetailsByTransactionIDRIBS
func GetTransactionDetailsByTransactionIDRIBSBAsGetTransactionDetailsByTransactionIDRIBS(v *GetTransactionDetailsByTransactionIDRIBSB) GetTransactionDetailsByTransactionIDRIBS {
	return GetTransactionDetailsByTransactionIDRIBS{
		GetTransactionDetailsByTransactionIDRIBSB: v,
	}
}

// GetTransactionDetailsByTransactionIDRIBSBCAsGetTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDRIBSBC wrapped in GetTransactionDetailsByTransactionIDRIBS
func GetTransactionDetailsByTransactionIDRIBSBCAsGetTransactionDetailsByTransactionIDRIBS(v *GetTransactionDetailsByTransactionIDRIBSBC) GetTransactionDetailsByTransactionIDRIBS {
	return GetTransactionDetailsByTransactionIDRIBS{
		GetTransactionDetailsByTransactionIDRIBSBC: v,
	}
}

// GetTransactionDetailsByTransactionIDRIBSBSCAsGetTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDRIBSBSC wrapped in GetTransactionDetailsByTransactionIDRIBS
func GetTransactionDetailsByTransactionIDRIBSBSCAsGetTransactionDetailsByTransactionIDRIBS(v *GetTransactionDetailsByTransactionIDRIBSBSC) GetTransactionDetailsByTransactionIDRIBS {
	return GetTransactionDetailsByTransactionIDRIBS{
		GetTransactionDetailsByTransactionIDRIBSBSC: v,
	}
}

// GetTransactionDetailsByTransactionIDRIBSDAsGetTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDRIBSD wrapped in GetTransactionDetailsByTransactionIDRIBS
func GetTransactionDetailsByTransactionIDRIBSDAsGetTransactionDetailsByTransactionIDRIBS(v *GetTransactionDetailsByTransactionIDRIBSD) GetTransactionDetailsByTransactionIDRIBS {
	return GetTransactionDetailsByTransactionIDRIBS{
		GetTransactionDetailsByTransactionIDRIBSD: v,
	}
}

// GetTransactionDetailsByTransactionIDRIBSD2AsGetTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDRIBSD2 wrapped in GetTransactionDetailsByTransactionIDRIBS
func GetTransactionDetailsByTransactionIDRIBSD2AsGetTransactionDetailsByTransactionIDRIBS(v *GetTransactionDetailsByTransactionIDRIBSD2) GetTransactionDetailsByTransactionIDRIBS {
	return GetTransactionDetailsByTransactionIDRIBS{
		GetTransactionDetailsByTransactionIDRIBSD2: v,
	}
}

// GetTransactionDetailsByTransactionIDRIBSEAsGetTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDRIBSE wrapped in GetTransactionDetailsByTransactionIDRIBS
func GetTransactionDetailsByTransactionIDRIBSEAsGetTransactionDetailsByTransactionIDRIBS(v *GetTransactionDetailsByTransactionIDRIBSE) GetTransactionDetailsByTransactionIDRIBS {
	return GetTransactionDetailsByTransactionIDRIBS{
		GetTransactionDetailsByTransactionIDRIBSE: v,
	}
}

// GetTransactionDetailsByTransactionIDRIBSECAsGetTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDRIBSEC wrapped in GetTransactionDetailsByTransactionIDRIBS
func GetTransactionDetailsByTransactionIDRIBSECAsGetTransactionDetailsByTransactionIDRIBS(v *GetTransactionDetailsByTransactionIDRIBSEC) GetTransactionDetailsByTransactionIDRIBS {
	return GetTransactionDetailsByTransactionIDRIBS{
		GetTransactionDetailsByTransactionIDRIBSEC: v,
	}
}

// GetTransactionDetailsByTransactionIDRIBSLAsGetTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDRIBSL wrapped in GetTransactionDetailsByTransactionIDRIBS
func GetTransactionDetailsByTransactionIDRIBSLAsGetTransactionDetailsByTransactionIDRIBS(v *GetTransactionDetailsByTransactionIDRIBSL) GetTransactionDetailsByTransactionIDRIBS {
	return GetTransactionDetailsByTransactionIDRIBS{
		GetTransactionDetailsByTransactionIDRIBSL: v,
	}
}

// GetTransactionDetailsByTransactionIDRIBSZAsGetTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDRIBSZ wrapped in GetTransactionDetailsByTransactionIDRIBS
func GetTransactionDetailsByTransactionIDRIBSZAsGetTransactionDetailsByTransactionIDRIBS(v *GetTransactionDetailsByTransactionIDRIBSZ) GetTransactionDetailsByTransactionIDRIBS {
	return GetTransactionDetailsByTransactionIDRIBS{
		GetTransactionDetailsByTransactionIDRIBSZ: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetTransactionDetailsByTransactionIDRIBS) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetTransactionDetailsByTransactionIDRIBSB
	err = newStrictDecoder(data).Decode(&dst.GetTransactionDetailsByTransactionIDRIBSB)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDRIBSB, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDRIBSB)
		if string(jsonGetTransactionDetailsByTransactionIDRIBSB) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDRIBSB = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDRIBSB = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDRIBSBC
	err = newStrictDecoder(data).Decode(&dst.GetTransactionDetailsByTransactionIDRIBSBC)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDRIBSBC, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDRIBSBC)
		if string(jsonGetTransactionDetailsByTransactionIDRIBSBC) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDRIBSBC = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDRIBSBC = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDRIBSBSC
	err = newStrictDecoder(data).Decode(&dst.GetTransactionDetailsByTransactionIDRIBSBSC)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDRIBSBSC, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDRIBSBSC)
		if string(jsonGetTransactionDetailsByTransactionIDRIBSBSC) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDRIBSBSC = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDRIBSBSC = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDRIBSD
	err = newStrictDecoder(data).Decode(&dst.GetTransactionDetailsByTransactionIDRIBSD)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDRIBSD, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDRIBSD)
		if string(jsonGetTransactionDetailsByTransactionIDRIBSD) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDRIBSD = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDRIBSD = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDRIBSD2
	err = newStrictDecoder(data).Decode(&dst.GetTransactionDetailsByTransactionIDRIBSD2)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDRIBSD2, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDRIBSD2)
		if string(jsonGetTransactionDetailsByTransactionIDRIBSD2) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDRIBSD2 = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDRIBSD2 = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDRIBSE
	err = newStrictDecoder(data).Decode(&dst.GetTransactionDetailsByTransactionIDRIBSE)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDRIBSE, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDRIBSE)
		if string(jsonGetTransactionDetailsByTransactionIDRIBSE) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDRIBSE = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDRIBSE = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDRIBSEC
	err = newStrictDecoder(data).Decode(&dst.GetTransactionDetailsByTransactionIDRIBSEC)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDRIBSEC, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDRIBSEC)
		if string(jsonGetTransactionDetailsByTransactionIDRIBSEC) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDRIBSEC = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDRIBSEC = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDRIBSL
	err = newStrictDecoder(data).Decode(&dst.GetTransactionDetailsByTransactionIDRIBSL)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDRIBSL, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDRIBSL)
		if string(jsonGetTransactionDetailsByTransactionIDRIBSL) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDRIBSL = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDRIBSL = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDRIBSZ
	err = newStrictDecoder(data).Decode(&dst.GetTransactionDetailsByTransactionIDRIBSZ)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDRIBSZ, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDRIBSZ)
		if string(jsonGetTransactionDetailsByTransactionIDRIBSZ) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDRIBSZ = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDRIBSZ = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetTransactionDetailsByTransactionIDRIBSB = nil
		dst.GetTransactionDetailsByTransactionIDRIBSBC = nil
		dst.GetTransactionDetailsByTransactionIDRIBSBSC = nil
		dst.GetTransactionDetailsByTransactionIDRIBSD = nil
		dst.GetTransactionDetailsByTransactionIDRIBSD2 = nil
		dst.GetTransactionDetailsByTransactionIDRIBSE = nil
		dst.GetTransactionDetailsByTransactionIDRIBSEC = nil
		dst.GetTransactionDetailsByTransactionIDRIBSL = nil
		dst.GetTransactionDetailsByTransactionIDRIBSZ = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetTransactionDetailsByTransactionIDRIBS)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetTransactionDetailsByTransactionIDRIBS)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetTransactionDetailsByTransactionIDRIBS) MarshalJSON() ([]byte, error) {
	if src.GetTransactionDetailsByTransactionIDRIBSB != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDRIBSB)
	}

	if src.GetTransactionDetailsByTransactionIDRIBSBC != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDRIBSBC)
	}

	if src.GetTransactionDetailsByTransactionIDRIBSBSC != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDRIBSBSC)
	}

	if src.GetTransactionDetailsByTransactionIDRIBSD != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDRIBSD)
	}

	if src.GetTransactionDetailsByTransactionIDRIBSD2 != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDRIBSD2)
	}

	if src.GetTransactionDetailsByTransactionIDRIBSE != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDRIBSE)
	}

	if src.GetTransactionDetailsByTransactionIDRIBSEC != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDRIBSEC)
	}

	if src.GetTransactionDetailsByTransactionIDRIBSL != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDRIBSL)
	}

	if src.GetTransactionDetailsByTransactionIDRIBSZ != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDRIBSZ)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetTransactionDetailsByTransactionIDRIBS) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetTransactionDetailsByTransactionIDRIBSB != nil {
		return obj.GetTransactionDetailsByTransactionIDRIBSB
	}

	if obj.GetTransactionDetailsByTransactionIDRIBSBC != nil {
		return obj.GetTransactionDetailsByTransactionIDRIBSBC
	}

	if obj.GetTransactionDetailsByTransactionIDRIBSBSC != nil {
		return obj.GetTransactionDetailsByTransactionIDRIBSBSC
	}

	if obj.GetTransactionDetailsByTransactionIDRIBSD != nil {
		return obj.GetTransactionDetailsByTransactionIDRIBSD
	}

	if obj.GetTransactionDetailsByTransactionIDRIBSD2 != nil {
		return obj.GetTransactionDetailsByTransactionIDRIBSD2
	}

	if obj.GetTransactionDetailsByTransactionIDRIBSE != nil {
		return obj.GetTransactionDetailsByTransactionIDRIBSE
	}

	if obj.GetTransactionDetailsByTransactionIDRIBSEC != nil {
		return obj.GetTransactionDetailsByTransactionIDRIBSEC
	}

	if obj.GetTransactionDetailsByTransactionIDRIBSL != nil {
		return obj.GetTransactionDetailsByTransactionIDRIBSL
	}

	if obj.GetTransactionDetailsByTransactionIDRIBSZ != nil {
		return obj.GetTransactionDetailsByTransactionIDRIBSZ
	}

	// all schemas are nil
	return nil
}

type NullableGetTransactionDetailsByTransactionIDRIBS struct {
	value *GetTransactionDetailsByTransactionIDRIBS
	isSet bool
}

func (v NullableGetTransactionDetailsByTransactionIDRIBS) Get() *GetTransactionDetailsByTransactionIDRIBS {
	return v.value
}

func (v *NullableGetTransactionDetailsByTransactionIDRIBS) Set(val *GetTransactionDetailsByTransactionIDRIBS) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTransactionDetailsByTransactionIDRIBS) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTransactionDetailsByTransactionIDRIBS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTransactionDetailsByTransactionIDRIBS(val *GetTransactionDetailsByTransactionIDRIBS) *NullableGetTransactionDetailsByTransactionIDRIBS {
	return &NullableGetTransactionDetailsByTransactionIDRIBS{value: val, isSet: true}
}

func (v NullableGetTransactionDetailsByTransactionIDRIBS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTransactionDetailsByTransactionIDRIBS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


