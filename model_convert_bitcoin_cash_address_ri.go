/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ConvertBitcoinCashAddressRI struct for ConvertBitcoinCashAddressRI
type ConvertBitcoinCashAddressRI struct {
	// Represents the converted address
	ConvertedAddress string `json:"convertedAddress"`
}

// NewConvertBitcoinCashAddressRI instantiates a new ConvertBitcoinCashAddressRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertBitcoinCashAddressRI(convertedAddress string) *ConvertBitcoinCashAddressRI {
	this := ConvertBitcoinCashAddressRI{}
	this.ConvertedAddress = convertedAddress
	return &this
}

// NewConvertBitcoinCashAddressRIWithDefaults instantiates a new ConvertBitcoinCashAddressRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertBitcoinCashAddressRIWithDefaults() *ConvertBitcoinCashAddressRI {
	this := ConvertBitcoinCashAddressRI{}
	return &this
}

// GetConvertedAddress returns the ConvertedAddress field value
func (o *ConvertBitcoinCashAddressRI) GetConvertedAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConvertedAddress
}

// GetConvertedAddressOk returns a tuple with the ConvertedAddress field value
// and a boolean to check if the value has been set.
func (o *ConvertBitcoinCashAddressRI) GetConvertedAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConvertedAddress, true
}

// SetConvertedAddress sets field value
func (o *ConvertBitcoinCashAddressRI) SetConvertedAddress(v string) {
	o.ConvertedAddress = v
}

func (o ConvertBitcoinCashAddressRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["convertedAddress"] = o.ConvertedAddress
	}
	return json.Marshal(toSerialize)
}

type NullableConvertBitcoinCashAddressRI struct {
	value *ConvertBitcoinCashAddressRI
	isSet bool
}

func (v NullableConvertBitcoinCashAddressRI) Get() *ConvertBitcoinCashAddressRI {
	return v.value
}

func (v *NullableConvertBitcoinCashAddressRI) Set(val *ConvertBitcoinCashAddressRI) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertBitcoinCashAddressRI) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertBitcoinCashAddressRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertBitcoinCashAddressRI(val *ConvertBitcoinCashAddressRI) *NullableConvertBitcoinCashAddressRI {
	return &NullableConvertBitcoinCashAddressRI{value: val, isSet: true}
}

func (v NullableConvertBitcoinCashAddressRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertBitcoinCashAddressRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


