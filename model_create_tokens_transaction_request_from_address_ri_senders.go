/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// CreateTokensTransactionRequestFromAddressRISenders Defines details about the source, i.e. the sender.
type CreateTokensTransactionRequestFromAddressRISenders struct {
	// Defines the sender's public address.
	Address string `json:"address"`
}

// NewCreateTokensTransactionRequestFromAddressRISenders instantiates a new CreateTokensTransactionRequestFromAddressRISenders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTokensTransactionRequestFromAddressRISenders(address string) *CreateTokensTransactionRequestFromAddressRISenders {
	this := CreateTokensTransactionRequestFromAddressRISenders{}
	this.Address = address
	return &this
}

// NewCreateTokensTransactionRequestFromAddressRISendersWithDefaults instantiates a new CreateTokensTransactionRequestFromAddressRISenders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTokensTransactionRequestFromAddressRISendersWithDefaults() *CreateTokensTransactionRequestFromAddressRISenders {
	this := CreateTokensTransactionRequestFromAddressRISenders{}
	return &this
}

// GetAddress returns the Address field value
func (o *CreateTokensTransactionRequestFromAddressRISenders) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *CreateTokensTransactionRequestFromAddressRISenders) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *CreateTokensTransactionRequestFromAddressRISenders) SetAddress(v string) {
	o.Address = v
}

func (o CreateTokensTransactionRequestFromAddressRISenders) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	return json.Marshal(toSerialize)
}

type NullableCreateTokensTransactionRequestFromAddressRISenders struct {
	value *CreateTokensTransactionRequestFromAddressRISenders
	isSet bool
}

func (v NullableCreateTokensTransactionRequestFromAddressRISenders) Get() *CreateTokensTransactionRequestFromAddressRISenders {
	return v.value
}

func (v *NullableCreateTokensTransactionRequestFromAddressRISenders) Set(val *CreateTokensTransactionRequestFromAddressRISenders) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTokensTransactionRequestFromAddressRISenders) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTokensTransactionRequestFromAddressRISenders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTokensTransactionRequestFromAddressRISenders(val *CreateTokensTransactionRequestFromAddressRISenders) *NullableCreateTokensTransactionRequestFromAddressRISenders {
	return &NullableCreateTokensTransactionRequestFromAddressRISenders{value: val, isSet: true}
}

func (v NullableCreateTokensTransactionRequestFromAddressRISenders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTokensTransactionRequestFromAddressRISenders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


