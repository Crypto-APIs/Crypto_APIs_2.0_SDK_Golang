/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// ListTransactionsByBlockHashRIBS - struct for ListTransactionsByBlockHashRIBS
type ListTransactionsByBlockHashRIBS struct {
	ListTransactionsByBlockHashRIBSB *ListTransactionsByBlockHashRIBSB
	ListTransactionsByBlockHashRIBSBC *ListTransactionsByBlockHashRIBSBC
	ListTransactionsByBlockHashRIBSD *ListTransactionsByBlockHashRIBSD
	ListTransactionsByBlockHashRIBSD2 *ListTransactionsByBlockHashRIBSD2
	ListTransactionsByBlockHashRIBSE *ListTransactionsByBlockHashRIBSE
	ListTransactionsByBlockHashRIBSEC *ListTransactionsByBlockHashRIBSEC
	ListTransactionsByBlockHashRIBSL *ListTransactionsByBlockHashRIBSL
}

// ListTransactionsByBlockHashRIBSBAsListTransactionsByBlockHashRIBS is a convenience function that returns ListTransactionsByBlockHashRIBSB wrapped in ListTransactionsByBlockHashRIBS
func ListTransactionsByBlockHashRIBSBAsListTransactionsByBlockHashRIBS(v *ListTransactionsByBlockHashRIBSB) ListTransactionsByBlockHashRIBS {
	return ListTransactionsByBlockHashRIBS{ ListTransactionsByBlockHashRIBSB: v}
}

// ListTransactionsByBlockHashRIBSBCAsListTransactionsByBlockHashRIBS is a convenience function that returns ListTransactionsByBlockHashRIBSBC wrapped in ListTransactionsByBlockHashRIBS
func ListTransactionsByBlockHashRIBSBCAsListTransactionsByBlockHashRIBS(v *ListTransactionsByBlockHashRIBSBC) ListTransactionsByBlockHashRIBS {
	return ListTransactionsByBlockHashRIBS{ ListTransactionsByBlockHashRIBSBC: v}
}

// ListTransactionsByBlockHashRIBSDAsListTransactionsByBlockHashRIBS is a convenience function that returns ListTransactionsByBlockHashRIBSD wrapped in ListTransactionsByBlockHashRIBS
func ListTransactionsByBlockHashRIBSDAsListTransactionsByBlockHashRIBS(v *ListTransactionsByBlockHashRIBSD) ListTransactionsByBlockHashRIBS {
	return ListTransactionsByBlockHashRIBS{ ListTransactionsByBlockHashRIBSD: v}
}

// ListTransactionsByBlockHashRIBSD2AsListTransactionsByBlockHashRIBS is a convenience function that returns ListTransactionsByBlockHashRIBSD2 wrapped in ListTransactionsByBlockHashRIBS
func ListTransactionsByBlockHashRIBSD2AsListTransactionsByBlockHashRIBS(v *ListTransactionsByBlockHashRIBSD2) ListTransactionsByBlockHashRIBS {
	return ListTransactionsByBlockHashRIBS{ ListTransactionsByBlockHashRIBSD2: v}
}

// ListTransactionsByBlockHashRIBSEAsListTransactionsByBlockHashRIBS is a convenience function that returns ListTransactionsByBlockHashRIBSE wrapped in ListTransactionsByBlockHashRIBS
func ListTransactionsByBlockHashRIBSEAsListTransactionsByBlockHashRIBS(v *ListTransactionsByBlockHashRIBSE) ListTransactionsByBlockHashRIBS {
	return ListTransactionsByBlockHashRIBS{ ListTransactionsByBlockHashRIBSE: v}
}

// ListTransactionsByBlockHashRIBSECAsListTransactionsByBlockHashRIBS is a convenience function that returns ListTransactionsByBlockHashRIBSEC wrapped in ListTransactionsByBlockHashRIBS
func ListTransactionsByBlockHashRIBSECAsListTransactionsByBlockHashRIBS(v *ListTransactionsByBlockHashRIBSEC) ListTransactionsByBlockHashRIBS {
	return ListTransactionsByBlockHashRIBS{ ListTransactionsByBlockHashRIBSEC: v}
}

// ListTransactionsByBlockHashRIBSLAsListTransactionsByBlockHashRIBS is a convenience function that returns ListTransactionsByBlockHashRIBSL wrapped in ListTransactionsByBlockHashRIBS
func ListTransactionsByBlockHashRIBSLAsListTransactionsByBlockHashRIBS(v *ListTransactionsByBlockHashRIBSL) ListTransactionsByBlockHashRIBS {
	return ListTransactionsByBlockHashRIBS{ ListTransactionsByBlockHashRIBSL: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListTransactionsByBlockHashRIBS) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListTransactionsByBlockHashRIBSB
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashRIBSB)
	if err == nil {
		jsonListTransactionsByBlockHashRIBSB, _ := json.Marshal(dst.ListTransactionsByBlockHashRIBSB)
		if string(jsonListTransactionsByBlockHashRIBSB) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashRIBSB = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashRIBSB = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashRIBSBC
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashRIBSBC)
	if err == nil {
		jsonListTransactionsByBlockHashRIBSBC, _ := json.Marshal(dst.ListTransactionsByBlockHashRIBSBC)
		if string(jsonListTransactionsByBlockHashRIBSBC) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashRIBSBC = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashRIBSBC = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashRIBSD
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashRIBSD)
	if err == nil {
		jsonListTransactionsByBlockHashRIBSD, _ := json.Marshal(dst.ListTransactionsByBlockHashRIBSD)
		if string(jsonListTransactionsByBlockHashRIBSD) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashRIBSD = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashRIBSD = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashRIBSD2
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashRIBSD2)
	if err == nil {
		jsonListTransactionsByBlockHashRIBSD2, _ := json.Marshal(dst.ListTransactionsByBlockHashRIBSD2)
		if string(jsonListTransactionsByBlockHashRIBSD2) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashRIBSD2 = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashRIBSD2 = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashRIBSE
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashRIBSE)
	if err == nil {
		jsonListTransactionsByBlockHashRIBSE, _ := json.Marshal(dst.ListTransactionsByBlockHashRIBSE)
		if string(jsonListTransactionsByBlockHashRIBSE) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashRIBSE = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashRIBSE = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashRIBSEC
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashRIBSEC)
	if err == nil {
		jsonListTransactionsByBlockHashRIBSEC, _ := json.Marshal(dst.ListTransactionsByBlockHashRIBSEC)
		if string(jsonListTransactionsByBlockHashRIBSEC) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashRIBSEC = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashRIBSEC = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashRIBSL
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashRIBSL)
	if err == nil {
		jsonListTransactionsByBlockHashRIBSL, _ := json.Marshal(dst.ListTransactionsByBlockHashRIBSL)
		if string(jsonListTransactionsByBlockHashRIBSL) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashRIBSL = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashRIBSL = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListTransactionsByBlockHashRIBSB = nil
		dst.ListTransactionsByBlockHashRIBSBC = nil
		dst.ListTransactionsByBlockHashRIBSD = nil
		dst.ListTransactionsByBlockHashRIBSD2 = nil
		dst.ListTransactionsByBlockHashRIBSE = nil
		dst.ListTransactionsByBlockHashRIBSEC = nil
		dst.ListTransactionsByBlockHashRIBSL = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ListTransactionsByBlockHashRIBS)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ListTransactionsByBlockHashRIBS)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListTransactionsByBlockHashRIBS) MarshalJSON() ([]byte, error) {
	if src.ListTransactionsByBlockHashRIBSB != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashRIBSB)
	}

	if src.ListTransactionsByBlockHashRIBSBC != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashRIBSBC)
	}

	if src.ListTransactionsByBlockHashRIBSD != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashRIBSD)
	}

	if src.ListTransactionsByBlockHashRIBSD2 != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashRIBSD2)
	}

	if src.ListTransactionsByBlockHashRIBSE != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashRIBSE)
	}

	if src.ListTransactionsByBlockHashRIBSEC != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashRIBSEC)
	}

	if src.ListTransactionsByBlockHashRIBSL != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashRIBSL)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListTransactionsByBlockHashRIBS) GetActualInstance() (interface{}) {
	if obj.ListTransactionsByBlockHashRIBSB != nil {
		return obj.ListTransactionsByBlockHashRIBSB
	}

	if obj.ListTransactionsByBlockHashRIBSBC != nil {
		return obj.ListTransactionsByBlockHashRIBSBC
	}

	if obj.ListTransactionsByBlockHashRIBSD != nil {
		return obj.ListTransactionsByBlockHashRIBSD
	}

	if obj.ListTransactionsByBlockHashRIBSD2 != nil {
		return obj.ListTransactionsByBlockHashRIBSD2
	}

	if obj.ListTransactionsByBlockHashRIBSE != nil {
		return obj.ListTransactionsByBlockHashRIBSE
	}

	if obj.ListTransactionsByBlockHashRIBSEC != nil {
		return obj.ListTransactionsByBlockHashRIBSEC
	}

	if obj.ListTransactionsByBlockHashRIBSL != nil {
		return obj.ListTransactionsByBlockHashRIBSL
	}

	// all schemas are nil
	return nil
}

type NullableListTransactionsByBlockHashRIBS struct {
	value *ListTransactionsByBlockHashRIBS
	isSet bool
}

func (v NullableListTransactionsByBlockHashRIBS) Get() *ListTransactionsByBlockHashRIBS {
	return v.value
}

func (v *NullableListTransactionsByBlockHashRIBS) Set(val *ListTransactionsByBlockHashRIBS) {
	v.value = val
	v.isSet = true
}

func (v NullableListTransactionsByBlockHashRIBS) IsSet() bool {
	return v.isSet
}

func (v *NullableListTransactionsByBlockHashRIBS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTransactionsByBlockHashRIBS(val *ListTransactionsByBlockHashRIBS) *NullableListTransactionsByBlockHashRIBS {
	return &NullableListTransactionsByBlockHashRIBS{value: val, isSet: true}
}

func (v NullableListTransactionsByBlockHashRIBS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTransactionsByBlockHashRIBS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


