/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ActivateBlockchainEventSubscriptionRData struct for ActivateBlockchainEventSubscriptionRData
type ActivateBlockchainEventSubscriptionRData struct {
	Item ActivateBlockchainEventSubscriptionRI `json:"item"`
}

// NewActivateBlockchainEventSubscriptionRData instantiates a new ActivateBlockchainEventSubscriptionRData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivateBlockchainEventSubscriptionRData(item ActivateBlockchainEventSubscriptionRI) *ActivateBlockchainEventSubscriptionRData {
	this := ActivateBlockchainEventSubscriptionRData{}
	this.Item = item
	return &this
}

// NewActivateBlockchainEventSubscriptionRDataWithDefaults instantiates a new ActivateBlockchainEventSubscriptionRData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivateBlockchainEventSubscriptionRDataWithDefaults() *ActivateBlockchainEventSubscriptionRData {
	this := ActivateBlockchainEventSubscriptionRData{}
	return &this
}

// GetItem returns the Item field value
func (o *ActivateBlockchainEventSubscriptionRData) GetItem() ActivateBlockchainEventSubscriptionRI {
	if o == nil {
		var ret ActivateBlockchainEventSubscriptionRI
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *ActivateBlockchainEventSubscriptionRData) GetItemOk() (*ActivateBlockchainEventSubscriptionRI, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *ActivateBlockchainEventSubscriptionRData) SetItem(v ActivateBlockchainEventSubscriptionRI) {
	o.Item = v
}

func (o ActivateBlockchainEventSubscriptionRData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["item"] = o.Item
	}
	return json.Marshal(toSerialize)
}

type NullableActivateBlockchainEventSubscriptionRData struct {
	value *ActivateBlockchainEventSubscriptionRData
	isSet bool
}

func (v NullableActivateBlockchainEventSubscriptionRData) Get() *ActivateBlockchainEventSubscriptionRData {
	return v.value
}

func (v *NullableActivateBlockchainEventSubscriptionRData) Set(val *ActivateBlockchainEventSubscriptionRData) {
	v.value = val
	v.isSet = true
}

func (v NullableActivateBlockchainEventSubscriptionRData) IsSet() bool {
	return v.isSet
}

func (v *NullableActivateBlockchainEventSubscriptionRData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivateBlockchainEventSubscriptionRData(val *ActivateBlockchainEventSubscriptionRData) *NullableActivateBlockchainEventSubscriptionRData {
	return &NullableActivateBlockchainEventSubscriptionRData{value: val, isSet: true}
}

func (v NullableActivateBlockchainEventSubscriptionRData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivateBlockchainEventSubscriptionRData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


