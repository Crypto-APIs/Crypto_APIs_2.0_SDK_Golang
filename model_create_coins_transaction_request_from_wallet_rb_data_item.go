/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// CreateCoinsTransactionRequestFromWalletRBDataItem struct for CreateCoinsTransactionRequestFromWalletRBDataItem
type CreateCoinsTransactionRequestFromWalletRBDataItem struct {
	// Represents the Secret Key value provided by the customer. This field is used for security purposes during the callback notification, in order to prove the sender of the callback as Crypto APIs. For more information please see our [Documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-security).
	CallbackSecretKey *string `json:"callbackSecretKey,omitempty"`
	// Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs. `We support ONLY httpS type of protocol`.
	CallbackUrl *string `json:"callbackUrl,omitempty"`
	// Represents the fee priority of the automation, whether it is \"slow\", \"standard\" or \"fast\".
	FeePriority string `json:"feePriority"`
	// Represents an optional note to add a free text in, explaining or providing additional detail on the transaction request.
	Note *string `json:"note,omitempty"`
	// Refers to a model of a UTXO spending strategy, where customers can choose how to spend their transaction outputs from multiple Bitcoin addresses. Two options available - \"minimize-dust\" (select lower amounts from multiple addresses) or \"optimize-size\" (select higher amounts from less addresses).
	PrepareStrategy *string `json:"prepareStrategy,omitempty"`
	// Defines the destination of the transaction, whether it is incoming or outgoing.
	Recipients []CreateCoinsTransactionRequestFromWalletRBDataItemRecipientsInner `json:"recipients"`
}

// NewCreateCoinsTransactionRequestFromWalletRBDataItem instantiates a new CreateCoinsTransactionRequestFromWalletRBDataItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCoinsTransactionRequestFromWalletRBDataItem(feePriority string, recipients []CreateCoinsTransactionRequestFromWalletRBDataItemRecipientsInner) *CreateCoinsTransactionRequestFromWalletRBDataItem {
	this := CreateCoinsTransactionRequestFromWalletRBDataItem{}
	this.FeePriority = feePriority
	var prepareStrategy string = "minimize-dust"
	this.PrepareStrategy = &prepareStrategy
	this.Recipients = recipients
	return &this
}

// NewCreateCoinsTransactionRequestFromWalletRBDataItemWithDefaults instantiates a new CreateCoinsTransactionRequestFromWalletRBDataItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCoinsTransactionRequestFromWalletRBDataItemWithDefaults() *CreateCoinsTransactionRequestFromWalletRBDataItem {
	this := CreateCoinsTransactionRequestFromWalletRBDataItem{}
	var prepareStrategy string = "minimize-dust"
	this.PrepareStrategy = &prepareStrategy
	return &this
}

// GetCallbackSecretKey returns the CallbackSecretKey field value if set, zero value otherwise.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetCallbackSecretKey() string {
	if o == nil || o.CallbackSecretKey == nil {
		var ret string
		return ret
	}
	return *o.CallbackSecretKey
}

// GetCallbackSecretKeyOk returns a tuple with the CallbackSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetCallbackSecretKeyOk() (*string, bool) {
	if o == nil || o.CallbackSecretKey == nil {
		return nil, false
	}
	return o.CallbackSecretKey, true
}

// HasCallbackSecretKey returns a boolean if a field has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) HasCallbackSecretKey() bool {
	if o != nil && o.CallbackSecretKey != nil {
		return true
	}

	return false
}

// SetCallbackSecretKey gets a reference to the given string and assigns it to the CallbackSecretKey field.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) SetCallbackSecretKey(v string) {
	o.CallbackSecretKey = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetCallbackUrlOk() (*string, bool) {
	if o == nil || o.CallbackUrl == nil {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl != nil {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetFeePriority returns the FeePriority field value
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetFeePriority() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeePriority
}

// GetFeePriorityOk returns a tuple with the FeePriority field value
// and a boolean to check if the value has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetFeePriorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeePriority, true
}

// SetFeePriority sets field value
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) SetFeePriority(v string) {
	o.FeePriority = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetNote() string {
	if o == nil || o.Note == nil {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetNoteOk() (*string, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) SetNote(v string) {
	o.Note = &v
}

// GetPrepareStrategy returns the PrepareStrategy field value if set, zero value otherwise.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetPrepareStrategy() string {
	if o == nil || o.PrepareStrategy == nil {
		var ret string
		return ret
	}
	return *o.PrepareStrategy
}

// GetPrepareStrategyOk returns a tuple with the PrepareStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetPrepareStrategyOk() (*string, bool) {
	if o == nil || o.PrepareStrategy == nil {
		return nil, false
	}
	return o.PrepareStrategy, true
}

// HasPrepareStrategy returns a boolean if a field has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) HasPrepareStrategy() bool {
	if o != nil && o.PrepareStrategy != nil {
		return true
	}

	return false
}

// SetPrepareStrategy gets a reference to the given string and assigns it to the PrepareStrategy field.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) SetPrepareStrategy(v string) {
	o.PrepareStrategy = &v
}

// GetRecipients returns the Recipients field value
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetRecipients() []CreateCoinsTransactionRequestFromWalletRBDataItemRecipientsInner {
	if o == nil {
		var ret []CreateCoinsTransactionRequestFromWalletRBDataItemRecipientsInner
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) GetRecipientsOk() ([]CreateCoinsTransactionRequestFromWalletRBDataItemRecipientsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recipients, true
}

// SetRecipients sets field value
func (o *CreateCoinsTransactionRequestFromWalletRBDataItem) SetRecipients(v []CreateCoinsTransactionRequestFromWalletRBDataItemRecipientsInner) {
	o.Recipients = v
}

func (o CreateCoinsTransactionRequestFromWalletRBDataItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CallbackSecretKey != nil {
		toSerialize["callbackSecretKey"] = o.CallbackSecretKey
	}
	if o.CallbackUrl != nil {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	if true {
		toSerialize["feePriority"] = o.FeePriority
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.PrepareStrategy != nil {
		toSerialize["prepareStrategy"] = o.PrepareStrategy
	}
	if true {
		toSerialize["recipients"] = o.Recipients
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCoinsTransactionRequestFromWalletRBDataItem struct {
	value *CreateCoinsTransactionRequestFromWalletRBDataItem
	isSet bool
}

func (v NullableCreateCoinsTransactionRequestFromWalletRBDataItem) Get() *CreateCoinsTransactionRequestFromWalletRBDataItem {
	return v.value
}

func (v *NullableCreateCoinsTransactionRequestFromWalletRBDataItem) Set(val *CreateCoinsTransactionRequestFromWalletRBDataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCoinsTransactionRequestFromWalletRBDataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCoinsTransactionRequestFromWalletRBDataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCoinsTransactionRequestFromWalletRBDataItem(val *CreateCoinsTransactionRequestFromWalletRBDataItem) *NullableCreateCoinsTransactionRequestFromWalletRBDataItem {
	return &NullableCreateCoinsTransactionRequestFromWalletRBDataItem{value: val, isSet: true}
}

func (v NullableCreateCoinsTransactionRequestFromWalletRBDataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCoinsTransactionRequestFromWalletRBDataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


