/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GetLatestMinedBlockResponseItemBlockchainSpecific - struct for GetLatestMinedBlockResponseItemBlockchainSpecific
type GetLatestMinedBlockResponseItemBlockchainSpecific struct {
	GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin *GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin
	GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash *GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash
	GetLatestMinedBlockResponseItemBlockchainSpecificDash *GetLatestMinedBlockResponseItemBlockchainSpecificDash
	GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin *GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin
	GetLatestMinedBlockResponseItemBlockchainSpecificEthereum *GetLatestMinedBlockResponseItemBlockchainSpecificEthereum
	GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic *GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic
	GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin *GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin
}

// GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinAsGetLatestMinedBlockResponseItemBlockchainSpecific is a convenience function that returns GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin wrapped in GetLatestMinedBlockResponseItemBlockchainSpecific
func GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinAsGetLatestMinedBlockResponseItemBlockchainSpecific(v *GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin) GetLatestMinedBlockResponseItemBlockchainSpecific {
	return GetLatestMinedBlockResponseItemBlockchainSpecific{ GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin: v}
}

// GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCashAsGetLatestMinedBlockResponseItemBlockchainSpecific is a convenience function that returns GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash wrapped in GetLatestMinedBlockResponseItemBlockchainSpecific
func GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCashAsGetLatestMinedBlockResponseItemBlockchainSpecific(v *GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash) GetLatestMinedBlockResponseItemBlockchainSpecific {
	return GetLatestMinedBlockResponseItemBlockchainSpecific{ GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash: v}
}

// GetLatestMinedBlockResponseItemBlockchainSpecificDashAsGetLatestMinedBlockResponseItemBlockchainSpecific is a convenience function that returns GetLatestMinedBlockResponseItemBlockchainSpecificDash wrapped in GetLatestMinedBlockResponseItemBlockchainSpecific
func GetLatestMinedBlockResponseItemBlockchainSpecificDashAsGetLatestMinedBlockResponseItemBlockchainSpecific(v *GetLatestMinedBlockResponseItemBlockchainSpecificDash) GetLatestMinedBlockResponseItemBlockchainSpecific {
	return GetLatestMinedBlockResponseItemBlockchainSpecific{ GetLatestMinedBlockResponseItemBlockchainSpecificDash: v}
}

// GetLatestMinedBlockResponseItemBlockchainSpecificDogecoinAsGetLatestMinedBlockResponseItemBlockchainSpecific is a convenience function that returns GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin wrapped in GetLatestMinedBlockResponseItemBlockchainSpecific
func GetLatestMinedBlockResponseItemBlockchainSpecificDogecoinAsGetLatestMinedBlockResponseItemBlockchainSpecific(v *GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin) GetLatestMinedBlockResponseItemBlockchainSpecific {
	return GetLatestMinedBlockResponseItemBlockchainSpecific{ GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin: v}
}

// GetLatestMinedBlockResponseItemBlockchainSpecificEthereumAsGetLatestMinedBlockResponseItemBlockchainSpecific is a convenience function that returns GetLatestMinedBlockResponseItemBlockchainSpecificEthereum wrapped in GetLatestMinedBlockResponseItemBlockchainSpecific
func GetLatestMinedBlockResponseItemBlockchainSpecificEthereumAsGetLatestMinedBlockResponseItemBlockchainSpecific(v *GetLatestMinedBlockResponseItemBlockchainSpecificEthereum) GetLatestMinedBlockResponseItemBlockchainSpecific {
	return GetLatestMinedBlockResponseItemBlockchainSpecific{ GetLatestMinedBlockResponseItemBlockchainSpecificEthereum: v}
}

// GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassicAsGetLatestMinedBlockResponseItemBlockchainSpecific is a convenience function that returns GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic wrapped in GetLatestMinedBlockResponseItemBlockchainSpecific
func GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassicAsGetLatestMinedBlockResponseItemBlockchainSpecific(v *GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic) GetLatestMinedBlockResponseItemBlockchainSpecific {
	return GetLatestMinedBlockResponseItemBlockchainSpecific{ GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic: v}
}

// GetLatestMinedBlockResponseItemBlockchainSpecificLitecoinAsGetLatestMinedBlockResponseItemBlockchainSpecific is a convenience function that returns GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin wrapped in GetLatestMinedBlockResponseItemBlockchainSpecific
func GetLatestMinedBlockResponseItemBlockchainSpecificLitecoinAsGetLatestMinedBlockResponseItemBlockchainSpecific(v *GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin) GetLatestMinedBlockResponseItemBlockchainSpecific {
	return GetLatestMinedBlockResponseItemBlockchainSpecific{ GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetLatestMinedBlockResponseItemBlockchainSpecific) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin)
	if err == nil {
		jsonGetLatestMinedBlockResponseItemBlockchainSpecificBitcoin, _ := json.Marshal(dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin)
		if string(jsonGetLatestMinedBlockResponseItemBlockchainSpecificBitcoin) == "{}" { // empty struct
			dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin = nil
	}

	// try to unmarshal data into GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash)
	if err == nil {
		jsonGetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash, _ := json.Marshal(dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash)
		if string(jsonGetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash) == "{}" { // empty struct
			dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash = nil
	}

	// try to unmarshal data into GetLatestMinedBlockResponseItemBlockchainSpecificDash
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockResponseItemBlockchainSpecificDash)
	if err == nil {
		jsonGetLatestMinedBlockResponseItemBlockchainSpecificDash, _ := json.Marshal(dst.GetLatestMinedBlockResponseItemBlockchainSpecificDash)
		if string(jsonGetLatestMinedBlockResponseItemBlockchainSpecificDash) == "{}" { // empty struct
			dst.GetLatestMinedBlockResponseItemBlockchainSpecificDash = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificDash = nil
	}

	// try to unmarshal data into GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin)
	if err == nil {
		jsonGetLatestMinedBlockResponseItemBlockchainSpecificDogecoin, _ := json.Marshal(dst.GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin)
		if string(jsonGetLatestMinedBlockResponseItemBlockchainSpecificDogecoin) == "{}" { // empty struct
			dst.GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin = nil
	}

	// try to unmarshal data into GetLatestMinedBlockResponseItemBlockchainSpecificEthereum
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereum)
	if err == nil {
		jsonGetLatestMinedBlockResponseItemBlockchainSpecificEthereum, _ := json.Marshal(dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereum)
		if string(jsonGetLatestMinedBlockResponseItemBlockchainSpecificEthereum) == "{}" { // empty struct
			dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereum = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereum = nil
	}

	// try to unmarshal data into GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic)
	if err == nil {
		jsonGetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic, _ := json.Marshal(dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic)
		if string(jsonGetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic) == "{}" { // empty struct
			dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic = nil
	}

	// try to unmarshal data into GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin)
	if err == nil {
		jsonGetLatestMinedBlockResponseItemBlockchainSpecificLitecoin, _ := json.Marshal(dst.GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin)
		if string(jsonGetLatestMinedBlockResponseItemBlockchainSpecificLitecoin) == "{}" { // empty struct
			dst.GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin = nil
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash = nil
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificDash = nil
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin = nil
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereum = nil
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic = nil
		dst.GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetLatestMinedBlockResponseItemBlockchainSpecific)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetLatestMinedBlockResponseItemBlockchainSpecific)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetLatestMinedBlockResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	if src.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin != nil {
		return json.Marshal(&src.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin)
	}

	if src.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash != nil {
		return json.Marshal(&src.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash)
	}

	if src.GetLatestMinedBlockResponseItemBlockchainSpecificDash != nil {
		return json.Marshal(&src.GetLatestMinedBlockResponseItemBlockchainSpecificDash)
	}

	if src.GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin != nil {
		return json.Marshal(&src.GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin)
	}

	if src.GetLatestMinedBlockResponseItemBlockchainSpecificEthereum != nil {
		return json.Marshal(&src.GetLatestMinedBlockResponseItemBlockchainSpecificEthereum)
	}

	if src.GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic != nil {
		return json.Marshal(&src.GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic)
	}

	if src.GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin != nil {
		return json.Marshal(&src.GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetLatestMinedBlockResponseItemBlockchainSpecific) GetActualInstance() (interface{}) {
	if obj.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin != nil {
		return obj.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin
	}

	if obj.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash != nil {
		return obj.GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash
	}

	if obj.GetLatestMinedBlockResponseItemBlockchainSpecificDash != nil {
		return obj.GetLatestMinedBlockResponseItemBlockchainSpecificDash
	}

	if obj.GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin != nil {
		return obj.GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin
	}

	if obj.GetLatestMinedBlockResponseItemBlockchainSpecificEthereum != nil {
		return obj.GetLatestMinedBlockResponseItemBlockchainSpecificEthereum
	}

	if obj.GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic != nil {
		return obj.GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic
	}

	if obj.GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin != nil {
		return obj.GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin
	}

	// all schemas are nil
	return nil
}

type NullableGetLatestMinedBlockResponseItemBlockchainSpecific struct {
	value *GetLatestMinedBlockResponseItemBlockchainSpecific
	isSet bool
}

func (v NullableGetLatestMinedBlockResponseItemBlockchainSpecific) Get() *GetLatestMinedBlockResponseItemBlockchainSpecific {
	return v.value
}

func (v *NullableGetLatestMinedBlockResponseItemBlockchainSpecific) Set(val *GetLatestMinedBlockResponseItemBlockchainSpecific) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLatestMinedBlockResponseItemBlockchainSpecific) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLatestMinedBlockResponseItemBlockchainSpecific) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLatestMinedBlockResponseItemBlockchainSpecific(val *GetLatestMinedBlockResponseItemBlockchainSpecific) *NullableGetLatestMinedBlockResponseItemBlockchainSpecific {
	return &NullableGetLatestMinedBlockResponseItemBlockchainSpecific{value: val, isSet: true}
}

func (v NullableGetLatestMinedBlockResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLatestMinedBlockResponseItemBlockchainSpecific) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


