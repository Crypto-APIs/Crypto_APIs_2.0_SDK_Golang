/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner struct for ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner
type ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner struct {
	// Defines the deactivation reason as a message.
	Reason string `json:"reason"`
	// Represents the time of the subscription deactivation.
	Timestamp int32 `json:"timestamp"`
}

// NewListBlockchainEventsSubscriptionsRIDeactivationReasonsInner instantiates a new ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListBlockchainEventsSubscriptionsRIDeactivationReasonsInner(reason string, timestamp int32) *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner {
	this := ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner{}
	this.Reason = reason
	this.Timestamp = timestamp
	return &this
}

// NewListBlockchainEventsSubscriptionsRIDeactivationReasonsInnerWithDefaults instantiates a new ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListBlockchainEventsSubscriptionsRIDeactivationReasonsInnerWithDefaults() *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner {
	this := ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner{}
	return &this
}

// GetReason returns the Reason field value
func (o *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) SetReason(v string) {
	o.Reason = v
}

// GetTimestamp returns the Timestamp field value
func (o *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) SetTimestamp(v int32) {
	o.Timestamp = v
}

func (o ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner struct {
	value *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner
	isSet bool
}

func (v NullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) Get() *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner {
	return v.value
}

func (v *NullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) Set(val *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner(val *ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) *NullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner {
	return &NullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner{value: val, isSet: true}
}

func (v NullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBlockchainEventsSubscriptionsRIDeactivationReasonsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


