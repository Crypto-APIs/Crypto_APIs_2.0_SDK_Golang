/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ListConfirmedTransactionsByAddressRIBSBSC Binance Smart Chain
type ListConfirmedTransactionsByAddressRIBSBSC struct {
	// Represents the specific transaction contract.
	Contract *string `json:"contract,omitempty"`
	// Represents the amount of gas used by this specific transaction alone.
	GasLimit string `json:"gasLimit"`
	GasPrice ListConfirmedTransactionsByAddressRIBSBSCGasPrice `json:"gasPrice"`
	// Represents the exact unit of gas that was used for the transaction.
	GasUsed string `json:"gasUsed"`
	// Represents additional information that is required for the transaction.
	InputData string `json:"inputData"`
	// Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
	Nonce int32 `json:"nonce"`
	// String representation of the transaction status
	TransactionStatus string `json:"transactionStatus"`
}

// NewListConfirmedTransactionsByAddressRIBSBSC instantiates a new ListConfirmedTransactionsByAddressRIBSBSC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListConfirmedTransactionsByAddressRIBSBSC(gasLimit string, gasPrice ListConfirmedTransactionsByAddressRIBSBSCGasPrice, gasUsed string, inputData string, nonce int32, transactionStatus string) *ListConfirmedTransactionsByAddressRIBSBSC {
	this := ListConfirmedTransactionsByAddressRIBSBSC{}
	this.GasLimit = gasLimit
	this.GasPrice = gasPrice
	this.GasUsed = gasUsed
	this.InputData = inputData
	this.Nonce = nonce
	this.TransactionStatus = transactionStatus
	return &this
}

// NewListConfirmedTransactionsByAddressRIBSBSCWithDefaults instantiates a new ListConfirmedTransactionsByAddressRIBSBSC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListConfirmedTransactionsByAddressRIBSBSCWithDefaults() *ListConfirmedTransactionsByAddressRIBSBSC {
	this := ListConfirmedTransactionsByAddressRIBSBSC{}
	return &this
}

// GetContract returns the Contract field value if set, zero value otherwise.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetContract() string {
	if o == nil || o.Contract == nil {
		var ret string
		return ret
	}
	return *o.Contract
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetContractOk() (*string, bool) {
	if o == nil || o.Contract == nil {
		return nil, false
	}
	return o.Contract, true
}

// HasContract returns a boolean if a field has been set.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) HasContract() bool {
	if o != nil && o.Contract != nil {
		return true
	}

	return false
}

// SetContract gets a reference to the given string and assigns it to the Contract field.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) SetContract(v string) {
	o.Contract = &v
}

// GetGasLimit returns the GasLimit field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetGasLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value
// and a boolean to check if the value has been set.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetGasLimitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GasLimit, true
}

// SetGasLimit sets field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) SetGasLimit(v string) {
	o.GasLimit = v
}

// GetGasPrice returns the GasPrice field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetGasPrice() ListConfirmedTransactionsByAddressRIBSBSCGasPrice {
	if o == nil {
		var ret ListConfirmedTransactionsByAddressRIBSBSCGasPrice
		return ret
	}

	return o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value
// and a boolean to check if the value has been set.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetGasPriceOk() (*ListConfirmedTransactionsByAddressRIBSBSCGasPrice, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GasPrice, true
}

// SetGasPrice sets field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) SetGasPrice(v ListConfirmedTransactionsByAddressRIBSBSCGasPrice) {
	o.GasPrice = v
}

// GetGasUsed returns the GasUsed field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetGasUsed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value
// and a boolean to check if the value has been set.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetGasUsedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GasUsed, true
}

// SetGasUsed sets field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) SetGasUsed(v string) {
	o.GasUsed = v
}

// GetInputData returns the InputData field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetInputData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InputData
}

// GetInputDataOk returns a tuple with the InputData field value
// and a boolean to check if the value has been set.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetInputDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InputData, true
}

// SetInputData sets field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) SetInputData(v string) {
	o.InputData = v
}

// GetNonce returns the Nonce field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetNonce() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value
// and a boolean to check if the value has been set.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetNonceOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nonce, true
}

// SetNonce sets field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) SetNonce(v int32) {
	o.Nonce = v
}

// GetTransactionStatus returns the TransactionStatus field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetTransactionStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionStatus
}

// GetTransactionStatusOk returns a tuple with the TransactionStatus field value
// and a boolean to check if the value has been set.
func (o *ListConfirmedTransactionsByAddressRIBSBSC) GetTransactionStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransactionStatus, true
}

// SetTransactionStatus sets field value
func (o *ListConfirmedTransactionsByAddressRIBSBSC) SetTransactionStatus(v string) {
	o.TransactionStatus = v
}

func (o ListConfirmedTransactionsByAddressRIBSBSC) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Contract != nil {
		toSerialize["contract"] = o.Contract
	}
	if true {
		toSerialize["gasLimit"] = o.GasLimit
	}
	if true {
		toSerialize["gasPrice"] = o.GasPrice
	}
	if true {
		toSerialize["gasUsed"] = o.GasUsed
	}
	if true {
		toSerialize["inputData"] = o.InputData
	}
	if true {
		toSerialize["nonce"] = o.Nonce
	}
	if true {
		toSerialize["transactionStatus"] = o.TransactionStatus
	}
	return json.Marshal(toSerialize)
}

type NullableListConfirmedTransactionsByAddressRIBSBSC struct {
	value *ListConfirmedTransactionsByAddressRIBSBSC
	isSet bool
}

func (v NullableListConfirmedTransactionsByAddressRIBSBSC) Get() *ListConfirmedTransactionsByAddressRIBSBSC {
	return v.value
}

func (v *NullableListConfirmedTransactionsByAddressRIBSBSC) Set(val *ListConfirmedTransactionsByAddressRIBSBSC) {
	v.value = val
	v.isSet = true
}

func (v NullableListConfirmedTransactionsByAddressRIBSBSC) IsSet() bool {
	return v.isSet
}

func (v *NullableListConfirmedTransactionsByAddressRIBSBSC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListConfirmedTransactionsByAddressRIBSBSC(val *ListConfirmedTransactionsByAddressRIBSBSC) *NullableListConfirmedTransactionsByAddressRIBSBSC {
	return &NullableListConfirmedTransactionsByAddressRIBSBSC{value: val, isSet: true}
}

func (v NullableListConfirmedTransactionsByAddressRIBSBSC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListConfirmedTransactionsByAddressRIBSBSC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


