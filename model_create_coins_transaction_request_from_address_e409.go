/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// CreateCoinsTransactionRequestFromAddressE409 - struct for CreateCoinsTransactionRequestFromAddressE409
type CreateCoinsTransactionRequestFromAddressE409 struct {
	InvalidData *InvalidData
	WalletAsAServiceAddressBalanceNotEnough *WalletAsAServiceAddressBalanceNotEnough
	WalletAsAServiceWalletBalanceNotEnough *WalletAsAServiceWalletBalanceNotEnough
}

// InvalidDataAsCreateCoinsTransactionRequestFromAddressE409 is a convenience function that returns InvalidData wrapped in CreateCoinsTransactionRequestFromAddressE409
func InvalidDataAsCreateCoinsTransactionRequestFromAddressE409(v *InvalidData) CreateCoinsTransactionRequestFromAddressE409 {
	return CreateCoinsTransactionRequestFromAddressE409{
		InvalidData: v,
	}
}

// WalletAsAServiceAddressBalanceNotEnoughAsCreateCoinsTransactionRequestFromAddressE409 is a convenience function that returns WalletAsAServiceAddressBalanceNotEnough wrapped in CreateCoinsTransactionRequestFromAddressE409
func WalletAsAServiceAddressBalanceNotEnoughAsCreateCoinsTransactionRequestFromAddressE409(v *WalletAsAServiceAddressBalanceNotEnough) CreateCoinsTransactionRequestFromAddressE409 {
	return CreateCoinsTransactionRequestFromAddressE409{
		WalletAsAServiceAddressBalanceNotEnough: v,
	}
}

// WalletAsAServiceWalletBalanceNotEnoughAsCreateCoinsTransactionRequestFromAddressE409 is a convenience function that returns WalletAsAServiceWalletBalanceNotEnough wrapped in CreateCoinsTransactionRequestFromAddressE409
func WalletAsAServiceWalletBalanceNotEnoughAsCreateCoinsTransactionRequestFromAddressE409(v *WalletAsAServiceWalletBalanceNotEnough) CreateCoinsTransactionRequestFromAddressE409 {
	return CreateCoinsTransactionRequestFromAddressE409{
		WalletAsAServiceWalletBalanceNotEnough: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateCoinsTransactionRequestFromAddressE409) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InvalidData
	err = newStrictDecoder(data).Decode(&dst.InvalidData)
	if err == nil {
		jsonInvalidData, _ := json.Marshal(dst.InvalidData)
		if string(jsonInvalidData) == "{}" { // empty struct
			dst.InvalidData = nil
		} else {
			match++
		}
	} else {
		dst.InvalidData = nil
	}

	// try to unmarshal data into WalletAsAServiceAddressBalanceNotEnough
	err = newStrictDecoder(data).Decode(&dst.WalletAsAServiceAddressBalanceNotEnough)
	if err == nil {
		jsonWalletAsAServiceAddressBalanceNotEnough, _ := json.Marshal(dst.WalletAsAServiceAddressBalanceNotEnough)
		if string(jsonWalletAsAServiceAddressBalanceNotEnough) == "{}" { // empty struct
			dst.WalletAsAServiceAddressBalanceNotEnough = nil
		} else {
			match++
		}
	} else {
		dst.WalletAsAServiceAddressBalanceNotEnough = nil
	}

	// try to unmarshal data into WalletAsAServiceWalletBalanceNotEnough
	err = newStrictDecoder(data).Decode(&dst.WalletAsAServiceWalletBalanceNotEnough)
	if err == nil {
		jsonWalletAsAServiceWalletBalanceNotEnough, _ := json.Marshal(dst.WalletAsAServiceWalletBalanceNotEnough)
		if string(jsonWalletAsAServiceWalletBalanceNotEnough) == "{}" { // empty struct
			dst.WalletAsAServiceWalletBalanceNotEnough = nil
		} else {
			match++
		}
	} else {
		dst.WalletAsAServiceWalletBalanceNotEnough = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InvalidData = nil
		dst.WalletAsAServiceAddressBalanceNotEnough = nil
		dst.WalletAsAServiceWalletBalanceNotEnough = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CreateCoinsTransactionRequestFromAddressE409)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CreateCoinsTransactionRequestFromAddressE409)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateCoinsTransactionRequestFromAddressE409) MarshalJSON() ([]byte, error) {
	if src.InvalidData != nil {
		return json.Marshal(&src.InvalidData)
	}

	if src.WalletAsAServiceAddressBalanceNotEnough != nil {
		return json.Marshal(&src.WalletAsAServiceAddressBalanceNotEnough)
	}

	if src.WalletAsAServiceWalletBalanceNotEnough != nil {
		return json.Marshal(&src.WalletAsAServiceWalletBalanceNotEnough)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateCoinsTransactionRequestFromAddressE409) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InvalidData != nil {
		return obj.InvalidData
	}

	if obj.WalletAsAServiceAddressBalanceNotEnough != nil {
		return obj.WalletAsAServiceAddressBalanceNotEnough
	}

	if obj.WalletAsAServiceWalletBalanceNotEnough != nil {
		return obj.WalletAsAServiceWalletBalanceNotEnough
	}

	// all schemas are nil
	return nil
}

type NullableCreateCoinsTransactionRequestFromAddressE409 struct {
	value *CreateCoinsTransactionRequestFromAddressE409
	isSet bool
}

func (v NullableCreateCoinsTransactionRequestFromAddressE409) Get() *CreateCoinsTransactionRequestFromAddressE409 {
	return v.value
}

func (v *NullableCreateCoinsTransactionRequestFromAddressE409) Set(val *CreateCoinsTransactionRequestFromAddressE409) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCoinsTransactionRequestFromAddressE409) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCoinsTransactionRequestFromAddressE409) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCoinsTransactionRequestFromAddressE409(val *CreateCoinsTransactionRequestFromAddressE409) *NullableCreateCoinsTransactionRequestFromAddressE409 {
	return &NullableCreateCoinsTransactionRequestFromAddressE409{value: val, isSet: true}
}

func (v NullableCreateCoinsTransactionRequestFromAddressE409) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCoinsTransactionRequestFromAddressE409) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


