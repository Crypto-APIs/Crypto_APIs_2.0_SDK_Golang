/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// DecodeRawTransactionHexRISZ Zcash
type DecodeRawTransactionHexRISZ struct {
	// Represents a block height after which the transaction will expire.
	ExpiryHeight int32 `json:"expiryHeight"`
	// Represents the locktime on the transaction on the specific blockchain, i.e. the blockheight at which the transaction is valid.
	Locktime int32 `json:"locktime"`
	// \"Overwinter\" is the network upgrade for the Zcash blockchain.
	Overwintered bool `json:"overwintered"`
	// Defines if the transaction includes sapling or not.
	Saplinged bool `json:"saplinged"`
	// Represents the same as transactionId for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols hash is different from transactionId for SegWit transactions.
	TransactionHash string `json:"transactionHash"`
	// Defines the transaction value balance.
	ValueBalance string `json:"valueBalance"`
	// Represents the transaction version number.
	Version int32 `json:"version"`
	// Represents the transaction version group ID
	VersionGroupId string `json:"versionGroupId"`
	// Represents the Inputs of the transaction
	Vin []DecodeRawTransactionHexRISZVin `json:"vin"`
	// Represents the Inputs of the transaction
	Vout []DecodeRawTransactionHexRISZVout `json:"vout"`
}

// NewDecodeRawTransactionHexRISZ instantiates a new DecodeRawTransactionHexRISZ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecodeRawTransactionHexRISZ(expiryHeight int32, locktime int32, overwintered bool, saplinged bool, transactionHash string, valueBalance string, version int32, versionGroupId string, vin []DecodeRawTransactionHexRISZVin, vout []DecodeRawTransactionHexRISZVout) *DecodeRawTransactionHexRISZ {
	this := DecodeRawTransactionHexRISZ{}
	this.ExpiryHeight = expiryHeight
	this.Locktime = locktime
	this.Overwintered = overwintered
	this.Saplinged = saplinged
	this.TransactionHash = transactionHash
	this.ValueBalance = valueBalance
	this.Version = version
	this.VersionGroupId = versionGroupId
	this.Vin = vin
	this.Vout = vout
	return &this
}

// NewDecodeRawTransactionHexRISZWithDefaults instantiates a new DecodeRawTransactionHexRISZ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecodeRawTransactionHexRISZWithDefaults() *DecodeRawTransactionHexRISZ {
	this := DecodeRawTransactionHexRISZ{}
	return &this
}

// GetExpiryHeight returns the ExpiryHeight field value
func (o *DecodeRawTransactionHexRISZ) GetExpiryHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExpiryHeight
}

// GetExpiryHeightOk returns a tuple with the ExpiryHeight field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetExpiryHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiryHeight, true
}

// SetExpiryHeight sets field value
func (o *DecodeRawTransactionHexRISZ) SetExpiryHeight(v int32) {
	o.ExpiryHeight = v
}

// GetLocktime returns the Locktime field value
func (o *DecodeRawTransactionHexRISZ) GetLocktime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Locktime
}

// GetLocktimeOk returns a tuple with the Locktime field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetLocktimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locktime, true
}

// SetLocktime sets field value
func (o *DecodeRawTransactionHexRISZ) SetLocktime(v int32) {
	o.Locktime = v
}

// GetOverwintered returns the Overwintered field value
func (o *DecodeRawTransactionHexRISZ) GetOverwintered() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Overwintered
}

// GetOverwinteredOk returns a tuple with the Overwintered field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetOverwinteredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Overwintered, true
}

// SetOverwintered sets field value
func (o *DecodeRawTransactionHexRISZ) SetOverwintered(v bool) {
	o.Overwintered = v
}

// GetSaplinged returns the Saplinged field value
func (o *DecodeRawTransactionHexRISZ) GetSaplinged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Saplinged
}

// GetSaplingedOk returns a tuple with the Saplinged field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetSaplingedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Saplinged, true
}

// SetSaplinged sets field value
func (o *DecodeRawTransactionHexRISZ) SetSaplinged(v bool) {
	o.Saplinged = v
}

// GetTransactionHash returns the TransactionHash field value
func (o *DecodeRawTransactionHexRISZ) GetTransactionHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetTransactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionHash, true
}

// SetTransactionHash sets field value
func (o *DecodeRawTransactionHexRISZ) SetTransactionHash(v string) {
	o.TransactionHash = v
}

// GetValueBalance returns the ValueBalance field value
func (o *DecodeRawTransactionHexRISZ) GetValueBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueBalance
}

// GetValueBalanceOk returns a tuple with the ValueBalance field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetValueBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueBalance, true
}

// SetValueBalance sets field value
func (o *DecodeRawTransactionHexRISZ) SetValueBalance(v string) {
	o.ValueBalance = v
}

// GetVersion returns the Version field value
func (o *DecodeRawTransactionHexRISZ) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DecodeRawTransactionHexRISZ) SetVersion(v int32) {
	o.Version = v
}

// GetVersionGroupId returns the VersionGroupId field value
func (o *DecodeRawTransactionHexRISZ) GetVersionGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionGroupId
}

// GetVersionGroupIdOk returns a tuple with the VersionGroupId field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetVersionGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionGroupId, true
}

// SetVersionGroupId sets field value
func (o *DecodeRawTransactionHexRISZ) SetVersionGroupId(v string) {
	o.VersionGroupId = v
}

// GetVin returns the Vin field value
func (o *DecodeRawTransactionHexRISZ) GetVin() []DecodeRawTransactionHexRISZVin {
	if o == nil {
		var ret []DecodeRawTransactionHexRISZVin
		return ret
	}

	return o.Vin
}

// GetVinOk returns a tuple with the Vin field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetVinOk() ([]DecodeRawTransactionHexRISZVin, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vin, true
}

// SetVin sets field value
func (o *DecodeRawTransactionHexRISZ) SetVin(v []DecodeRawTransactionHexRISZVin) {
	o.Vin = v
}

// GetVout returns the Vout field value
func (o *DecodeRawTransactionHexRISZ) GetVout() []DecodeRawTransactionHexRISZVout {
	if o == nil {
		var ret []DecodeRawTransactionHexRISZVout
		return ret
	}

	return o.Vout
}

// GetVoutOk returns a tuple with the Vout field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISZ) GetVoutOk() ([]DecodeRawTransactionHexRISZVout, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vout, true
}

// SetVout sets field value
func (o *DecodeRawTransactionHexRISZ) SetVout(v []DecodeRawTransactionHexRISZVout) {
	o.Vout = v
}

func (o DecodeRawTransactionHexRISZ) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["expiryHeight"] = o.ExpiryHeight
	}
	if true {
		toSerialize["locktime"] = o.Locktime
	}
	if true {
		toSerialize["overwintered"] = o.Overwintered
	}
	if true {
		toSerialize["saplinged"] = o.Saplinged
	}
	if true {
		toSerialize["transactionHash"] = o.TransactionHash
	}
	if true {
		toSerialize["valueBalance"] = o.ValueBalance
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["versionGroupId"] = o.VersionGroupId
	}
	if true {
		toSerialize["vin"] = o.Vin
	}
	if true {
		toSerialize["vout"] = o.Vout
	}
	return json.Marshal(toSerialize)
}

type NullableDecodeRawTransactionHexRISZ struct {
	value *DecodeRawTransactionHexRISZ
	isSet bool
}

func (v NullableDecodeRawTransactionHexRISZ) Get() *DecodeRawTransactionHexRISZ {
	return v.value
}

func (v *NullableDecodeRawTransactionHexRISZ) Set(val *DecodeRawTransactionHexRISZ) {
	v.value = val
	v.isSet = true
}

func (v NullableDecodeRawTransactionHexRISZ) IsSet() bool {
	return v.isSet
}

func (v *NullableDecodeRawTransactionHexRISZ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecodeRawTransactionHexRISZ(val *DecodeRawTransactionHexRISZ) *NullableDecodeRawTransactionHexRISZ {
	return &NullableDecodeRawTransactionHexRISZ{value: val, isSet: true}
}

func (v NullableDecodeRawTransactionHexRISZ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecodeRawTransactionHexRISZ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


