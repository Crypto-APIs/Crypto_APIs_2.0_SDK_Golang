/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GetLatestMinedBlockRIBS - struct for GetLatestMinedBlockRIBS
type GetLatestMinedBlockRIBS struct {
	GetLatestMinedBlockRIBSB *GetLatestMinedBlockRIBSB
	GetLatestMinedBlockRIBSBC *GetLatestMinedBlockRIBSBC
	GetLatestMinedBlockRIBSD *GetLatestMinedBlockRIBSD
	GetLatestMinedBlockRIBSD2 *GetLatestMinedBlockRIBSD2
	GetLatestMinedBlockRIBSE *GetLatestMinedBlockRIBSE
	GetLatestMinedBlockRIBSEC *GetLatestMinedBlockRIBSEC
	GetLatestMinedBlockRIBSL *GetLatestMinedBlockRIBSL
}

// GetLatestMinedBlockRIBSBAsGetLatestMinedBlockRIBS is a convenience function that returns GetLatestMinedBlockRIBSB wrapped in GetLatestMinedBlockRIBS
func GetLatestMinedBlockRIBSBAsGetLatestMinedBlockRIBS(v *GetLatestMinedBlockRIBSB) GetLatestMinedBlockRIBS {
	return GetLatestMinedBlockRIBS{ GetLatestMinedBlockRIBSB: v}
}

// GetLatestMinedBlockRIBSBCAsGetLatestMinedBlockRIBS is a convenience function that returns GetLatestMinedBlockRIBSBC wrapped in GetLatestMinedBlockRIBS
func GetLatestMinedBlockRIBSBCAsGetLatestMinedBlockRIBS(v *GetLatestMinedBlockRIBSBC) GetLatestMinedBlockRIBS {
	return GetLatestMinedBlockRIBS{ GetLatestMinedBlockRIBSBC: v}
}

// GetLatestMinedBlockRIBSDAsGetLatestMinedBlockRIBS is a convenience function that returns GetLatestMinedBlockRIBSD wrapped in GetLatestMinedBlockRIBS
func GetLatestMinedBlockRIBSDAsGetLatestMinedBlockRIBS(v *GetLatestMinedBlockRIBSD) GetLatestMinedBlockRIBS {
	return GetLatestMinedBlockRIBS{ GetLatestMinedBlockRIBSD: v}
}

// GetLatestMinedBlockRIBSD2AsGetLatestMinedBlockRIBS is a convenience function that returns GetLatestMinedBlockRIBSD2 wrapped in GetLatestMinedBlockRIBS
func GetLatestMinedBlockRIBSD2AsGetLatestMinedBlockRIBS(v *GetLatestMinedBlockRIBSD2) GetLatestMinedBlockRIBS {
	return GetLatestMinedBlockRIBS{ GetLatestMinedBlockRIBSD2: v}
}

// GetLatestMinedBlockRIBSEAsGetLatestMinedBlockRIBS is a convenience function that returns GetLatestMinedBlockRIBSE wrapped in GetLatestMinedBlockRIBS
func GetLatestMinedBlockRIBSEAsGetLatestMinedBlockRIBS(v *GetLatestMinedBlockRIBSE) GetLatestMinedBlockRIBS {
	return GetLatestMinedBlockRIBS{ GetLatestMinedBlockRIBSE: v}
}

// GetLatestMinedBlockRIBSECAsGetLatestMinedBlockRIBS is a convenience function that returns GetLatestMinedBlockRIBSEC wrapped in GetLatestMinedBlockRIBS
func GetLatestMinedBlockRIBSECAsGetLatestMinedBlockRIBS(v *GetLatestMinedBlockRIBSEC) GetLatestMinedBlockRIBS {
	return GetLatestMinedBlockRIBS{ GetLatestMinedBlockRIBSEC: v}
}

// GetLatestMinedBlockRIBSLAsGetLatestMinedBlockRIBS is a convenience function that returns GetLatestMinedBlockRIBSL wrapped in GetLatestMinedBlockRIBS
func GetLatestMinedBlockRIBSLAsGetLatestMinedBlockRIBS(v *GetLatestMinedBlockRIBSL) GetLatestMinedBlockRIBS {
	return GetLatestMinedBlockRIBS{ GetLatestMinedBlockRIBSL: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetLatestMinedBlockRIBS) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetLatestMinedBlockRIBSB
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockRIBSB)
	if err == nil {
		jsonGetLatestMinedBlockRIBSB, _ := json.Marshal(dst.GetLatestMinedBlockRIBSB)
		if string(jsonGetLatestMinedBlockRIBSB) == "{}" { // empty struct
			dst.GetLatestMinedBlockRIBSB = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockRIBSB = nil
	}

	// try to unmarshal data into GetLatestMinedBlockRIBSBC
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockRIBSBC)
	if err == nil {
		jsonGetLatestMinedBlockRIBSBC, _ := json.Marshal(dst.GetLatestMinedBlockRIBSBC)
		if string(jsonGetLatestMinedBlockRIBSBC) == "{}" { // empty struct
			dst.GetLatestMinedBlockRIBSBC = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockRIBSBC = nil
	}

	// try to unmarshal data into GetLatestMinedBlockRIBSD
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockRIBSD)
	if err == nil {
		jsonGetLatestMinedBlockRIBSD, _ := json.Marshal(dst.GetLatestMinedBlockRIBSD)
		if string(jsonGetLatestMinedBlockRIBSD) == "{}" { // empty struct
			dst.GetLatestMinedBlockRIBSD = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockRIBSD = nil
	}

	// try to unmarshal data into GetLatestMinedBlockRIBSD2
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockRIBSD2)
	if err == nil {
		jsonGetLatestMinedBlockRIBSD2, _ := json.Marshal(dst.GetLatestMinedBlockRIBSD2)
		if string(jsonGetLatestMinedBlockRIBSD2) == "{}" { // empty struct
			dst.GetLatestMinedBlockRIBSD2 = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockRIBSD2 = nil
	}

	// try to unmarshal data into GetLatestMinedBlockRIBSE
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockRIBSE)
	if err == nil {
		jsonGetLatestMinedBlockRIBSE, _ := json.Marshal(dst.GetLatestMinedBlockRIBSE)
		if string(jsonGetLatestMinedBlockRIBSE) == "{}" { // empty struct
			dst.GetLatestMinedBlockRIBSE = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockRIBSE = nil
	}

	// try to unmarshal data into GetLatestMinedBlockRIBSEC
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockRIBSEC)
	if err == nil {
		jsonGetLatestMinedBlockRIBSEC, _ := json.Marshal(dst.GetLatestMinedBlockRIBSEC)
		if string(jsonGetLatestMinedBlockRIBSEC) == "{}" { // empty struct
			dst.GetLatestMinedBlockRIBSEC = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockRIBSEC = nil
	}

	// try to unmarshal data into GetLatestMinedBlockRIBSL
	err = json.Unmarshal(data, &dst.GetLatestMinedBlockRIBSL)
	if err == nil {
		jsonGetLatestMinedBlockRIBSL, _ := json.Marshal(dst.GetLatestMinedBlockRIBSL)
		if string(jsonGetLatestMinedBlockRIBSL) == "{}" { // empty struct
			dst.GetLatestMinedBlockRIBSL = nil
		} else {
			match++
		}
	} else {
		dst.GetLatestMinedBlockRIBSL = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetLatestMinedBlockRIBSB = nil
		dst.GetLatestMinedBlockRIBSBC = nil
		dst.GetLatestMinedBlockRIBSD = nil
		dst.GetLatestMinedBlockRIBSD2 = nil
		dst.GetLatestMinedBlockRIBSE = nil
		dst.GetLatestMinedBlockRIBSEC = nil
		dst.GetLatestMinedBlockRIBSL = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetLatestMinedBlockRIBS)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetLatestMinedBlockRIBS)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetLatestMinedBlockRIBS) MarshalJSON() ([]byte, error) {
	if src.GetLatestMinedBlockRIBSB != nil {
		return json.Marshal(&src.GetLatestMinedBlockRIBSB)
	}

	if src.GetLatestMinedBlockRIBSBC != nil {
		return json.Marshal(&src.GetLatestMinedBlockRIBSBC)
	}

	if src.GetLatestMinedBlockRIBSD != nil {
		return json.Marshal(&src.GetLatestMinedBlockRIBSD)
	}

	if src.GetLatestMinedBlockRIBSD2 != nil {
		return json.Marshal(&src.GetLatestMinedBlockRIBSD2)
	}

	if src.GetLatestMinedBlockRIBSE != nil {
		return json.Marshal(&src.GetLatestMinedBlockRIBSE)
	}

	if src.GetLatestMinedBlockRIBSEC != nil {
		return json.Marshal(&src.GetLatestMinedBlockRIBSEC)
	}

	if src.GetLatestMinedBlockRIBSL != nil {
		return json.Marshal(&src.GetLatestMinedBlockRIBSL)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetLatestMinedBlockRIBS) GetActualInstance() (interface{}) {
	if obj.GetLatestMinedBlockRIBSB != nil {
		return obj.GetLatestMinedBlockRIBSB
	}

	if obj.GetLatestMinedBlockRIBSBC != nil {
		return obj.GetLatestMinedBlockRIBSBC
	}

	if obj.GetLatestMinedBlockRIBSD != nil {
		return obj.GetLatestMinedBlockRIBSD
	}

	if obj.GetLatestMinedBlockRIBSD2 != nil {
		return obj.GetLatestMinedBlockRIBSD2
	}

	if obj.GetLatestMinedBlockRIBSE != nil {
		return obj.GetLatestMinedBlockRIBSE
	}

	if obj.GetLatestMinedBlockRIBSEC != nil {
		return obj.GetLatestMinedBlockRIBSEC
	}

	if obj.GetLatestMinedBlockRIBSL != nil {
		return obj.GetLatestMinedBlockRIBSL
	}

	// all schemas are nil
	return nil
}

type NullableGetLatestMinedBlockRIBS struct {
	value *GetLatestMinedBlockRIBS
	isSet bool
}

func (v NullableGetLatestMinedBlockRIBS) Get() *GetLatestMinedBlockRIBS {
	return v.value
}

func (v *NullableGetLatestMinedBlockRIBS) Set(val *GetLatestMinedBlockRIBS) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLatestMinedBlockRIBS) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLatestMinedBlockRIBS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLatestMinedBlockRIBS(val *GetLatestMinedBlockRIBS) *NullableGetLatestMinedBlockRIBS {
	return &NullableGetLatestMinedBlockRIBS{value: val, isSet: true}
}

func (v NullableGetLatestMinedBlockRIBS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLatestMinedBlockRIBS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


