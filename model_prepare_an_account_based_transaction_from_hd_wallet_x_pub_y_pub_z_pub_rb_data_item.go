/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem struct for PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
type PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem struct {
	// Representation of the additional data.
	AdditionalData *string `json:"additionalData,omitempty"`
	// Representation of the amount of the transaction
	Amount string `json:"amount"`
	Fee PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee `json:"fee"`
	// Representation of the nonce value
	Nonce *string `json:"nonce,omitempty"`
	// Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
	Recipient string `json:"recipient"`
	// Represents a  sender address with the respective amount. In account-based protocols like Ethereum there is only one address in this list.
	Sender string `json:"sender"`
	// Representation of the transaction type
	TransactionType *string `json:"transactionType,omitempty"`
	// Defines the account extended publicly known key which is used to derive all child public keys.
	Xpub string `json:"xpub"`
}

// NewPrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem instantiates a new PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem(amount string, fee PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee, recipient string, sender string, xpub string) *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {
	this := PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem{}
	this.Amount = amount
	this.Fee = fee
	this.Recipient = recipient
	this.Sender = sender
	this.Xpub = xpub
	return &this
}

// NewPrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemWithDefaults instantiates a new PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemWithDefaults() *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {
	this := PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem{}
	return &this
}

// GetAdditionalData returns the AdditionalData field value if set, zero value otherwise.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetAdditionalData() string {
	if o == nil || o.AdditionalData == nil {
		var ret string
		return ret
	}
	return *o.AdditionalData
}

// GetAdditionalDataOk returns a tuple with the AdditionalData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetAdditionalDataOk() (*string, bool) {
	if o == nil || o.AdditionalData == nil {
		return nil, false
	}
	return o.AdditionalData, true
}

// HasAdditionalData returns a boolean if a field has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) HasAdditionalData() bool {
	if o != nil && o.AdditionalData != nil {
		return true
	}

	return false
}

// SetAdditionalData gets a reference to the given string and assigns it to the AdditionalData field.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) SetAdditionalData(v string) {
	o.AdditionalData = &v
}

// GetAmount returns the Amount field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) SetAmount(v string) {
	o.Amount = v
}

// GetFee returns the Fee field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetFee() PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee {
	if o == nil {
		var ret PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetFeeOk() (*PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) SetFee(v PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee) {
	o.Fee = v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetNonceOk() (*string, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) SetNonce(v string) {
	o.Nonce = &v
}

// GetRecipient returns the Recipient field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetRecipient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value
// and a boolean to check if the value has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetRecipientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipient, true
}

// SetRecipient sets field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) SetRecipient(v string) {
	o.Recipient = v
}

// GetSender returns the Sender field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetSender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetSenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) SetSender(v string) {
	o.Sender = v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetTransactionType() string {
	if o == nil || o.TransactionType == nil {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetTransactionTypeOk() (*string, bool) {
	if o == nil || o.TransactionType == nil {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) HasTransactionType() bool {
	if o != nil && o.TransactionType != nil {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) SetTransactionType(v string) {
	o.TransactionType = &v
}

// GetXpub returns the Xpub field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetXpub() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Xpub
}

// GetXpubOk returns a tuple with the Xpub field value
// and a boolean to check if the value has been set.
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) GetXpubOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Xpub, true
}

// SetXpub sets field value
func (o *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) SetXpub(v string) {
	o.Xpub = v
}

func (o PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalData != nil {
		toSerialize["additionalData"] = o.AdditionalData
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["fee"] = o.Fee
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	if true {
		toSerialize["recipient"] = o.Recipient
	}
	if true {
		toSerialize["sender"] = o.Sender
	}
	if o.TransactionType != nil {
		toSerialize["transactionType"] = o.TransactionType
	}
	if true {
		toSerialize["xpub"] = o.Xpub
	}
	return json.Marshal(toSerialize)
}

type NullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem struct {
	value *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
	isSet bool
}

func (v NullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) Get() *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {
	return v.value
}

func (v *NullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) Set(val *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem(val *PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) *NullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {
	return &NullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem{value: val, isSet: true}
}

func (v NullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


