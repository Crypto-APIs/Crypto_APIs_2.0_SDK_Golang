/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GetWalletTransactionDetailsByTransactionIDRIBS - struct for GetWalletTransactionDetailsByTransactionIDRIBS
type GetWalletTransactionDetailsByTransactionIDRIBS struct {
	GetWalletTransactionDetailsByTransactionIDRIBSB *GetWalletTransactionDetailsByTransactionIDRIBSB
	GetWalletTransactionDetailsByTransactionIDRIBSBC *GetWalletTransactionDetailsByTransactionIDRIBSBC
	GetWalletTransactionDetailsByTransactionIDRIBSBSC *GetWalletTransactionDetailsByTransactionIDRIBSBSC
	GetWalletTransactionDetailsByTransactionIDRIBSD *GetWalletTransactionDetailsByTransactionIDRIBSD
	GetWalletTransactionDetailsByTransactionIDRIBSD2 *GetWalletTransactionDetailsByTransactionIDRIBSD2
	GetWalletTransactionDetailsByTransactionIDRIBSE *GetWalletTransactionDetailsByTransactionIDRIBSE
	GetWalletTransactionDetailsByTransactionIDRIBSEC *GetWalletTransactionDetailsByTransactionIDRIBSEC
	GetWalletTransactionDetailsByTransactionIDRIBSL *GetWalletTransactionDetailsByTransactionIDRIBSL
	GetWalletTransactionDetailsByTransactionIDRIBSZ *GetWalletTransactionDetailsByTransactionIDRIBSZ
}

// GetWalletTransactionDetailsByTransactionIDRIBSBAsGetWalletTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetWalletTransactionDetailsByTransactionIDRIBSB wrapped in GetWalletTransactionDetailsByTransactionIDRIBS
func GetWalletTransactionDetailsByTransactionIDRIBSBAsGetWalletTransactionDetailsByTransactionIDRIBS(v *GetWalletTransactionDetailsByTransactionIDRIBSB) GetWalletTransactionDetailsByTransactionIDRIBS {
	return GetWalletTransactionDetailsByTransactionIDRIBS{ GetWalletTransactionDetailsByTransactionIDRIBSB: v}
}

// GetWalletTransactionDetailsByTransactionIDRIBSBCAsGetWalletTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetWalletTransactionDetailsByTransactionIDRIBSBC wrapped in GetWalletTransactionDetailsByTransactionIDRIBS
func GetWalletTransactionDetailsByTransactionIDRIBSBCAsGetWalletTransactionDetailsByTransactionIDRIBS(v *GetWalletTransactionDetailsByTransactionIDRIBSBC) GetWalletTransactionDetailsByTransactionIDRIBS {
	return GetWalletTransactionDetailsByTransactionIDRIBS{ GetWalletTransactionDetailsByTransactionIDRIBSBC: v}
}

// GetWalletTransactionDetailsByTransactionIDRIBSBSCAsGetWalletTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetWalletTransactionDetailsByTransactionIDRIBSBSC wrapped in GetWalletTransactionDetailsByTransactionIDRIBS
func GetWalletTransactionDetailsByTransactionIDRIBSBSCAsGetWalletTransactionDetailsByTransactionIDRIBS(v *GetWalletTransactionDetailsByTransactionIDRIBSBSC) GetWalletTransactionDetailsByTransactionIDRIBS {
	return GetWalletTransactionDetailsByTransactionIDRIBS{ GetWalletTransactionDetailsByTransactionIDRIBSBSC: v}
}

// GetWalletTransactionDetailsByTransactionIDRIBSDAsGetWalletTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetWalletTransactionDetailsByTransactionIDRIBSD wrapped in GetWalletTransactionDetailsByTransactionIDRIBS
func GetWalletTransactionDetailsByTransactionIDRIBSDAsGetWalletTransactionDetailsByTransactionIDRIBS(v *GetWalletTransactionDetailsByTransactionIDRIBSD) GetWalletTransactionDetailsByTransactionIDRIBS {
	return GetWalletTransactionDetailsByTransactionIDRIBS{ GetWalletTransactionDetailsByTransactionIDRIBSD: v}
}

// GetWalletTransactionDetailsByTransactionIDRIBSD2AsGetWalletTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetWalletTransactionDetailsByTransactionIDRIBSD2 wrapped in GetWalletTransactionDetailsByTransactionIDRIBS
func GetWalletTransactionDetailsByTransactionIDRIBSD2AsGetWalletTransactionDetailsByTransactionIDRIBS(v *GetWalletTransactionDetailsByTransactionIDRIBSD2) GetWalletTransactionDetailsByTransactionIDRIBS {
	return GetWalletTransactionDetailsByTransactionIDRIBS{ GetWalletTransactionDetailsByTransactionIDRIBSD2: v}
}

// GetWalletTransactionDetailsByTransactionIDRIBSEAsGetWalletTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetWalletTransactionDetailsByTransactionIDRIBSE wrapped in GetWalletTransactionDetailsByTransactionIDRIBS
func GetWalletTransactionDetailsByTransactionIDRIBSEAsGetWalletTransactionDetailsByTransactionIDRIBS(v *GetWalletTransactionDetailsByTransactionIDRIBSE) GetWalletTransactionDetailsByTransactionIDRIBS {
	return GetWalletTransactionDetailsByTransactionIDRIBS{ GetWalletTransactionDetailsByTransactionIDRIBSE: v}
}

// GetWalletTransactionDetailsByTransactionIDRIBSECAsGetWalletTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetWalletTransactionDetailsByTransactionIDRIBSEC wrapped in GetWalletTransactionDetailsByTransactionIDRIBS
func GetWalletTransactionDetailsByTransactionIDRIBSECAsGetWalletTransactionDetailsByTransactionIDRIBS(v *GetWalletTransactionDetailsByTransactionIDRIBSEC) GetWalletTransactionDetailsByTransactionIDRIBS {
	return GetWalletTransactionDetailsByTransactionIDRIBS{ GetWalletTransactionDetailsByTransactionIDRIBSEC: v}
}

// GetWalletTransactionDetailsByTransactionIDRIBSLAsGetWalletTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetWalletTransactionDetailsByTransactionIDRIBSL wrapped in GetWalletTransactionDetailsByTransactionIDRIBS
func GetWalletTransactionDetailsByTransactionIDRIBSLAsGetWalletTransactionDetailsByTransactionIDRIBS(v *GetWalletTransactionDetailsByTransactionIDRIBSL) GetWalletTransactionDetailsByTransactionIDRIBS {
	return GetWalletTransactionDetailsByTransactionIDRIBS{ GetWalletTransactionDetailsByTransactionIDRIBSL: v}
}

// GetWalletTransactionDetailsByTransactionIDRIBSZAsGetWalletTransactionDetailsByTransactionIDRIBS is a convenience function that returns GetWalletTransactionDetailsByTransactionIDRIBSZ wrapped in GetWalletTransactionDetailsByTransactionIDRIBS
func GetWalletTransactionDetailsByTransactionIDRIBSZAsGetWalletTransactionDetailsByTransactionIDRIBS(v *GetWalletTransactionDetailsByTransactionIDRIBSZ) GetWalletTransactionDetailsByTransactionIDRIBS {
	return GetWalletTransactionDetailsByTransactionIDRIBS{ GetWalletTransactionDetailsByTransactionIDRIBSZ: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetWalletTransactionDetailsByTransactionIDRIBS) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetWalletTransactionDetailsByTransactionIDRIBSB
	err = json.Unmarshal(data, &dst.GetWalletTransactionDetailsByTransactionIDRIBSB)
	if err == nil {
		jsonGetWalletTransactionDetailsByTransactionIDRIBSB, _ := json.Marshal(dst.GetWalletTransactionDetailsByTransactionIDRIBSB)
		if string(jsonGetWalletTransactionDetailsByTransactionIDRIBSB) == "{}" { // empty struct
			dst.GetWalletTransactionDetailsByTransactionIDRIBSB = nil
		} else {
			match++
		}
	} else {
		dst.GetWalletTransactionDetailsByTransactionIDRIBSB = nil
	}

	// try to unmarshal data into GetWalletTransactionDetailsByTransactionIDRIBSBC
	err = json.Unmarshal(data, &dst.GetWalletTransactionDetailsByTransactionIDRIBSBC)
	if err == nil {
		jsonGetWalletTransactionDetailsByTransactionIDRIBSBC, _ := json.Marshal(dst.GetWalletTransactionDetailsByTransactionIDRIBSBC)
		if string(jsonGetWalletTransactionDetailsByTransactionIDRIBSBC) == "{}" { // empty struct
			dst.GetWalletTransactionDetailsByTransactionIDRIBSBC = nil
		} else {
			match++
		}
	} else {
		dst.GetWalletTransactionDetailsByTransactionIDRIBSBC = nil
	}

	// try to unmarshal data into GetWalletTransactionDetailsByTransactionIDRIBSBSC
	err = json.Unmarshal(data, &dst.GetWalletTransactionDetailsByTransactionIDRIBSBSC)
	if err == nil {
		jsonGetWalletTransactionDetailsByTransactionIDRIBSBSC, _ := json.Marshal(dst.GetWalletTransactionDetailsByTransactionIDRIBSBSC)
		if string(jsonGetWalletTransactionDetailsByTransactionIDRIBSBSC) == "{}" { // empty struct
			dst.GetWalletTransactionDetailsByTransactionIDRIBSBSC = nil
		} else {
			match++
		}
	} else {
		dst.GetWalletTransactionDetailsByTransactionIDRIBSBSC = nil
	}

	// try to unmarshal data into GetWalletTransactionDetailsByTransactionIDRIBSD
	err = json.Unmarshal(data, &dst.GetWalletTransactionDetailsByTransactionIDRIBSD)
	if err == nil {
		jsonGetWalletTransactionDetailsByTransactionIDRIBSD, _ := json.Marshal(dst.GetWalletTransactionDetailsByTransactionIDRIBSD)
		if string(jsonGetWalletTransactionDetailsByTransactionIDRIBSD) == "{}" { // empty struct
			dst.GetWalletTransactionDetailsByTransactionIDRIBSD = nil
		} else {
			match++
		}
	} else {
		dst.GetWalletTransactionDetailsByTransactionIDRIBSD = nil
	}

	// try to unmarshal data into GetWalletTransactionDetailsByTransactionIDRIBSD2
	err = json.Unmarshal(data, &dst.GetWalletTransactionDetailsByTransactionIDRIBSD2)
	if err == nil {
		jsonGetWalletTransactionDetailsByTransactionIDRIBSD2, _ := json.Marshal(dst.GetWalletTransactionDetailsByTransactionIDRIBSD2)
		if string(jsonGetWalletTransactionDetailsByTransactionIDRIBSD2) == "{}" { // empty struct
			dst.GetWalletTransactionDetailsByTransactionIDRIBSD2 = nil
		} else {
			match++
		}
	} else {
		dst.GetWalletTransactionDetailsByTransactionIDRIBSD2 = nil
	}

	// try to unmarshal data into GetWalletTransactionDetailsByTransactionIDRIBSE
	err = json.Unmarshal(data, &dst.GetWalletTransactionDetailsByTransactionIDRIBSE)
	if err == nil {
		jsonGetWalletTransactionDetailsByTransactionIDRIBSE, _ := json.Marshal(dst.GetWalletTransactionDetailsByTransactionIDRIBSE)
		if string(jsonGetWalletTransactionDetailsByTransactionIDRIBSE) == "{}" { // empty struct
			dst.GetWalletTransactionDetailsByTransactionIDRIBSE = nil
		} else {
			match++
		}
	} else {
		dst.GetWalletTransactionDetailsByTransactionIDRIBSE = nil
	}

	// try to unmarshal data into GetWalletTransactionDetailsByTransactionIDRIBSEC
	err = json.Unmarshal(data, &dst.GetWalletTransactionDetailsByTransactionIDRIBSEC)
	if err == nil {
		jsonGetWalletTransactionDetailsByTransactionIDRIBSEC, _ := json.Marshal(dst.GetWalletTransactionDetailsByTransactionIDRIBSEC)
		if string(jsonGetWalletTransactionDetailsByTransactionIDRIBSEC) == "{}" { // empty struct
			dst.GetWalletTransactionDetailsByTransactionIDRIBSEC = nil
		} else {
			match++
		}
	} else {
		dst.GetWalletTransactionDetailsByTransactionIDRIBSEC = nil
	}

	// try to unmarshal data into GetWalletTransactionDetailsByTransactionIDRIBSL
	err = json.Unmarshal(data, &dst.GetWalletTransactionDetailsByTransactionIDRIBSL)
	if err == nil {
		jsonGetWalletTransactionDetailsByTransactionIDRIBSL, _ := json.Marshal(dst.GetWalletTransactionDetailsByTransactionIDRIBSL)
		if string(jsonGetWalletTransactionDetailsByTransactionIDRIBSL) == "{}" { // empty struct
			dst.GetWalletTransactionDetailsByTransactionIDRIBSL = nil
		} else {
			match++
		}
	} else {
		dst.GetWalletTransactionDetailsByTransactionIDRIBSL = nil
	}

	// try to unmarshal data into GetWalletTransactionDetailsByTransactionIDRIBSZ
	err = json.Unmarshal(data, &dst.GetWalletTransactionDetailsByTransactionIDRIBSZ)
	if err == nil {
		jsonGetWalletTransactionDetailsByTransactionIDRIBSZ, _ := json.Marshal(dst.GetWalletTransactionDetailsByTransactionIDRIBSZ)
		if string(jsonGetWalletTransactionDetailsByTransactionIDRIBSZ) == "{}" { // empty struct
			dst.GetWalletTransactionDetailsByTransactionIDRIBSZ = nil
		} else {
			match++
		}
	} else {
		dst.GetWalletTransactionDetailsByTransactionIDRIBSZ = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetWalletTransactionDetailsByTransactionIDRIBSB = nil
		dst.GetWalletTransactionDetailsByTransactionIDRIBSBC = nil
		dst.GetWalletTransactionDetailsByTransactionIDRIBSBSC = nil
		dst.GetWalletTransactionDetailsByTransactionIDRIBSD = nil
		dst.GetWalletTransactionDetailsByTransactionIDRIBSD2 = nil
		dst.GetWalletTransactionDetailsByTransactionIDRIBSE = nil
		dst.GetWalletTransactionDetailsByTransactionIDRIBSEC = nil
		dst.GetWalletTransactionDetailsByTransactionIDRIBSL = nil
		dst.GetWalletTransactionDetailsByTransactionIDRIBSZ = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetWalletTransactionDetailsByTransactionIDRIBS)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetWalletTransactionDetailsByTransactionIDRIBS)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetWalletTransactionDetailsByTransactionIDRIBS) MarshalJSON() ([]byte, error) {
	if src.GetWalletTransactionDetailsByTransactionIDRIBSB != nil {
		return json.Marshal(&src.GetWalletTransactionDetailsByTransactionIDRIBSB)
	}

	if src.GetWalletTransactionDetailsByTransactionIDRIBSBC != nil {
		return json.Marshal(&src.GetWalletTransactionDetailsByTransactionIDRIBSBC)
	}

	if src.GetWalletTransactionDetailsByTransactionIDRIBSBSC != nil {
		return json.Marshal(&src.GetWalletTransactionDetailsByTransactionIDRIBSBSC)
	}

	if src.GetWalletTransactionDetailsByTransactionIDRIBSD != nil {
		return json.Marshal(&src.GetWalletTransactionDetailsByTransactionIDRIBSD)
	}

	if src.GetWalletTransactionDetailsByTransactionIDRIBSD2 != nil {
		return json.Marshal(&src.GetWalletTransactionDetailsByTransactionIDRIBSD2)
	}

	if src.GetWalletTransactionDetailsByTransactionIDRIBSE != nil {
		return json.Marshal(&src.GetWalletTransactionDetailsByTransactionIDRIBSE)
	}

	if src.GetWalletTransactionDetailsByTransactionIDRIBSEC != nil {
		return json.Marshal(&src.GetWalletTransactionDetailsByTransactionIDRIBSEC)
	}

	if src.GetWalletTransactionDetailsByTransactionIDRIBSL != nil {
		return json.Marshal(&src.GetWalletTransactionDetailsByTransactionIDRIBSL)
	}

	if src.GetWalletTransactionDetailsByTransactionIDRIBSZ != nil {
		return json.Marshal(&src.GetWalletTransactionDetailsByTransactionIDRIBSZ)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetWalletTransactionDetailsByTransactionIDRIBS) GetActualInstance() (interface{}) {
	if obj.GetWalletTransactionDetailsByTransactionIDRIBSB != nil {
		return obj.GetWalletTransactionDetailsByTransactionIDRIBSB
	}

	if obj.GetWalletTransactionDetailsByTransactionIDRIBSBC != nil {
		return obj.GetWalletTransactionDetailsByTransactionIDRIBSBC
	}

	if obj.GetWalletTransactionDetailsByTransactionIDRIBSBSC != nil {
		return obj.GetWalletTransactionDetailsByTransactionIDRIBSBSC
	}

	if obj.GetWalletTransactionDetailsByTransactionIDRIBSD != nil {
		return obj.GetWalletTransactionDetailsByTransactionIDRIBSD
	}

	if obj.GetWalletTransactionDetailsByTransactionIDRIBSD2 != nil {
		return obj.GetWalletTransactionDetailsByTransactionIDRIBSD2
	}

	if obj.GetWalletTransactionDetailsByTransactionIDRIBSE != nil {
		return obj.GetWalletTransactionDetailsByTransactionIDRIBSE
	}

	if obj.GetWalletTransactionDetailsByTransactionIDRIBSEC != nil {
		return obj.GetWalletTransactionDetailsByTransactionIDRIBSEC
	}

	if obj.GetWalletTransactionDetailsByTransactionIDRIBSL != nil {
		return obj.GetWalletTransactionDetailsByTransactionIDRIBSL
	}

	if obj.GetWalletTransactionDetailsByTransactionIDRIBSZ != nil {
		return obj.GetWalletTransactionDetailsByTransactionIDRIBSZ
	}

	// all schemas are nil
	return nil
}

type NullableGetWalletTransactionDetailsByTransactionIDRIBS struct {
	value *GetWalletTransactionDetailsByTransactionIDRIBS
	isSet bool
}

func (v NullableGetWalletTransactionDetailsByTransactionIDRIBS) Get() *GetWalletTransactionDetailsByTransactionIDRIBS {
	return v.value
}

func (v *NullableGetWalletTransactionDetailsByTransactionIDRIBS) Set(val *GetWalletTransactionDetailsByTransactionIDRIBS) {
	v.value = val
	v.isSet = true
}

func (v NullableGetWalletTransactionDetailsByTransactionIDRIBS) IsSet() bool {
	return v.isSet
}

func (v *NullableGetWalletTransactionDetailsByTransactionIDRIBS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetWalletTransactionDetailsByTransactionIDRIBS(val *GetWalletTransactionDetailsByTransactionIDRIBS) *NullableGetWalletTransactionDetailsByTransactionIDRIBS {
	return &NullableGetWalletTransactionDetailsByTransactionIDRIBS{value: val, isSet: true}
}

func (v NullableGetWalletTransactionDetailsByTransactionIDRIBS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetWalletTransactionDetailsByTransactionIDRIBS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


