/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GetBlockDetailsByBlockHashResponseItemBlockchainSpecific - struct for GetBlockDetailsByBlockHashResponseItemBlockchainSpecific
type GetBlockDetailsByBlockHashResponseItemBlockchainSpecific struct {
	GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin
	GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash
	GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash
	GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin
	GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum
	GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic
	GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin
}

// GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin wrapped in GetBlockDetailsByBlockHashResponseItemBlockchainSpecific
func GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific(v *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin) GetBlockDetailsByBlockHashResponseItemBlockchainSpecific {
	return GetBlockDetailsByBlockHashResponseItemBlockchainSpecific{ GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin: v}
}

// GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCashAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash wrapped in GetBlockDetailsByBlockHashResponseItemBlockchainSpecific
func GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCashAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific(v *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash) GetBlockDetailsByBlockHashResponseItemBlockchainSpecific {
	return GetBlockDetailsByBlockHashResponseItemBlockchainSpecific{ GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash: v}
}

// GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDashAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash wrapped in GetBlockDetailsByBlockHashResponseItemBlockchainSpecific
func GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDashAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific(v *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash) GetBlockDetailsByBlockHashResponseItemBlockchainSpecific {
	return GetBlockDetailsByBlockHashResponseItemBlockchainSpecific{ GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash: v}
}

// GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoinAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin wrapped in GetBlockDetailsByBlockHashResponseItemBlockchainSpecific
func GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoinAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific(v *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin) GetBlockDetailsByBlockHashResponseItemBlockchainSpecific {
	return GetBlockDetailsByBlockHashResponseItemBlockchainSpecific{ GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin: v}
}

// GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum wrapped in GetBlockDetailsByBlockHashResponseItemBlockchainSpecific
func GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific(v *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum) GetBlockDetailsByBlockHashResponseItemBlockchainSpecific {
	return GetBlockDetailsByBlockHashResponseItemBlockchainSpecific{ GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum: v}
}

// GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassicAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic wrapped in GetBlockDetailsByBlockHashResponseItemBlockchainSpecific
func GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassicAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific(v *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic) GetBlockDetailsByBlockHashResponseItemBlockchainSpecific {
	return GetBlockDetailsByBlockHashResponseItemBlockchainSpecific{ GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic: v}
}

// GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoinAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin wrapped in GetBlockDetailsByBlockHashResponseItemBlockchainSpecific
func GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoinAsGetBlockDetailsByBlockHashResponseItemBlockchainSpecific(v *GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin) GetBlockDetailsByBlockHashResponseItemBlockchainSpecific {
	return GetBlockDetailsByBlockHashResponseItemBlockchainSpecific{ GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetBlockDetailsByBlockHashResponseItemBlockchainSpecific) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin
	err = json.Unmarshal(data, &dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin)
	if err == nil {
		jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin, _ := json.Marshal(dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin)
		if string(jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin) == "{}" { // empty struct
			dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin = nil
		} else {
			match++
		}
	} else {
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin = nil
	}

	// try to unmarshal data into GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash
	err = json.Unmarshal(data, &dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash)
	if err == nil {
		jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash, _ := json.Marshal(dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash)
		if string(jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash) == "{}" { // empty struct
			dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash = nil
		} else {
			match++
		}
	} else {
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash = nil
	}

	// try to unmarshal data into GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash
	err = json.Unmarshal(data, &dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash)
	if err == nil {
		jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash, _ := json.Marshal(dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash)
		if string(jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash) == "{}" { // empty struct
			dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash = nil
		} else {
			match++
		}
	} else {
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash = nil
	}

	// try to unmarshal data into GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin
	err = json.Unmarshal(data, &dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin)
	if err == nil {
		jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin, _ := json.Marshal(dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin)
		if string(jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin) == "{}" { // empty struct
			dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin = nil
		} else {
			match++
		}
	} else {
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin = nil
	}

	// try to unmarshal data into GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum
	err = json.Unmarshal(data, &dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum)
	if err == nil {
		jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum, _ := json.Marshal(dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum)
		if string(jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum) == "{}" { // empty struct
			dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum = nil
		} else {
			match++
		}
	} else {
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum = nil
	}

	// try to unmarshal data into GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic
	err = json.Unmarshal(data, &dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic)
	if err == nil {
		jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic, _ := json.Marshal(dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic)
		if string(jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic) == "{}" { // empty struct
			dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic = nil
		} else {
			match++
		}
	} else {
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic = nil
	}

	// try to unmarshal data into GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin
	err = json.Unmarshal(data, &dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin)
	if err == nil {
		jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin, _ := json.Marshal(dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin)
		if string(jsonGetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin) == "{}" { // empty struct
			dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin = nil
		} else {
			match++
		}
	} else {
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin = nil
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash = nil
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash = nil
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin = nil
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum = nil
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic = nil
		dst.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetBlockDetailsByBlockHashResponseItemBlockchainSpecific)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetBlockDetailsByBlockHashResponseItemBlockchainSpecific)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetBlockDetailsByBlockHashResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	if src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin != nil {
		return json.Marshal(&src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin)
	}

	if src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash != nil {
		return json.Marshal(&src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash)
	}

	if src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash != nil {
		return json.Marshal(&src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash)
	}

	if src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin != nil {
		return json.Marshal(&src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin)
	}

	if src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum != nil {
		return json.Marshal(&src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum)
	}

	if src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic != nil {
		return json.Marshal(&src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic)
	}

	if src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin != nil {
		return json.Marshal(&src.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetBlockDetailsByBlockHashResponseItemBlockchainSpecific) GetActualInstance() (interface{}) {
	if obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin != nil {
		return obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin
	}

	if obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash != nil {
		return obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash
	}

	if obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash != nil {
		return obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash
	}

	if obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin != nil {
		return obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin
	}

	if obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum != nil {
		return obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum
	}

	if obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic != nil {
		return obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic
	}

	if obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin != nil {
		return obj.GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin
	}

	// all schemas are nil
	return nil
}

type NullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific struct {
	value *GetBlockDetailsByBlockHashResponseItemBlockchainSpecific
	isSet bool
}

func (v NullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific) Get() *GetBlockDetailsByBlockHashResponseItemBlockchainSpecific {
	return v.value
}

func (v *NullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific) Set(val *GetBlockDetailsByBlockHashResponseItemBlockchainSpecific) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific(val *GetBlockDetailsByBlockHashResponseItemBlockchainSpecific) *NullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific {
	return &NullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific{value: val, isSet: true}
}

func (v NullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBlockDetailsByBlockHashResponseItemBlockchainSpecific) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


