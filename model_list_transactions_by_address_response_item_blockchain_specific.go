/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// ListTransactionsByAddressResponseItemBlockchainSpecific - struct for ListTransactionsByAddressResponseItemBlockchainSpecific
type ListTransactionsByAddressResponseItemBlockchainSpecific struct {
	ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin *ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin
	ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash *ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash
	ListTransactionsByAddressResponseItemBlockchainSpecificDash *ListTransactionsByAddressResponseItemBlockchainSpecificDash
	ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin *ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin
	ListTransactionsByAddressResponseItemBlockchainSpecificEthereum *ListTransactionsByAddressResponseItemBlockchainSpecificEthereum
	ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic *ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic
	ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin *ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin
}

// ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinAsListTransactionsByAddressResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin wrapped in ListTransactionsByAddressResponseItemBlockchainSpecific
func ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinAsListTransactionsByAddressResponseItemBlockchainSpecific(v *ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin) ListTransactionsByAddressResponseItemBlockchainSpecific {
	return ListTransactionsByAddressResponseItemBlockchainSpecific{ ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin: v}
}

// ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCashAsListTransactionsByAddressResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash wrapped in ListTransactionsByAddressResponseItemBlockchainSpecific
func ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCashAsListTransactionsByAddressResponseItemBlockchainSpecific(v *ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash) ListTransactionsByAddressResponseItemBlockchainSpecific {
	return ListTransactionsByAddressResponseItemBlockchainSpecific{ ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash: v}
}

// ListTransactionsByAddressResponseItemBlockchainSpecificDashAsListTransactionsByAddressResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByAddressResponseItemBlockchainSpecificDash wrapped in ListTransactionsByAddressResponseItemBlockchainSpecific
func ListTransactionsByAddressResponseItemBlockchainSpecificDashAsListTransactionsByAddressResponseItemBlockchainSpecific(v *ListTransactionsByAddressResponseItemBlockchainSpecificDash) ListTransactionsByAddressResponseItemBlockchainSpecific {
	return ListTransactionsByAddressResponseItemBlockchainSpecific{ ListTransactionsByAddressResponseItemBlockchainSpecificDash: v}
}

// ListTransactionsByAddressResponseItemBlockchainSpecificDogecoinAsListTransactionsByAddressResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin wrapped in ListTransactionsByAddressResponseItemBlockchainSpecific
func ListTransactionsByAddressResponseItemBlockchainSpecificDogecoinAsListTransactionsByAddressResponseItemBlockchainSpecific(v *ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin) ListTransactionsByAddressResponseItemBlockchainSpecific {
	return ListTransactionsByAddressResponseItemBlockchainSpecific{ ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin: v}
}

// ListTransactionsByAddressResponseItemBlockchainSpecificEthereumAsListTransactionsByAddressResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByAddressResponseItemBlockchainSpecificEthereum wrapped in ListTransactionsByAddressResponseItemBlockchainSpecific
func ListTransactionsByAddressResponseItemBlockchainSpecificEthereumAsListTransactionsByAddressResponseItemBlockchainSpecific(v *ListTransactionsByAddressResponseItemBlockchainSpecificEthereum) ListTransactionsByAddressResponseItemBlockchainSpecific {
	return ListTransactionsByAddressResponseItemBlockchainSpecific{ ListTransactionsByAddressResponseItemBlockchainSpecificEthereum: v}
}

// ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassicAsListTransactionsByAddressResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic wrapped in ListTransactionsByAddressResponseItemBlockchainSpecific
func ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassicAsListTransactionsByAddressResponseItemBlockchainSpecific(v *ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic) ListTransactionsByAddressResponseItemBlockchainSpecific {
	return ListTransactionsByAddressResponseItemBlockchainSpecific{ ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic: v}
}

// ListTransactionsByAddressResponseItemBlockchainSpecificLitecoinAsListTransactionsByAddressResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin wrapped in ListTransactionsByAddressResponseItemBlockchainSpecific
func ListTransactionsByAddressResponseItemBlockchainSpecificLitecoinAsListTransactionsByAddressResponseItemBlockchainSpecific(v *ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin) ListTransactionsByAddressResponseItemBlockchainSpecific {
	return ListTransactionsByAddressResponseItemBlockchainSpecific{ ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListTransactionsByAddressResponseItemBlockchainSpecific) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin)
	if err == nil {
		jsonListTransactionsByAddressResponseItemBlockchainSpecificBitcoin, _ := json.Marshal(dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin)
		if string(jsonListTransactionsByAddressResponseItemBlockchainSpecificBitcoin) == "{}" { // empty struct
			dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin = nil
	}

	// try to unmarshal data into ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash)
	if err == nil {
		jsonListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash, _ := json.Marshal(dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash)
		if string(jsonListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash) == "{}" { // empty struct
			dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash = nil
	}

	// try to unmarshal data into ListTransactionsByAddressResponseItemBlockchainSpecificDash
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressResponseItemBlockchainSpecificDash)
	if err == nil {
		jsonListTransactionsByAddressResponseItemBlockchainSpecificDash, _ := json.Marshal(dst.ListTransactionsByAddressResponseItemBlockchainSpecificDash)
		if string(jsonListTransactionsByAddressResponseItemBlockchainSpecificDash) == "{}" { // empty struct
			dst.ListTransactionsByAddressResponseItemBlockchainSpecificDash = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificDash = nil
	}

	// try to unmarshal data into ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin)
	if err == nil {
		jsonListTransactionsByAddressResponseItemBlockchainSpecificDogecoin, _ := json.Marshal(dst.ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin)
		if string(jsonListTransactionsByAddressResponseItemBlockchainSpecificDogecoin) == "{}" { // empty struct
			dst.ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin = nil
	}

	// try to unmarshal data into ListTransactionsByAddressResponseItemBlockchainSpecificEthereum
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereum)
	if err == nil {
		jsonListTransactionsByAddressResponseItemBlockchainSpecificEthereum, _ := json.Marshal(dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereum)
		if string(jsonListTransactionsByAddressResponseItemBlockchainSpecificEthereum) == "{}" { // empty struct
			dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereum = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereum = nil
	}

	// try to unmarshal data into ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic)
	if err == nil {
		jsonListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic, _ := json.Marshal(dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic)
		if string(jsonListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic) == "{}" { // empty struct
			dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic = nil
	}

	// try to unmarshal data into ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin
	err = json.Unmarshal(data, &dst.ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin)
	if err == nil {
		jsonListTransactionsByAddressResponseItemBlockchainSpecificLitecoin, _ := json.Marshal(dst.ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin)
		if string(jsonListTransactionsByAddressResponseItemBlockchainSpecificLitecoin) == "{}" { // empty struct
			dst.ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin = nil
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash = nil
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificDash = nil
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin = nil
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereum = nil
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic = nil
		dst.ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ListTransactionsByAddressResponseItemBlockchainSpecific)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ListTransactionsByAddressResponseItemBlockchainSpecific)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListTransactionsByAddressResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	if src.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin != nil {
		return json.Marshal(&src.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin)
	}

	if src.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash != nil {
		return json.Marshal(&src.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash)
	}

	if src.ListTransactionsByAddressResponseItemBlockchainSpecificDash != nil {
		return json.Marshal(&src.ListTransactionsByAddressResponseItemBlockchainSpecificDash)
	}

	if src.ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin != nil {
		return json.Marshal(&src.ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin)
	}

	if src.ListTransactionsByAddressResponseItemBlockchainSpecificEthereum != nil {
		return json.Marshal(&src.ListTransactionsByAddressResponseItemBlockchainSpecificEthereum)
	}

	if src.ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic != nil {
		return json.Marshal(&src.ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic)
	}

	if src.ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin != nil {
		return json.Marshal(&src.ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListTransactionsByAddressResponseItemBlockchainSpecific) GetActualInstance() (interface{}) {
	if obj.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin != nil {
		return obj.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin
	}

	if obj.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash != nil {
		return obj.ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash
	}

	if obj.ListTransactionsByAddressResponseItemBlockchainSpecificDash != nil {
		return obj.ListTransactionsByAddressResponseItemBlockchainSpecificDash
	}

	if obj.ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin != nil {
		return obj.ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin
	}

	if obj.ListTransactionsByAddressResponseItemBlockchainSpecificEthereum != nil {
		return obj.ListTransactionsByAddressResponseItemBlockchainSpecificEthereum
	}

	if obj.ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic != nil {
		return obj.ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic
	}

	if obj.ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin != nil {
		return obj.ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin
	}

	// all schemas are nil
	return nil
}

type NullableListTransactionsByAddressResponseItemBlockchainSpecific struct {
	value *ListTransactionsByAddressResponseItemBlockchainSpecific
	isSet bool
}

func (v NullableListTransactionsByAddressResponseItemBlockchainSpecific) Get() *ListTransactionsByAddressResponseItemBlockchainSpecific {
	return v.value
}

func (v *NullableListTransactionsByAddressResponseItemBlockchainSpecific) Set(val *ListTransactionsByAddressResponseItemBlockchainSpecific) {
	v.value = val
	v.isSet = true
}

func (v NullableListTransactionsByAddressResponseItemBlockchainSpecific) IsSet() bool {
	return v.isSet
}

func (v *NullableListTransactionsByAddressResponseItemBlockchainSpecific) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTransactionsByAddressResponseItemBlockchainSpecific(val *ListTransactionsByAddressResponseItemBlockchainSpecific) *NullableListTransactionsByAddressResponseItemBlockchainSpecific {
	return &NullableListTransactionsByAddressResponseItemBlockchainSpecific{value: val, isSet: true}
}

func (v NullableListTransactionsByAddressResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTransactionsByAddressResponseItemBlockchainSpecific) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


