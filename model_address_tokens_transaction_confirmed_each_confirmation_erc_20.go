/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// AddressTokensTransactionConfirmedEachConfirmationErc20 ERC-20
type AddressTokensTransactionConfirmedEachConfirmationErc20 struct {
	// Specifies the name of the token.
	Name string `json:"name"`
	// Specifies an identifier of the token, where up to five alphanumeric characters can be used for it.
	Symbol string `json:"symbol"`
	// Defines how many decimals can be used to break the token.
	Decimals *string `json:"decimals,omitempty"`
	// Defines the amount of tokens sent with the confirmed transaction.
	Amount string `json:"amount"`
	// Defines the address of the contract.
	ContractAddress string `json:"contractAddress"`
}

// NewAddressTokensTransactionConfirmedEachConfirmationErc20 instantiates a new AddressTokensTransactionConfirmedEachConfirmationErc20 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressTokensTransactionConfirmedEachConfirmationErc20(name string, symbol string, amount string, contractAddress string) *AddressTokensTransactionConfirmedEachConfirmationErc20 {
	this := AddressTokensTransactionConfirmedEachConfirmationErc20{}
	this.Name = name
	this.Symbol = symbol
	this.Amount = amount
	this.ContractAddress = contractAddress
	return &this
}

// NewAddressTokensTransactionConfirmedEachConfirmationErc20WithDefaults instantiates a new AddressTokensTransactionConfirmedEachConfirmationErc20 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressTokensTransactionConfirmedEachConfirmationErc20WithDefaults() *AddressTokensTransactionConfirmedEachConfirmationErc20 {
	this := AddressTokensTransactionConfirmedEachConfirmationErc20{}
	return &this
}

// GetName returns the Name field value
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) SetSymbol(v string) {
	o.Symbol = v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetDecimals() string {
	if o == nil || o.Decimals == nil {
		var ret string
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetDecimalsOk() (*string, bool) {
	if o == nil || o.Decimals == nil {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) HasDecimals() bool {
	if o != nil && o.Decimals != nil {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given string and assigns it to the Decimals field.
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) SetDecimals(v string) {
	o.Decimals = &v
}

// GetAmount returns the Amount field value
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) SetAmount(v string) {
	o.Amount = v
}

// GetContractAddress returns the ContractAddress field value
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) GetContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *AddressTokensTransactionConfirmedEachConfirmationErc20) SetContractAddress(v string) {
	o.ContractAddress = v
}

func (o AddressTokensTransactionConfirmedEachConfirmationErc20) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Decimals != nil {
		toSerialize["decimals"] = o.Decimals
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["contractAddress"] = o.ContractAddress
	}
	return json.Marshal(toSerialize)
}

type NullableAddressTokensTransactionConfirmedEachConfirmationErc20 struct {
	value *AddressTokensTransactionConfirmedEachConfirmationErc20
	isSet bool
}

func (v NullableAddressTokensTransactionConfirmedEachConfirmationErc20) Get() *AddressTokensTransactionConfirmedEachConfirmationErc20 {
	return v.value
}

func (v *NullableAddressTokensTransactionConfirmedEachConfirmationErc20) Set(val *AddressTokensTransactionConfirmedEachConfirmationErc20) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressTokensTransactionConfirmedEachConfirmationErc20) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressTokensTransactionConfirmedEachConfirmationErc20) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressTokensTransactionConfirmedEachConfirmationErc20(val *AddressTokensTransactionConfirmedEachConfirmationErc20) *NullableAddressTokensTransactionConfirmedEachConfirmationErc20 {
	return &NullableAddressTokensTransactionConfirmedEachConfirmationErc20{value: val, isSet: true}
}

func (v NullableAddressTokensTransactionConfirmedEachConfirmationErc20) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressTokensTransactionConfirmedEachConfirmationErc20) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


