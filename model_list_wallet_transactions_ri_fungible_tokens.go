/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ListWalletTransactionsRIFungibleTokens struct for ListWalletTransactionsRIFungibleTokens
type ListWalletTransactionsRIFungibleTokens struct {
	// Defines the amount of the fungible tokens.
	Amount string `json:"amount"`
	// Defines the tokens' converted amount value.
	ConvertedAmount string `json:"convertedAmount"`
	// Represents token's exchange rate unit.
	ExchangeRateUnit string `json:"exchangeRateUnit"`
	// Defines the token's name as a string.
	Name string `json:"name"`
	// The address which receives this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one
	Recipient string `json:"recipient"`
	// Represents the address which sends this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one sender.
	Sender string `json:"sender"`
	// Defines the symbol of the fungible tokens.
	Symbol string `json:"symbol"`
	// Defines the decimals of the token, i.e. the number of digits that come after the decimal coma of the token.
	TokenDecimals int32 `json:"tokenDecimals"`
	// Defines the specific token type.
	Type string `json:"type"`
}

// NewListWalletTransactionsRIFungibleTokens instantiates a new ListWalletTransactionsRIFungibleTokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListWalletTransactionsRIFungibleTokens(amount string, convertedAmount string, exchangeRateUnit string, name string, recipient string, sender string, symbol string, tokenDecimals int32, type_ string) *ListWalletTransactionsRIFungibleTokens {
	this := ListWalletTransactionsRIFungibleTokens{}
	this.Amount = amount
	this.ConvertedAmount = convertedAmount
	this.ExchangeRateUnit = exchangeRateUnit
	this.Name = name
	this.Recipient = recipient
	this.Sender = sender
	this.Symbol = symbol
	this.TokenDecimals = tokenDecimals
	this.Type = type_
	return &this
}

// NewListWalletTransactionsRIFungibleTokensWithDefaults instantiates a new ListWalletTransactionsRIFungibleTokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListWalletTransactionsRIFungibleTokensWithDefaults() *ListWalletTransactionsRIFungibleTokens {
	this := ListWalletTransactionsRIFungibleTokens{}
	return &this
}

// GetAmount returns the Amount field value
func (o *ListWalletTransactionsRIFungibleTokens) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ListWalletTransactionsRIFungibleTokens) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ListWalletTransactionsRIFungibleTokens) SetAmount(v string) {
	o.Amount = v
}

// GetConvertedAmount returns the ConvertedAmount field value
func (o *ListWalletTransactionsRIFungibleTokens) GetConvertedAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConvertedAmount
}

// GetConvertedAmountOk returns a tuple with the ConvertedAmount field value
// and a boolean to check if the value has been set.
func (o *ListWalletTransactionsRIFungibleTokens) GetConvertedAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConvertedAmount, true
}

// SetConvertedAmount sets field value
func (o *ListWalletTransactionsRIFungibleTokens) SetConvertedAmount(v string) {
	o.ConvertedAmount = v
}

// GetExchangeRateUnit returns the ExchangeRateUnit field value
func (o *ListWalletTransactionsRIFungibleTokens) GetExchangeRateUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExchangeRateUnit
}

// GetExchangeRateUnitOk returns a tuple with the ExchangeRateUnit field value
// and a boolean to check if the value has been set.
func (o *ListWalletTransactionsRIFungibleTokens) GetExchangeRateUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeRateUnit, true
}

// SetExchangeRateUnit sets field value
func (o *ListWalletTransactionsRIFungibleTokens) SetExchangeRateUnit(v string) {
	o.ExchangeRateUnit = v
}

// GetName returns the Name field value
func (o *ListWalletTransactionsRIFungibleTokens) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListWalletTransactionsRIFungibleTokens) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListWalletTransactionsRIFungibleTokens) SetName(v string) {
	o.Name = v
}

// GetRecipient returns the Recipient field value
func (o *ListWalletTransactionsRIFungibleTokens) GetRecipient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value
// and a boolean to check if the value has been set.
func (o *ListWalletTransactionsRIFungibleTokens) GetRecipientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipient, true
}

// SetRecipient sets field value
func (o *ListWalletTransactionsRIFungibleTokens) SetRecipient(v string) {
	o.Recipient = v
}

// GetSender returns the Sender field value
func (o *ListWalletTransactionsRIFungibleTokens) GetSender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *ListWalletTransactionsRIFungibleTokens) GetSenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *ListWalletTransactionsRIFungibleTokens) SetSender(v string) {
	o.Sender = v
}

// GetSymbol returns the Symbol field value
func (o *ListWalletTransactionsRIFungibleTokens) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *ListWalletTransactionsRIFungibleTokens) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *ListWalletTransactionsRIFungibleTokens) SetSymbol(v string) {
	o.Symbol = v
}

// GetTokenDecimals returns the TokenDecimals field value
func (o *ListWalletTransactionsRIFungibleTokens) GetTokenDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenDecimals
}

// GetTokenDecimalsOk returns a tuple with the TokenDecimals field value
// and a boolean to check if the value has been set.
func (o *ListWalletTransactionsRIFungibleTokens) GetTokenDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenDecimals, true
}

// SetTokenDecimals sets field value
func (o *ListWalletTransactionsRIFungibleTokens) SetTokenDecimals(v int32) {
	o.TokenDecimals = v
}

// GetType returns the Type field value
func (o *ListWalletTransactionsRIFungibleTokens) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ListWalletTransactionsRIFungibleTokens) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ListWalletTransactionsRIFungibleTokens) SetType(v string) {
	o.Type = v
}

func (o ListWalletTransactionsRIFungibleTokens) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["convertedAmount"] = o.ConvertedAmount
	}
	if true {
		toSerialize["exchangeRateUnit"] = o.ExchangeRateUnit
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["recipient"] = o.Recipient
	}
	if true {
		toSerialize["sender"] = o.Sender
	}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["tokenDecimals"] = o.TokenDecimals
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableListWalletTransactionsRIFungibleTokens struct {
	value *ListWalletTransactionsRIFungibleTokens
	isSet bool
}

func (v NullableListWalletTransactionsRIFungibleTokens) Get() *ListWalletTransactionsRIFungibleTokens {
	return v.value
}

func (v *NullableListWalletTransactionsRIFungibleTokens) Set(val *ListWalletTransactionsRIFungibleTokens) {
	v.value = val
	v.isSet = true
}

func (v NullableListWalletTransactionsRIFungibleTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableListWalletTransactionsRIFungibleTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListWalletTransactionsRIFungibleTokens(val *ListWalletTransactionsRIFungibleTokens) *NullableListWalletTransactionsRIFungibleTokens {
	return &NullableListWalletTransactionsRIFungibleTokens{value: val, isSet: true}
}

func (v NullableListWalletTransactionsRIFungibleTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListWalletTransactionsRIFungibleTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


