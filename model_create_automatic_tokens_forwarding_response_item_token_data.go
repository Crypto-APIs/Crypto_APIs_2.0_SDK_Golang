/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// CreateAutomaticTokensForwardingResponseItemTokenData - struct for CreateAutomaticTokensForwardingResponseItemTokenData
type CreateAutomaticTokensForwardingResponseItemTokenData struct {
	CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken *CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken
	CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken *CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken
}

// CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniTokenAsCreateAutomaticTokensForwardingResponseItemTokenData is a convenience function that returns CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken wrapped in CreateAutomaticTokensForwardingResponseItemTokenData
func CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniTokenAsCreateAutomaticTokensForwardingResponseItemTokenData(v *CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken) CreateAutomaticTokensForwardingResponseItemTokenData {
	return CreateAutomaticTokensForwardingResponseItemTokenData{ CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken: v}
}

// CreateAutomaticTokensForwardingResponseItemTokenDataEthereumTokenAsCreateAutomaticTokensForwardingResponseItemTokenData is a convenience function that returns CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken wrapped in CreateAutomaticTokensForwardingResponseItemTokenData
func CreateAutomaticTokensForwardingResponseItemTokenDataEthereumTokenAsCreateAutomaticTokensForwardingResponseItemTokenData(v *CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken) CreateAutomaticTokensForwardingResponseItemTokenData {
	return CreateAutomaticTokensForwardingResponseItemTokenData{ CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateAutomaticTokensForwardingResponseItemTokenData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken
	err = json.Unmarshal(data, &dst.CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken)
	if err == nil {
		jsonCreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken, _ := json.Marshal(dst.CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken)
		if string(jsonCreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken) == "{}" { // empty struct
			dst.CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken = nil
		} else {
			match++
		}
	} else {
		dst.CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken = nil
	}

	// try to unmarshal data into CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken
	err = json.Unmarshal(data, &dst.CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken)
	if err == nil {
		jsonCreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken, _ := json.Marshal(dst.CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken)
		if string(jsonCreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken) == "{}" { // empty struct
			dst.CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken = nil
		} else {
			match++
		}
	} else {
		dst.CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken = nil
		dst.CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CreateAutomaticTokensForwardingResponseItemTokenData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CreateAutomaticTokensForwardingResponseItemTokenData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateAutomaticTokensForwardingResponseItemTokenData) MarshalJSON() ([]byte, error) {
	if src.CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken != nil {
		return json.Marshal(&src.CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken)
	}

	if src.CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken != nil {
		return json.Marshal(&src.CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateAutomaticTokensForwardingResponseItemTokenData) GetActualInstance() (interface{}) {
	if obj.CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken != nil {
		return obj.CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken
	}

	if obj.CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken != nil {
		return obj.CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken
	}

	// all schemas are nil
	return nil
}

type NullableCreateAutomaticTokensForwardingResponseItemTokenData struct {
	value *CreateAutomaticTokensForwardingResponseItemTokenData
	isSet bool
}

func (v NullableCreateAutomaticTokensForwardingResponseItemTokenData) Get() *CreateAutomaticTokensForwardingResponseItemTokenData {
	return v.value
}

func (v *NullableCreateAutomaticTokensForwardingResponseItemTokenData) Set(val *CreateAutomaticTokensForwardingResponseItemTokenData) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAutomaticTokensForwardingResponseItemTokenData) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAutomaticTokensForwardingResponseItemTokenData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAutomaticTokensForwardingResponseItemTokenData(val *CreateAutomaticTokensForwardingResponseItemTokenData) *NullableCreateAutomaticTokensForwardingResponseItemTokenData {
	return &NullableCreateAutomaticTokensForwardingResponseItemTokenData{value: val, isSet: true}
}

func (v NullableCreateAutomaticTokensForwardingResponseItemTokenData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAutomaticTokensForwardingResponseItemTokenData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


