/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// CoinsForwardingSuccessDataItem Defines an `item` as one result.
type CoinsForwardingSuccessDataItem struct {
	// Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
	Blockchain string `json:"blockchain"`
	// Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\", \"rinkeby\" are test networks.
	Network string `json:"network"`
	// Represents the hash of the address that provides the coins.
	FromAddress string `json:"fromAddress"`
	// Represents the hash of the address to forward the coins to.
	ToAddress string `json:"toAddress"`
	// Represents the amount of coins that have been forwarded.
	ForwardedAmount string `json:"forwardedAmount"`
	// Represents the unit of coins that have been forwarded, e.g. BTC.
	ForwardedUnit string `json:"forwardedUnit"`
	// Represents the amount of the fee spent for the coins to be forwarded.
	SpentFeesAmount string `json:"spentFeesAmount"`
	// Represents the unit of the fee spent for the coins to be forwarded, e.g. BTC.
	SpentFeesUnit string `json:"spentFeesUnit"`
	// Defines the unique Transaction ID that triggered the coin forwarding.
	TriggerTransactionId string `json:"triggerTransactionId"`
	// Defines the unique Transaction ID that forwarded the coins.
	ForwardingTransactionId string `json:"forwardingTransactionId"`
}

// NewCoinsForwardingSuccessDataItem instantiates a new CoinsForwardingSuccessDataItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoinsForwardingSuccessDataItem(blockchain string, network string, fromAddress string, toAddress string, forwardedAmount string, forwardedUnit string, spentFeesAmount string, spentFeesUnit string, triggerTransactionId string, forwardingTransactionId string) *CoinsForwardingSuccessDataItem {
	this := CoinsForwardingSuccessDataItem{}
	this.Blockchain = blockchain
	this.Network = network
	this.FromAddress = fromAddress
	this.ToAddress = toAddress
	this.ForwardedAmount = forwardedAmount
	this.ForwardedUnit = forwardedUnit
	this.SpentFeesAmount = spentFeesAmount
	this.SpentFeesUnit = spentFeesUnit
	this.TriggerTransactionId = triggerTransactionId
	this.ForwardingTransactionId = forwardingTransactionId
	return &this
}

// NewCoinsForwardingSuccessDataItemWithDefaults instantiates a new CoinsForwardingSuccessDataItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoinsForwardingSuccessDataItemWithDefaults() *CoinsForwardingSuccessDataItem {
	this := CoinsForwardingSuccessDataItem{}
	return &this
}

// GetBlockchain returns the Blockchain field value
func (o *CoinsForwardingSuccessDataItem) GetBlockchain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Blockchain
}

// GetBlockchainOk returns a tuple with the Blockchain field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetBlockchainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Blockchain, true
}

// SetBlockchain sets field value
func (o *CoinsForwardingSuccessDataItem) SetBlockchain(v string) {
	o.Blockchain = v
}

// GetNetwork returns the Network field value
func (o *CoinsForwardingSuccessDataItem) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetNetworkOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *CoinsForwardingSuccessDataItem) SetNetwork(v string) {
	o.Network = v
}

// GetFromAddress returns the FromAddress field value
func (o *CoinsForwardingSuccessDataItem) GetFromAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetFromAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FromAddress, true
}

// SetFromAddress sets field value
func (o *CoinsForwardingSuccessDataItem) SetFromAddress(v string) {
	o.FromAddress = v
}

// GetToAddress returns the ToAddress field value
func (o *CoinsForwardingSuccessDataItem) GetToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetToAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *CoinsForwardingSuccessDataItem) SetToAddress(v string) {
	o.ToAddress = v
}

// GetForwardedAmount returns the ForwardedAmount field value
func (o *CoinsForwardingSuccessDataItem) GetForwardedAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForwardedAmount
}

// GetForwardedAmountOk returns a tuple with the ForwardedAmount field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetForwardedAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ForwardedAmount, true
}

// SetForwardedAmount sets field value
func (o *CoinsForwardingSuccessDataItem) SetForwardedAmount(v string) {
	o.ForwardedAmount = v
}

// GetForwardedUnit returns the ForwardedUnit field value
func (o *CoinsForwardingSuccessDataItem) GetForwardedUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForwardedUnit
}

// GetForwardedUnitOk returns a tuple with the ForwardedUnit field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetForwardedUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ForwardedUnit, true
}

// SetForwardedUnit sets field value
func (o *CoinsForwardingSuccessDataItem) SetForwardedUnit(v string) {
	o.ForwardedUnit = v
}

// GetSpentFeesAmount returns the SpentFeesAmount field value
func (o *CoinsForwardingSuccessDataItem) GetSpentFeesAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpentFeesAmount
}

// GetSpentFeesAmountOk returns a tuple with the SpentFeesAmount field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetSpentFeesAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SpentFeesAmount, true
}

// SetSpentFeesAmount sets field value
func (o *CoinsForwardingSuccessDataItem) SetSpentFeesAmount(v string) {
	o.SpentFeesAmount = v
}

// GetSpentFeesUnit returns the SpentFeesUnit field value
func (o *CoinsForwardingSuccessDataItem) GetSpentFeesUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpentFeesUnit
}

// GetSpentFeesUnitOk returns a tuple with the SpentFeesUnit field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetSpentFeesUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SpentFeesUnit, true
}

// SetSpentFeesUnit sets field value
func (o *CoinsForwardingSuccessDataItem) SetSpentFeesUnit(v string) {
	o.SpentFeesUnit = v
}

// GetTriggerTransactionId returns the TriggerTransactionId field value
func (o *CoinsForwardingSuccessDataItem) GetTriggerTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerTransactionId
}

// GetTriggerTransactionIdOk returns a tuple with the TriggerTransactionId field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetTriggerTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TriggerTransactionId, true
}

// SetTriggerTransactionId sets field value
func (o *CoinsForwardingSuccessDataItem) SetTriggerTransactionId(v string) {
	o.TriggerTransactionId = v
}

// GetForwardingTransactionId returns the ForwardingTransactionId field value
func (o *CoinsForwardingSuccessDataItem) GetForwardingTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForwardingTransactionId
}

// GetForwardingTransactionIdOk returns a tuple with the ForwardingTransactionId field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingSuccessDataItem) GetForwardingTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ForwardingTransactionId, true
}

// SetForwardingTransactionId sets field value
func (o *CoinsForwardingSuccessDataItem) SetForwardingTransactionId(v string) {
	o.ForwardingTransactionId = v
}

func (o CoinsForwardingSuccessDataItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blockchain"] = o.Blockchain
	}
	if true {
		toSerialize["network"] = o.Network
	}
	if true {
		toSerialize["fromAddress"] = o.FromAddress
	}
	if true {
		toSerialize["toAddress"] = o.ToAddress
	}
	if true {
		toSerialize["forwardedAmount"] = o.ForwardedAmount
	}
	if true {
		toSerialize["forwardedUnit"] = o.ForwardedUnit
	}
	if true {
		toSerialize["spentFeesAmount"] = o.SpentFeesAmount
	}
	if true {
		toSerialize["spentFeesUnit"] = o.SpentFeesUnit
	}
	if true {
		toSerialize["triggerTransactionId"] = o.TriggerTransactionId
	}
	if true {
		toSerialize["forwardingTransactionId"] = o.ForwardingTransactionId
	}
	return json.Marshal(toSerialize)
}

type NullableCoinsForwardingSuccessDataItem struct {
	value *CoinsForwardingSuccessDataItem
	isSet bool
}

func (v NullableCoinsForwardingSuccessDataItem) Get() *CoinsForwardingSuccessDataItem {
	return v.value
}

func (v *NullableCoinsForwardingSuccessDataItem) Set(val *CoinsForwardingSuccessDataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCoinsForwardingSuccessDataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCoinsForwardingSuccessDataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoinsForwardingSuccessDataItem(val *CoinsForwardingSuccessDataItem) *NullableCoinsForwardingSuccessDataItem {
	return &NullableCoinsForwardingSuccessDataItem{value: val, isSet: true}
}

func (v NullableCoinsForwardingSuccessDataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoinsForwardingSuccessDataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


