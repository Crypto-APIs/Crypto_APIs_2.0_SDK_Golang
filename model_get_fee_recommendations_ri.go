/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// GetFeeRecommendationsRI struct for GetFeeRecommendationsRI
type GetFeeRecommendationsRI struct {
	// Defines the unit of the fee, e.g. BTC.
	Unit string `json:"unit"`
	// Fast fee per byte calculated from unconfirmed transactions
	Fast string `json:"fast"`
	// Slow fee per byte calculated from unconfirmed transactions
	Slow string `json:"slow"`
	// Standard fee per byte calculated from unconfirmed transactions
	Standard string `json:"standard"`
	// Represents the fee cushion multiplier used to multiply the base fee.
	FeeMultiplier *string `json:"feeMultiplier,omitempty"`
}

// NewGetFeeRecommendationsRI instantiates a new GetFeeRecommendationsRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetFeeRecommendationsRI(unit string, fast string, slow string, standard string) *GetFeeRecommendationsRI {
	this := GetFeeRecommendationsRI{}
	this.Unit = unit
	this.Fast = fast
	this.Slow = slow
	this.Standard = standard
	return &this
}

// NewGetFeeRecommendationsRIWithDefaults instantiates a new GetFeeRecommendationsRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetFeeRecommendationsRIWithDefaults() *GetFeeRecommendationsRI {
	this := GetFeeRecommendationsRI{}
	return &this
}

// GetUnit returns the Unit field value
func (o *GetFeeRecommendationsRI) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *GetFeeRecommendationsRI) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *GetFeeRecommendationsRI) SetUnit(v string) {
	o.Unit = v
}

// GetFast returns the Fast field value
func (o *GetFeeRecommendationsRI) GetFast() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fast
}

// GetFastOk returns a tuple with the Fast field value
// and a boolean to check if the value has been set.
func (o *GetFeeRecommendationsRI) GetFastOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fast, true
}

// SetFast sets field value
func (o *GetFeeRecommendationsRI) SetFast(v string) {
	o.Fast = v
}

// GetSlow returns the Slow field value
func (o *GetFeeRecommendationsRI) GetSlow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slow
}

// GetSlowOk returns a tuple with the Slow field value
// and a boolean to check if the value has been set.
func (o *GetFeeRecommendationsRI) GetSlowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slow, true
}

// SetSlow sets field value
func (o *GetFeeRecommendationsRI) SetSlow(v string) {
	o.Slow = v
}

// GetStandard returns the Standard field value
func (o *GetFeeRecommendationsRI) GetStandard() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Standard
}

// GetStandardOk returns a tuple with the Standard field value
// and a boolean to check if the value has been set.
func (o *GetFeeRecommendationsRI) GetStandardOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Standard, true
}

// SetStandard sets field value
func (o *GetFeeRecommendationsRI) SetStandard(v string) {
	o.Standard = v
}

// GetFeeMultiplier returns the FeeMultiplier field value if set, zero value otherwise.
func (o *GetFeeRecommendationsRI) GetFeeMultiplier() string {
	if o == nil || o.FeeMultiplier == nil {
		var ret string
		return ret
	}
	return *o.FeeMultiplier
}

// GetFeeMultiplierOk returns a tuple with the FeeMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFeeRecommendationsRI) GetFeeMultiplierOk() (*string, bool) {
	if o == nil || o.FeeMultiplier == nil {
		return nil, false
	}
	return o.FeeMultiplier, true
}

// HasFeeMultiplier returns a boolean if a field has been set.
func (o *GetFeeRecommendationsRI) HasFeeMultiplier() bool {
	if o != nil && o.FeeMultiplier != nil {
		return true
	}

	return false
}

// SetFeeMultiplier gets a reference to the given string and assigns it to the FeeMultiplier field.
func (o *GetFeeRecommendationsRI) SetFeeMultiplier(v string) {
	o.FeeMultiplier = &v
}

func (o GetFeeRecommendationsRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["unit"] = o.Unit
	}
	if true {
		toSerialize["fast"] = o.Fast
	}
	if true {
		toSerialize["slow"] = o.Slow
	}
	if true {
		toSerialize["standard"] = o.Standard
	}
	if o.FeeMultiplier != nil {
		toSerialize["feeMultiplier"] = o.FeeMultiplier
	}
	return json.Marshal(toSerialize)
}

type NullableGetFeeRecommendationsRI struct {
	value *GetFeeRecommendationsRI
	isSet bool
}

func (v NullableGetFeeRecommendationsRI) Get() *GetFeeRecommendationsRI {
	return v.value
}

func (v *NullableGetFeeRecommendationsRI) Set(val *GetFeeRecommendationsRI) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFeeRecommendationsRI) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFeeRecommendationsRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFeeRecommendationsRI(val *GetFeeRecommendationsRI) *NullableGetFeeRecommendationsRI {
	return &NullableGetFeeRecommendationsRI{value: val, isSet: true}
}

func (v NullableGetFeeRecommendationsRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFeeRecommendationsRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


