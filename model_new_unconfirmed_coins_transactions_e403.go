/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// NewUnconfirmedCoinsTransactionsE403 - struct for NewUnconfirmedCoinsTransactionsE403
type NewUnconfirmedCoinsTransactionsE403 struct {
	BannedIpAddress *BannedIpAddress
	BlockchainEventsCallbacksLimitReached *BlockchainEventsCallbacksLimitReached
	EndpointNotAllowedForApiKey *EndpointNotAllowedForApiKey
	EndpointNotAllowedForPlan *EndpointNotAllowedForPlan
	FeatureMainnetsNotAllowedForPlan *FeatureMainnetsNotAllowedForPlan
}

// BannedIpAddressAsNewUnconfirmedCoinsTransactionsE403 is a convenience function that returns BannedIpAddress wrapped in NewUnconfirmedCoinsTransactionsE403
func BannedIpAddressAsNewUnconfirmedCoinsTransactionsE403(v *BannedIpAddress) NewUnconfirmedCoinsTransactionsE403 {
	return NewUnconfirmedCoinsTransactionsE403{ BannedIpAddress: v}
}

// BlockchainEventsCallbacksLimitReachedAsNewUnconfirmedCoinsTransactionsE403 is a convenience function that returns BlockchainEventsCallbacksLimitReached wrapped in NewUnconfirmedCoinsTransactionsE403
func BlockchainEventsCallbacksLimitReachedAsNewUnconfirmedCoinsTransactionsE403(v *BlockchainEventsCallbacksLimitReached) NewUnconfirmedCoinsTransactionsE403 {
	return NewUnconfirmedCoinsTransactionsE403{ BlockchainEventsCallbacksLimitReached: v}
}

// EndpointNotAllowedForApiKeyAsNewUnconfirmedCoinsTransactionsE403 is a convenience function that returns EndpointNotAllowedForApiKey wrapped in NewUnconfirmedCoinsTransactionsE403
func EndpointNotAllowedForApiKeyAsNewUnconfirmedCoinsTransactionsE403(v *EndpointNotAllowedForApiKey) NewUnconfirmedCoinsTransactionsE403 {
	return NewUnconfirmedCoinsTransactionsE403{ EndpointNotAllowedForApiKey: v}
}

// EndpointNotAllowedForPlanAsNewUnconfirmedCoinsTransactionsE403 is a convenience function that returns EndpointNotAllowedForPlan wrapped in NewUnconfirmedCoinsTransactionsE403
func EndpointNotAllowedForPlanAsNewUnconfirmedCoinsTransactionsE403(v *EndpointNotAllowedForPlan) NewUnconfirmedCoinsTransactionsE403 {
	return NewUnconfirmedCoinsTransactionsE403{ EndpointNotAllowedForPlan: v}
}

// FeatureMainnetsNotAllowedForPlanAsNewUnconfirmedCoinsTransactionsE403 is a convenience function that returns FeatureMainnetsNotAllowedForPlan wrapped in NewUnconfirmedCoinsTransactionsE403
func FeatureMainnetsNotAllowedForPlanAsNewUnconfirmedCoinsTransactionsE403(v *FeatureMainnetsNotAllowedForPlan) NewUnconfirmedCoinsTransactionsE403 {
	return NewUnconfirmedCoinsTransactionsE403{ FeatureMainnetsNotAllowedForPlan: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NewUnconfirmedCoinsTransactionsE403) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BannedIpAddress
	err = json.Unmarshal(data, &dst.BannedIpAddress)
	if err == nil {
		jsonBannedIpAddress, _ := json.Marshal(dst.BannedIpAddress)
		if string(jsonBannedIpAddress) == "{}" { // empty struct
			dst.BannedIpAddress = nil
		} else {
			match++
		}
	} else {
		dst.BannedIpAddress = nil
	}

	// try to unmarshal data into BlockchainEventsCallbacksLimitReached
	err = json.Unmarshal(data, &dst.BlockchainEventsCallbacksLimitReached)
	if err == nil {
		jsonBlockchainEventsCallbacksLimitReached, _ := json.Marshal(dst.BlockchainEventsCallbacksLimitReached)
		if string(jsonBlockchainEventsCallbacksLimitReached) == "{}" { // empty struct
			dst.BlockchainEventsCallbacksLimitReached = nil
		} else {
			match++
		}
	} else {
		dst.BlockchainEventsCallbacksLimitReached = nil
	}

	// try to unmarshal data into EndpointNotAllowedForApiKey
	err = json.Unmarshal(data, &dst.EndpointNotAllowedForApiKey)
	if err == nil {
		jsonEndpointNotAllowedForApiKey, _ := json.Marshal(dst.EndpointNotAllowedForApiKey)
		if string(jsonEndpointNotAllowedForApiKey) == "{}" { // empty struct
			dst.EndpointNotAllowedForApiKey = nil
		} else {
			match++
		}
	} else {
		dst.EndpointNotAllowedForApiKey = nil
	}

	// try to unmarshal data into EndpointNotAllowedForPlan
	err = json.Unmarshal(data, &dst.EndpointNotAllowedForPlan)
	if err == nil {
		jsonEndpointNotAllowedForPlan, _ := json.Marshal(dst.EndpointNotAllowedForPlan)
		if string(jsonEndpointNotAllowedForPlan) == "{}" { // empty struct
			dst.EndpointNotAllowedForPlan = nil
		} else {
			match++
		}
	} else {
		dst.EndpointNotAllowedForPlan = nil
	}

	// try to unmarshal data into FeatureMainnetsNotAllowedForPlan
	err = json.Unmarshal(data, &dst.FeatureMainnetsNotAllowedForPlan)
	if err == nil {
		jsonFeatureMainnetsNotAllowedForPlan, _ := json.Marshal(dst.FeatureMainnetsNotAllowedForPlan)
		if string(jsonFeatureMainnetsNotAllowedForPlan) == "{}" { // empty struct
			dst.FeatureMainnetsNotAllowedForPlan = nil
		} else {
			match++
		}
	} else {
		dst.FeatureMainnetsNotAllowedForPlan = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BannedIpAddress = nil
		dst.BlockchainEventsCallbacksLimitReached = nil
		dst.EndpointNotAllowedForApiKey = nil
		dst.EndpointNotAllowedForPlan = nil
		dst.FeatureMainnetsNotAllowedForPlan = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(NewUnconfirmedCoinsTransactionsE403)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(NewUnconfirmedCoinsTransactionsE403)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NewUnconfirmedCoinsTransactionsE403) MarshalJSON() ([]byte, error) {
	if src.BannedIpAddress != nil {
		return json.Marshal(&src.BannedIpAddress)
	}

	if src.BlockchainEventsCallbacksLimitReached != nil {
		return json.Marshal(&src.BlockchainEventsCallbacksLimitReached)
	}

	if src.EndpointNotAllowedForApiKey != nil {
		return json.Marshal(&src.EndpointNotAllowedForApiKey)
	}

	if src.EndpointNotAllowedForPlan != nil {
		return json.Marshal(&src.EndpointNotAllowedForPlan)
	}

	if src.FeatureMainnetsNotAllowedForPlan != nil {
		return json.Marshal(&src.FeatureMainnetsNotAllowedForPlan)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NewUnconfirmedCoinsTransactionsE403) GetActualInstance() (interface{}) {
	if obj.BannedIpAddress != nil {
		return obj.BannedIpAddress
	}

	if obj.BlockchainEventsCallbacksLimitReached != nil {
		return obj.BlockchainEventsCallbacksLimitReached
	}

	if obj.EndpointNotAllowedForApiKey != nil {
		return obj.EndpointNotAllowedForApiKey
	}

	if obj.EndpointNotAllowedForPlan != nil {
		return obj.EndpointNotAllowedForPlan
	}

	if obj.FeatureMainnetsNotAllowedForPlan != nil {
		return obj.FeatureMainnetsNotAllowedForPlan
	}

	// all schemas are nil
	return nil
}

type NullableNewUnconfirmedCoinsTransactionsE403 struct {
	value *NewUnconfirmedCoinsTransactionsE403
	isSet bool
}

func (v NullableNewUnconfirmedCoinsTransactionsE403) Get() *NewUnconfirmedCoinsTransactionsE403 {
	return v.value
}

func (v *NullableNewUnconfirmedCoinsTransactionsE403) Set(val *NewUnconfirmedCoinsTransactionsE403) {
	v.value = val
	v.isSet = true
}

func (v NullableNewUnconfirmedCoinsTransactionsE403) IsSet() bool {
	return v.isSet
}

func (v *NullableNewUnconfirmedCoinsTransactionsE403) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewUnconfirmedCoinsTransactionsE403(val *NewUnconfirmedCoinsTransactionsE403) *NullableNewUnconfirmedCoinsTransactionsE403 {
	return &NullableNewUnconfirmedCoinsTransactionsE403{value: val, isSet: true}
}

func (v NullableNewUnconfirmedCoinsTransactionsE403) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewUnconfirmedCoinsTransactionsE403) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


