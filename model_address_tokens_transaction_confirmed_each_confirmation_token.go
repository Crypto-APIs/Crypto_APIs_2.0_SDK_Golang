/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// AddressTokensTransactionConfirmedEachConfirmationToken - struct for AddressTokensTransactionConfirmedEachConfirmationToken
type AddressTokensTransactionConfirmedEachConfirmationToken struct {
	AddressTokensTransactionConfirmedEachConfirmationBep20 *AddressTokensTransactionConfirmedEachConfirmationBep20
	AddressTokensTransactionConfirmedEachConfirmationErc20 *AddressTokensTransactionConfirmedEachConfirmationErc20
	AddressTokensTransactionConfirmedEachConfirmationErc721 *AddressTokensTransactionConfirmedEachConfirmationErc721
	AddressTokensTransactionConfirmedEachConfirmationOmni *AddressTokensTransactionConfirmedEachConfirmationOmni
}

// AddressTokensTransactionConfirmedEachConfirmationBep20AsAddressTokensTransactionConfirmedEachConfirmationToken is a convenience function that returns AddressTokensTransactionConfirmedEachConfirmationBep20 wrapped in AddressTokensTransactionConfirmedEachConfirmationToken
func AddressTokensTransactionConfirmedEachConfirmationBep20AsAddressTokensTransactionConfirmedEachConfirmationToken(v *AddressTokensTransactionConfirmedEachConfirmationBep20) AddressTokensTransactionConfirmedEachConfirmationToken {
	return AddressTokensTransactionConfirmedEachConfirmationToken{
		AddressTokensTransactionConfirmedEachConfirmationBep20: v,
	}
}

// AddressTokensTransactionConfirmedEachConfirmationErc20AsAddressTokensTransactionConfirmedEachConfirmationToken is a convenience function that returns AddressTokensTransactionConfirmedEachConfirmationErc20 wrapped in AddressTokensTransactionConfirmedEachConfirmationToken
func AddressTokensTransactionConfirmedEachConfirmationErc20AsAddressTokensTransactionConfirmedEachConfirmationToken(v *AddressTokensTransactionConfirmedEachConfirmationErc20) AddressTokensTransactionConfirmedEachConfirmationToken {
	return AddressTokensTransactionConfirmedEachConfirmationToken{
		AddressTokensTransactionConfirmedEachConfirmationErc20: v,
	}
}

// AddressTokensTransactionConfirmedEachConfirmationErc721AsAddressTokensTransactionConfirmedEachConfirmationToken is a convenience function that returns AddressTokensTransactionConfirmedEachConfirmationErc721 wrapped in AddressTokensTransactionConfirmedEachConfirmationToken
func AddressTokensTransactionConfirmedEachConfirmationErc721AsAddressTokensTransactionConfirmedEachConfirmationToken(v *AddressTokensTransactionConfirmedEachConfirmationErc721) AddressTokensTransactionConfirmedEachConfirmationToken {
	return AddressTokensTransactionConfirmedEachConfirmationToken{
		AddressTokensTransactionConfirmedEachConfirmationErc721: v,
	}
}

// AddressTokensTransactionConfirmedEachConfirmationOmniAsAddressTokensTransactionConfirmedEachConfirmationToken is a convenience function that returns AddressTokensTransactionConfirmedEachConfirmationOmni wrapped in AddressTokensTransactionConfirmedEachConfirmationToken
func AddressTokensTransactionConfirmedEachConfirmationOmniAsAddressTokensTransactionConfirmedEachConfirmationToken(v *AddressTokensTransactionConfirmedEachConfirmationOmni) AddressTokensTransactionConfirmedEachConfirmationToken {
	return AddressTokensTransactionConfirmedEachConfirmationToken{
		AddressTokensTransactionConfirmedEachConfirmationOmni: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddressTokensTransactionConfirmedEachConfirmationToken) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddressTokensTransactionConfirmedEachConfirmationBep20
	err = newStrictDecoder(data).Decode(&dst.AddressTokensTransactionConfirmedEachConfirmationBep20)
	if err == nil {
		jsonAddressTokensTransactionConfirmedEachConfirmationBep20, _ := json.Marshal(dst.AddressTokensTransactionConfirmedEachConfirmationBep20)
		if string(jsonAddressTokensTransactionConfirmedEachConfirmationBep20) == "{}" { // empty struct
			dst.AddressTokensTransactionConfirmedEachConfirmationBep20 = nil
		} else {
			match++
		}
	} else {
		dst.AddressTokensTransactionConfirmedEachConfirmationBep20 = nil
	}

	// try to unmarshal data into AddressTokensTransactionConfirmedEachConfirmationErc20
	err = newStrictDecoder(data).Decode(&dst.AddressTokensTransactionConfirmedEachConfirmationErc20)
	if err == nil {
		jsonAddressTokensTransactionConfirmedEachConfirmationErc20, _ := json.Marshal(dst.AddressTokensTransactionConfirmedEachConfirmationErc20)
		if string(jsonAddressTokensTransactionConfirmedEachConfirmationErc20) == "{}" { // empty struct
			dst.AddressTokensTransactionConfirmedEachConfirmationErc20 = nil
		} else {
			match++
		}
	} else {
		dst.AddressTokensTransactionConfirmedEachConfirmationErc20 = nil
	}

	// try to unmarshal data into AddressTokensTransactionConfirmedEachConfirmationErc721
	err = newStrictDecoder(data).Decode(&dst.AddressTokensTransactionConfirmedEachConfirmationErc721)
	if err == nil {
		jsonAddressTokensTransactionConfirmedEachConfirmationErc721, _ := json.Marshal(dst.AddressTokensTransactionConfirmedEachConfirmationErc721)
		if string(jsonAddressTokensTransactionConfirmedEachConfirmationErc721) == "{}" { // empty struct
			dst.AddressTokensTransactionConfirmedEachConfirmationErc721 = nil
		} else {
			match++
		}
	} else {
		dst.AddressTokensTransactionConfirmedEachConfirmationErc721 = nil
	}

	// try to unmarshal data into AddressTokensTransactionConfirmedEachConfirmationOmni
	err = newStrictDecoder(data).Decode(&dst.AddressTokensTransactionConfirmedEachConfirmationOmni)
	if err == nil {
		jsonAddressTokensTransactionConfirmedEachConfirmationOmni, _ := json.Marshal(dst.AddressTokensTransactionConfirmedEachConfirmationOmni)
		if string(jsonAddressTokensTransactionConfirmedEachConfirmationOmni) == "{}" { // empty struct
			dst.AddressTokensTransactionConfirmedEachConfirmationOmni = nil
		} else {
			match++
		}
	} else {
		dst.AddressTokensTransactionConfirmedEachConfirmationOmni = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddressTokensTransactionConfirmedEachConfirmationBep20 = nil
		dst.AddressTokensTransactionConfirmedEachConfirmationErc20 = nil
		dst.AddressTokensTransactionConfirmedEachConfirmationErc721 = nil
		dst.AddressTokensTransactionConfirmedEachConfirmationOmni = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(AddressTokensTransactionConfirmedEachConfirmationToken)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(AddressTokensTransactionConfirmedEachConfirmationToken)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddressTokensTransactionConfirmedEachConfirmationToken) MarshalJSON() ([]byte, error) {
	if src.AddressTokensTransactionConfirmedEachConfirmationBep20 != nil {
		return json.Marshal(&src.AddressTokensTransactionConfirmedEachConfirmationBep20)
	}

	if src.AddressTokensTransactionConfirmedEachConfirmationErc20 != nil {
		return json.Marshal(&src.AddressTokensTransactionConfirmedEachConfirmationErc20)
	}

	if src.AddressTokensTransactionConfirmedEachConfirmationErc721 != nil {
		return json.Marshal(&src.AddressTokensTransactionConfirmedEachConfirmationErc721)
	}

	if src.AddressTokensTransactionConfirmedEachConfirmationOmni != nil {
		return json.Marshal(&src.AddressTokensTransactionConfirmedEachConfirmationOmni)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddressTokensTransactionConfirmedEachConfirmationToken) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddressTokensTransactionConfirmedEachConfirmationBep20 != nil {
		return obj.AddressTokensTransactionConfirmedEachConfirmationBep20
	}

	if obj.AddressTokensTransactionConfirmedEachConfirmationErc20 != nil {
		return obj.AddressTokensTransactionConfirmedEachConfirmationErc20
	}

	if obj.AddressTokensTransactionConfirmedEachConfirmationErc721 != nil {
		return obj.AddressTokensTransactionConfirmedEachConfirmationErc721
	}

	if obj.AddressTokensTransactionConfirmedEachConfirmationOmni != nil {
		return obj.AddressTokensTransactionConfirmedEachConfirmationOmni
	}

	// all schemas are nil
	return nil
}

type NullableAddressTokensTransactionConfirmedEachConfirmationToken struct {
	value *AddressTokensTransactionConfirmedEachConfirmationToken
	isSet bool
}

func (v NullableAddressTokensTransactionConfirmedEachConfirmationToken) Get() *AddressTokensTransactionConfirmedEachConfirmationToken {
	return v.value
}

func (v *NullableAddressTokensTransactionConfirmedEachConfirmationToken) Set(val *AddressTokensTransactionConfirmedEachConfirmationToken) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressTokensTransactionConfirmedEachConfirmationToken) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressTokensTransactionConfirmedEachConfirmationToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressTokensTransactionConfirmedEachConfirmationToken(val *AddressTokensTransactionConfirmedEachConfirmationToken) *NullableAddressTokensTransactionConfirmedEachConfirmationToken {
	return &NullableAddressTokensTransactionConfirmedEachConfirmationToken{value: val, isSet: true}
}

func (v NullableAddressTokensTransactionConfirmedEachConfirmationToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressTokensTransactionConfirmedEachConfirmationToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


