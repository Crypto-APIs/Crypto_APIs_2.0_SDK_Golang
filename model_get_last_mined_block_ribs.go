/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GetLastMinedBlockRIBS - struct for GetLastMinedBlockRIBS
type GetLastMinedBlockRIBS struct {
	GetLastMinedBlockRIBSB *GetLastMinedBlockRIBSB
	GetLastMinedBlockRIBSBC *GetLastMinedBlockRIBSBC
	GetLastMinedBlockRIBSBSC *GetLastMinedBlockRIBSBSC
	GetLastMinedBlockRIBSD *GetLastMinedBlockRIBSD
	GetLastMinedBlockRIBSD2 *GetLastMinedBlockRIBSD2
	GetLastMinedBlockRIBSE *GetLastMinedBlockRIBSE
	GetLastMinedBlockRIBSEC *GetLastMinedBlockRIBSEC
	GetLastMinedBlockRIBSL *GetLastMinedBlockRIBSL
	GetLastMinedBlockRIBSZ *GetLastMinedBlockRIBSZ
}

// GetLastMinedBlockRIBSBAsGetLastMinedBlockRIBS is a convenience function that returns GetLastMinedBlockRIBSB wrapped in GetLastMinedBlockRIBS
func GetLastMinedBlockRIBSBAsGetLastMinedBlockRIBS(v *GetLastMinedBlockRIBSB) GetLastMinedBlockRIBS {
	return GetLastMinedBlockRIBS{ GetLastMinedBlockRIBSB: v}
}

// GetLastMinedBlockRIBSBCAsGetLastMinedBlockRIBS is a convenience function that returns GetLastMinedBlockRIBSBC wrapped in GetLastMinedBlockRIBS
func GetLastMinedBlockRIBSBCAsGetLastMinedBlockRIBS(v *GetLastMinedBlockRIBSBC) GetLastMinedBlockRIBS {
	return GetLastMinedBlockRIBS{ GetLastMinedBlockRIBSBC: v}
}

// GetLastMinedBlockRIBSBSCAsGetLastMinedBlockRIBS is a convenience function that returns GetLastMinedBlockRIBSBSC wrapped in GetLastMinedBlockRIBS
func GetLastMinedBlockRIBSBSCAsGetLastMinedBlockRIBS(v *GetLastMinedBlockRIBSBSC) GetLastMinedBlockRIBS {
	return GetLastMinedBlockRIBS{ GetLastMinedBlockRIBSBSC: v}
}

// GetLastMinedBlockRIBSDAsGetLastMinedBlockRIBS is a convenience function that returns GetLastMinedBlockRIBSD wrapped in GetLastMinedBlockRIBS
func GetLastMinedBlockRIBSDAsGetLastMinedBlockRIBS(v *GetLastMinedBlockRIBSD) GetLastMinedBlockRIBS {
	return GetLastMinedBlockRIBS{ GetLastMinedBlockRIBSD: v}
}

// GetLastMinedBlockRIBSD2AsGetLastMinedBlockRIBS is a convenience function that returns GetLastMinedBlockRIBSD2 wrapped in GetLastMinedBlockRIBS
func GetLastMinedBlockRIBSD2AsGetLastMinedBlockRIBS(v *GetLastMinedBlockRIBSD2) GetLastMinedBlockRIBS {
	return GetLastMinedBlockRIBS{ GetLastMinedBlockRIBSD2: v}
}

// GetLastMinedBlockRIBSEAsGetLastMinedBlockRIBS is a convenience function that returns GetLastMinedBlockRIBSE wrapped in GetLastMinedBlockRIBS
func GetLastMinedBlockRIBSEAsGetLastMinedBlockRIBS(v *GetLastMinedBlockRIBSE) GetLastMinedBlockRIBS {
	return GetLastMinedBlockRIBS{ GetLastMinedBlockRIBSE: v}
}

// GetLastMinedBlockRIBSECAsGetLastMinedBlockRIBS is a convenience function that returns GetLastMinedBlockRIBSEC wrapped in GetLastMinedBlockRIBS
func GetLastMinedBlockRIBSECAsGetLastMinedBlockRIBS(v *GetLastMinedBlockRIBSEC) GetLastMinedBlockRIBS {
	return GetLastMinedBlockRIBS{ GetLastMinedBlockRIBSEC: v}
}

// GetLastMinedBlockRIBSLAsGetLastMinedBlockRIBS is a convenience function that returns GetLastMinedBlockRIBSL wrapped in GetLastMinedBlockRIBS
func GetLastMinedBlockRIBSLAsGetLastMinedBlockRIBS(v *GetLastMinedBlockRIBSL) GetLastMinedBlockRIBS {
	return GetLastMinedBlockRIBS{ GetLastMinedBlockRIBSL: v}
}

// GetLastMinedBlockRIBSZAsGetLastMinedBlockRIBS is a convenience function that returns GetLastMinedBlockRIBSZ wrapped in GetLastMinedBlockRIBS
func GetLastMinedBlockRIBSZAsGetLastMinedBlockRIBS(v *GetLastMinedBlockRIBSZ) GetLastMinedBlockRIBS {
	return GetLastMinedBlockRIBS{ GetLastMinedBlockRIBSZ: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetLastMinedBlockRIBS) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetLastMinedBlockRIBSB
	err = json.Unmarshal(data, &dst.GetLastMinedBlockRIBSB)
	if err == nil {
		jsonGetLastMinedBlockRIBSB, _ := json.Marshal(dst.GetLastMinedBlockRIBSB)
		if string(jsonGetLastMinedBlockRIBSB) == "{}" { // empty struct
			dst.GetLastMinedBlockRIBSB = nil
		} else {
			match++
		}
	} else {
		dst.GetLastMinedBlockRIBSB = nil
	}

	// try to unmarshal data into GetLastMinedBlockRIBSBC
	err = json.Unmarshal(data, &dst.GetLastMinedBlockRIBSBC)
	if err == nil {
		jsonGetLastMinedBlockRIBSBC, _ := json.Marshal(dst.GetLastMinedBlockRIBSBC)
		if string(jsonGetLastMinedBlockRIBSBC) == "{}" { // empty struct
			dst.GetLastMinedBlockRIBSBC = nil
		} else {
			match++
		}
	} else {
		dst.GetLastMinedBlockRIBSBC = nil
	}

	// try to unmarshal data into GetLastMinedBlockRIBSBSC
	err = json.Unmarshal(data, &dst.GetLastMinedBlockRIBSBSC)
	if err == nil {
		jsonGetLastMinedBlockRIBSBSC, _ := json.Marshal(dst.GetLastMinedBlockRIBSBSC)
		if string(jsonGetLastMinedBlockRIBSBSC) == "{}" { // empty struct
			dst.GetLastMinedBlockRIBSBSC = nil
		} else {
			match++
		}
	} else {
		dst.GetLastMinedBlockRIBSBSC = nil
	}

	// try to unmarshal data into GetLastMinedBlockRIBSD
	err = json.Unmarshal(data, &dst.GetLastMinedBlockRIBSD)
	if err == nil {
		jsonGetLastMinedBlockRIBSD, _ := json.Marshal(dst.GetLastMinedBlockRIBSD)
		if string(jsonGetLastMinedBlockRIBSD) == "{}" { // empty struct
			dst.GetLastMinedBlockRIBSD = nil
		} else {
			match++
		}
	} else {
		dst.GetLastMinedBlockRIBSD = nil
	}

	// try to unmarshal data into GetLastMinedBlockRIBSD2
	err = json.Unmarshal(data, &dst.GetLastMinedBlockRIBSD2)
	if err == nil {
		jsonGetLastMinedBlockRIBSD2, _ := json.Marshal(dst.GetLastMinedBlockRIBSD2)
		if string(jsonGetLastMinedBlockRIBSD2) == "{}" { // empty struct
			dst.GetLastMinedBlockRIBSD2 = nil
		} else {
			match++
		}
	} else {
		dst.GetLastMinedBlockRIBSD2 = nil
	}

	// try to unmarshal data into GetLastMinedBlockRIBSE
	err = json.Unmarshal(data, &dst.GetLastMinedBlockRIBSE)
	if err == nil {
		jsonGetLastMinedBlockRIBSE, _ := json.Marshal(dst.GetLastMinedBlockRIBSE)
		if string(jsonGetLastMinedBlockRIBSE) == "{}" { // empty struct
			dst.GetLastMinedBlockRIBSE = nil
		} else {
			match++
		}
	} else {
		dst.GetLastMinedBlockRIBSE = nil
	}

	// try to unmarshal data into GetLastMinedBlockRIBSEC
	err = json.Unmarshal(data, &dst.GetLastMinedBlockRIBSEC)
	if err == nil {
		jsonGetLastMinedBlockRIBSEC, _ := json.Marshal(dst.GetLastMinedBlockRIBSEC)
		if string(jsonGetLastMinedBlockRIBSEC) == "{}" { // empty struct
			dst.GetLastMinedBlockRIBSEC = nil
		} else {
			match++
		}
	} else {
		dst.GetLastMinedBlockRIBSEC = nil
	}

	// try to unmarshal data into GetLastMinedBlockRIBSL
	err = json.Unmarshal(data, &dst.GetLastMinedBlockRIBSL)
	if err == nil {
		jsonGetLastMinedBlockRIBSL, _ := json.Marshal(dst.GetLastMinedBlockRIBSL)
		if string(jsonGetLastMinedBlockRIBSL) == "{}" { // empty struct
			dst.GetLastMinedBlockRIBSL = nil
		} else {
			match++
		}
	} else {
		dst.GetLastMinedBlockRIBSL = nil
	}

	// try to unmarshal data into GetLastMinedBlockRIBSZ
	err = json.Unmarshal(data, &dst.GetLastMinedBlockRIBSZ)
	if err == nil {
		jsonGetLastMinedBlockRIBSZ, _ := json.Marshal(dst.GetLastMinedBlockRIBSZ)
		if string(jsonGetLastMinedBlockRIBSZ) == "{}" { // empty struct
			dst.GetLastMinedBlockRIBSZ = nil
		} else {
			match++
		}
	} else {
		dst.GetLastMinedBlockRIBSZ = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetLastMinedBlockRIBSB = nil
		dst.GetLastMinedBlockRIBSBC = nil
		dst.GetLastMinedBlockRIBSBSC = nil
		dst.GetLastMinedBlockRIBSD = nil
		dst.GetLastMinedBlockRIBSD2 = nil
		dst.GetLastMinedBlockRIBSE = nil
		dst.GetLastMinedBlockRIBSEC = nil
		dst.GetLastMinedBlockRIBSL = nil
		dst.GetLastMinedBlockRIBSZ = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetLastMinedBlockRIBS)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetLastMinedBlockRIBS)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetLastMinedBlockRIBS) MarshalJSON() ([]byte, error) {
	if src.GetLastMinedBlockRIBSB != nil {
		return json.Marshal(&src.GetLastMinedBlockRIBSB)
	}

	if src.GetLastMinedBlockRIBSBC != nil {
		return json.Marshal(&src.GetLastMinedBlockRIBSBC)
	}

	if src.GetLastMinedBlockRIBSBSC != nil {
		return json.Marshal(&src.GetLastMinedBlockRIBSBSC)
	}

	if src.GetLastMinedBlockRIBSD != nil {
		return json.Marshal(&src.GetLastMinedBlockRIBSD)
	}

	if src.GetLastMinedBlockRIBSD2 != nil {
		return json.Marshal(&src.GetLastMinedBlockRIBSD2)
	}

	if src.GetLastMinedBlockRIBSE != nil {
		return json.Marshal(&src.GetLastMinedBlockRIBSE)
	}

	if src.GetLastMinedBlockRIBSEC != nil {
		return json.Marshal(&src.GetLastMinedBlockRIBSEC)
	}

	if src.GetLastMinedBlockRIBSL != nil {
		return json.Marshal(&src.GetLastMinedBlockRIBSL)
	}

	if src.GetLastMinedBlockRIBSZ != nil {
		return json.Marshal(&src.GetLastMinedBlockRIBSZ)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetLastMinedBlockRIBS) GetActualInstance() (interface{}) {
	if obj.GetLastMinedBlockRIBSB != nil {
		return obj.GetLastMinedBlockRIBSB
	}

	if obj.GetLastMinedBlockRIBSBC != nil {
		return obj.GetLastMinedBlockRIBSBC
	}

	if obj.GetLastMinedBlockRIBSBSC != nil {
		return obj.GetLastMinedBlockRIBSBSC
	}

	if obj.GetLastMinedBlockRIBSD != nil {
		return obj.GetLastMinedBlockRIBSD
	}

	if obj.GetLastMinedBlockRIBSD2 != nil {
		return obj.GetLastMinedBlockRIBSD2
	}

	if obj.GetLastMinedBlockRIBSE != nil {
		return obj.GetLastMinedBlockRIBSE
	}

	if obj.GetLastMinedBlockRIBSEC != nil {
		return obj.GetLastMinedBlockRIBSEC
	}

	if obj.GetLastMinedBlockRIBSL != nil {
		return obj.GetLastMinedBlockRIBSL
	}

	if obj.GetLastMinedBlockRIBSZ != nil {
		return obj.GetLastMinedBlockRIBSZ
	}

	// all schemas are nil
	return nil
}

type NullableGetLastMinedBlockRIBS struct {
	value *GetLastMinedBlockRIBS
	isSet bool
}

func (v NullableGetLastMinedBlockRIBS) Get() *GetLastMinedBlockRIBS {
	return v.value
}

func (v *NullableGetLastMinedBlockRIBS) Set(val *GetLastMinedBlockRIBS) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLastMinedBlockRIBS) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLastMinedBlockRIBS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLastMinedBlockRIBS(val *GetLastMinedBlockRIBS) *NullableGetLastMinedBlockRIBS {
	return &NullableGetLastMinedBlockRIBS{value: val, isSet: true}
}

func (v NullableGetLastMinedBlockRIBS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLastMinedBlockRIBS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


