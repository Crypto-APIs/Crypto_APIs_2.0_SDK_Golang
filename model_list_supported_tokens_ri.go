/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ListSupportedTokensRI struct for ListSupportedTokensRI
type ListSupportedTokensRI struct {
	// Defines the token's decimal number or all of its points after the zero.
	Decimals int32 `json:"decimals"`
	// Represents a unique identifier for the specific blockchain and network, e.g. smart contract address, property ID, etc.
	Identifier string `json:"identifier"`
	// Defines the token name.
	Name string `json:"name"`
	// Defines the token's unique symbol in the Crypto APIs listings.
	Symbol string `json:"symbol"`
	// Represents the token's type representation, e.g. ERC-20, Omni, etc.
	Type string `json:"type"`
}

// NewListSupportedTokensRI instantiates a new ListSupportedTokensRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSupportedTokensRI(decimals int32, identifier string, name string, symbol string, type_ string) *ListSupportedTokensRI {
	this := ListSupportedTokensRI{}
	this.Decimals = decimals
	this.Identifier = identifier
	this.Name = name
	this.Symbol = symbol
	this.Type = type_
	return &this
}

// NewListSupportedTokensRIWithDefaults instantiates a new ListSupportedTokensRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSupportedTokensRIWithDefaults() *ListSupportedTokensRI {
	this := ListSupportedTokensRI{}
	return &this
}

// GetDecimals returns the Decimals field value
func (o *ListSupportedTokensRI) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *ListSupportedTokensRI) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *ListSupportedTokensRI) SetDecimals(v int32) {
	o.Decimals = v
}

// GetIdentifier returns the Identifier field value
func (o *ListSupportedTokensRI) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *ListSupportedTokensRI) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *ListSupportedTokensRI) SetIdentifier(v string) {
	o.Identifier = v
}

// GetName returns the Name field value
func (o *ListSupportedTokensRI) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListSupportedTokensRI) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListSupportedTokensRI) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *ListSupportedTokensRI) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *ListSupportedTokensRI) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *ListSupportedTokensRI) SetSymbol(v string) {
	o.Symbol = v
}

// GetType returns the Type field value
func (o *ListSupportedTokensRI) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ListSupportedTokensRI) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ListSupportedTokensRI) SetType(v string) {
	o.Type = v
}

func (o ListSupportedTokensRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["decimals"] = o.Decimals
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableListSupportedTokensRI struct {
	value *ListSupportedTokensRI
	isSet bool
}

func (v NullableListSupportedTokensRI) Get() *ListSupportedTokensRI {
	return v.value
}

func (v *NullableListSupportedTokensRI) Set(val *ListSupportedTokensRI) {
	v.value = val
	v.isSet = true
}

func (v NullableListSupportedTokensRI) IsSet() bool {
	return v.isSet
}

func (v *NullableListSupportedTokensRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSupportedTokensRI(val *ListSupportedTokensRI) *NullableListSupportedTokensRI {
	return &NullableListSupportedTokensRI{value: val, isSet: true}
}

func (v NullableListSupportedTokensRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSupportedTokensRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


