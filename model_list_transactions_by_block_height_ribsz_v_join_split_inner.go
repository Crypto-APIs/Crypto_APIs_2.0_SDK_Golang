/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ListTransactionsByBlockHeightRIBSZVJoinSplitInner struct for ListTransactionsByBlockHeightRIBSZVJoinSplitInner
type ListTransactionsByBlockHeightRIBSZVJoinSplitInner struct {
	// Defines a Merkle tree root of a note commitment tree which uniquely identifies a note commitment tree state given the assumed security properties of the Merkle treeâ€™s  hash function.
	Anchor string `json:"anchor"`
	CipherTexts []string `json:"cipherTexts"`
	Commitments []string `json:"commitments"`
	Macs []string `json:"macs"`
	Nullifiers []string `json:"nullifiers"`
	// Defines the one time public key.
	OneTimePubKey string `json:"oneTimePubKey"`
	// Defines the proof.
	Proof string `json:"proof"`
	// Represents a 256-bit seed that must be chosen independently at random for each JoinSplit description.
	RandomSeed string `json:"randomSeed"`
	// Defines the value that the joinSplit transfer will insert into the transparent transaction value pool.
	VPubNew string `json:"vPubNew"`
	// Defines the value that the joinSplit transfer will remove from the transparent transaction value pool.
	VPubOld string `json:"vPubOld"`
}

// NewListTransactionsByBlockHeightRIBSZVJoinSplitInner instantiates a new ListTransactionsByBlockHeightRIBSZVJoinSplitInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTransactionsByBlockHeightRIBSZVJoinSplitInner(anchor string, cipherTexts []string, commitments []string, macs []string, nullifiers []string, oneTimePubKey string, proof string, randomSeed string, vPubNew string, vPubOld string) *ListTransactionsByBlockHeightRIBSZVJoinSplitInner {
	this := ListTransactionsByBlockHeightRIBSZVJoinSplitInner{}
	this.Anchor = anchor
	this.CipherTexts = cipherTexts
	this.Commitments = commitments
	this.Macs = macs
	this.Nullifiers = nullifiers
	this.OneTimePubKey = oneTimePubKey
	this.Proof = proof
	this.RandomSeed = randomSeed
	this.VPubNew = vPubNew
	this.VPubOld = vPubOld
	return &this
}

// NewListTransactionsByBlockHeightRIBSZVJoinSplitInnerWithDefaults instantiates a new ListTransactionsByBlockHeightRIBSZVJoinSplitInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTransactionsByBlockHeightRIBSZVJoinSplitInnerWithDefaults() *ListTransactionsByBlockHeightRIBSZVJoinSplitInner {
	this := ListTransactionsByBlockHeightRIBSZVJoinSplitInner{}
	return &this
}

// GetAnchor returns the Anchor field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetAnchor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Anchor
}

// GetAnchorOk returns a tuple with the Anchor field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetAnchorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Anchor, true
}

// SetAnchor sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetAnchor(v string) {
	o.Anchor = v
}

// GetCipherTexts returns the CipherTexts field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetCipherTexts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CipherTexts
}

// GetCipherTextsOk returns a tuple with the CipherTexts field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetCipherTextsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CipherTexts, true
}

// SetCipherTexts sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetCipherTexts(v []string) {
	o.CipherTexts = v
}

// GetCommitments returns the Commitments field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetCommitments() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Commitments
}

// GetCommitmentsOk returns a tuple with the Commitments field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetCommitmentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commitments, true
}

// SetCommitments sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetCommitments(v []string) {
	o.Commitments = v
}

// GetMacs returns the Macs field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetMacs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Macs
}

// GetMacsOk returns a tuple with the Macs field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetMacsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Macs, true
}

// SetMacs sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetMacs(v []string) {
	o.Macs = v
}

// GetNullifiers returns the Nullifiers field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetNullifiers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Nullifiers
}

// GetNullifiersOk returns a tuple with the Nullifiers field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetNullifiersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nullifiers, true
}

// SetNullifiers sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetNullifiers(v []string) {
	o.Nullifiers = v
}

// GetOneTimePubKey returns the OneTimePubKey field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetOneTimePubKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OneTimePubKey
}

// GetOneTimePubKeyOk returns a tuple with the OneTimePubKey field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetOneTimePubKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OneTimePubKey, true
}

// SetOneTimePubKey sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetOneTimePubKey(v string) {
	o.OneTimePubKey = v
}

// GetProof returns the Proof field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetProof() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Proof
}

// GetProofOk returns a tuple with the Proof field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetProofOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proof, true
}

// SetProof sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetProof(v string) {
	o.Proof = v
}

// GetRandomSeed returns the RandomSeed field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetRandomSeed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RandomSeed
}

// GetRandomSeedOk returns a tuple with the RandomSeed field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetRandomSeedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RandomSeed, true
}

// SetRandomSeed sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetRandomSeed(v string) {
	o.RandomSeed = v
}

// GetVPubNew returns the VPubNew field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetVPubNew() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VPubNew
}

// GetVPubNewOk returns a tuple with the VPubNew field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetVPubNewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VPubNew, true
}

// SetVPubNew sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetVPubNew(v string) {
	o.VPubNew = v
}

// GetVPubOld returns the VPubOld field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetVPubOld() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VPubOld
}

// GetVPubOldOk returns a tuple with the VPubOld field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) GetVPubOldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VPubOld, true
}

// SetVPubOld sets field value
func (o *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) SetVPubOld(v string) {
	o.VPubOld = v
}

func (o ListTransactionsByBlockHeightRIBSZVJoinSplitInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["anchor"] = o.Anchor
	}
	if true {
		toSerialize["cipherTexts"] = o.CipherTexts
	}
	if true {
		toSerialize["commitments"] = o.Commitments
	}
	if true {
		toSerialize["macs"] = o.Macs
	}
	if true {
		toSerialize["nullifiers"] = o.Nullifiers
	}
	if true {
		toSerialize["oneTimePubKey"] = o.OneTimePubKey
	}
	if true {
		toSerialize["proof"] = o.Proof
	}
	if true {
		toSerialize["randomSeed"] = o.RandomSeed
	}
	if true {
		toSerialize["vPubNew"] = o.VPubNew
	}
	if true {
		toSerialize["vPubOld"] = o.VPubOld
	}
	return json.Marshal(toSerialize)
}

type NullableListTransactionsByBlockHeightRIBSZVJoinSplitInner struct {
	value *ListTransactionsByBlockHeightRIBSZVJoinSplitInner
	isSet bool
}

func (v NullableListTransactionsByBlockHeightRIBSZVJoinSplitInner) Get() *ListTransactionsByBlockHeightRIBSZVJoinSplitInner {
	return v.value
}

func (v *NullableListTransactionsByBlockHeightRIBSZVJoinSplitInner) Set(val *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListTransactionsByBlockHeightRIBSZVJoinSplitInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListTransactionsByBlockHeightRIBSZVJoinSplitInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTransactionsByBlockHeightRIBSZVJoinSplitInner(val *ListTransactionsByBlockHeightRIBSZVJoinSplitInner) *NullableListTransactionsByBlockHeightRIBSZVJoinSplitInner {
	return &NullableListTransactionsByBlockHeightRIBSZVJoinSplitInner{value: val, isSet: true}
}

func (v NullableListTransactionsByBlockHeightRIBSZVJoinSplitInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTransactionsByBlockHeightRIBSZVJoinSplitInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


