/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// ListTransactionsByBlockHashResponseItemBlockchainSpecific - struct for ListTransactionsByBlockHashResponseItemBlockchainSpecific
type ListTransactionsByBlockHashResponseItemBlockchainSpecific struct {
	ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin *ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin
	ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash *ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash
	ListTransactionsByBlockHashResponseItemBlockchainSpecificDash *ListTransactionsByBlockHashResponseItemBlockchainSpecificDash
	ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin *ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin
	ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum *ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum
	ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic *ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic
	ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin *ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin
}

// ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinAsListTransactionsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin wrapped in ListTransactionsByBlockHashResponseItemBlockchainSpecific
func ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinAsListTransactionsByBlockHashResponseItemBlockchainSpecific(v *ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin) ListTransactionsByBlockHashResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHashResponseItemBlockchainSpecific{ ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin: v}
}

// ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashAsListTransactionsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash wrapped in ListTransactionsByBlockHashResponseItemBlockchainSpecific
func ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashAsListTransactionsByBlockHashResponseItemBlockchainSpecific(v *ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash) ListTransactionsByBlockHashResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHashResponseItemBlockchainSpecific{ ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash: v}
}

// ListTransactionsByBlockHashResponseItemBlockchainSpecificDashAsListTransactionsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHashResponseItemBlockchainSpecificDash wrapped in ListTransactionsByBlockHashResponseItemBlockchainSpecific
func ListTransactionsByBlockHashResponseItemBlockchainSpecificDashAsListTransactionsByBlockHashResponseItemBlockchainSpecific(v *ListTransactionsByBlockHashResponseItemBlockchainSpecificDash) ListTransactionsByBlockHashResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHashResponseItemBlockchainSpecific{ ListTransactionsByBlockHashResponseItemBlockchainSpecificDash: v}
}

// ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoinAsListTransactionsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin wrapped in ListTransactionsByBlockHashResponseItemBlockchainSpecific
func ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoinAsListTransactionsByBlockHashResponseItemBlockchainSpecific(v *ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin) ListTransactionsByBlockHashResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHashResponseItemBlockchainSpecific{ ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin: v}
}

// ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumAsListTransactionsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum wrapped in ListTransactionsByBlockHashResponseItemBlockchainSpecific
func ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumAsListTransactionsByBlockHashResponseItemBlockchainSpecific(v *ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum) ListTransactionsByBlockHashResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHashResponseItemBlockchainSpecific{ ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum: v}
}

// ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassicAsListTransactionsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic wrapped in ListTransactionsByBlockHashResponseItemBlockchainSpecific
func ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassicAsListTransactionsByBlockHashResponseItemBlockchainSpecific(v *ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic) ListTransactionsByBlockHashResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHashResponseItemBlockchainSpecific{ ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic: v}
}

// ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoinAsListTransactionsByBlockHashResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin wrapped in ListTransactionsByBlockHashResponseItemBlockchainSpecific
func ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoinAsListTransactionsByBlockHashResponseItemBlockchainSpecific(v *ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin) ListTransactionsByBlockHashResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHashResponseItemBlockchainSpecific{ ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListTransactionsByBlockHashResponseItemBlockchainSpecific) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin)
	if err == nil {
		jsonListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin, _ := json.Marshal(dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin)
		if string(jsonListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash)
	if err == nil {
		jsonListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash, _ := json.Marshal(dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash)
		if string(jsonListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashResponseItemBlockchainSpecificDash
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDash)
	if err == nil {
		jsonListTransactionsByBlockHashResponseItemBlockchainSpecificDash, _ := json.Marshal(dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDash)
		if string(jsonListTransactionsByBlockHashResponseItemBlockchainSpecificDash) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDash = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDash = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin)
	if err == nil {
		jsonListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin, _ := json.Marshal(dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin)
		if string(jsonListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum)
	if err == nil {
		jsonListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum, _ := json.Marshal(dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum)
		if string(jsonListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic)
	if err == nil {
		jsonListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic, _ := json.Marshal(dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic)
		if string(jsonListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin)
	if err == nil {
		jsonListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin, _ := json.Marshal(dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin)
		if string(jsonListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin) == "{}" { // empty struct
			dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin = nil
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash = nil
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDash = nil
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin = nil
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum = nil
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic = nil
		dst.ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ListTransactionsByBlockHashResponseItemBlockchainSpecific)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ListTransactionsByBlockHashResponseItemBlockchainSpecific)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListTransactionsByBlockHashResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	if src.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin)
	}

	if src.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash)
	}

	if src.ListTransactionsByBlockHashResponseItemBlockchainSpecificDash != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashResponseItemBlockchainSpecificDash)
	}

	if src.ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin)
	}

	if src.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum)
	}

	if src.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic)
	}

	if src.ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin != nil {
		return json.Marshal(&src.ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListTransactionsByBlockHashResponseItemBlockchainSpecific) GetActualInstance() (interface{}) {
	if obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin != nil {
		return obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin
	}

	if obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash != nil {
		return obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash
	}

	if obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificDash != nil {
		return obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificDash
	}

	if obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin != nil {
		return obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin
	}

	if obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum != nil {
		return obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum
	}

	if obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic != nil {
		return obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic
	}

	if obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin != nil {
		return obj.ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin
	}

	// all schemas are nil
	return nil
}

type NullableListTransactionsByBlockHashResponseItemBlockchainSpecific struct {
	value *ListTransactionsByBlockHashResponseItemBlockchainSpecific
	isSet bool
}

func (v NullableListTransactionsByBlockHashResponseItemBlockchainSpecific) Get() *ListTransactionsByBlockHashResponseItemBlockchainSpecific {
	return v.value
}

func (v *NullableListTransactionsByBlockHashResponseItemBlockchainSpecific) Set(val *ListTransactionsByBlockHashResponseItemBlockchainSpecific) {
	v.value = val
	v.isSet = true
}

func (v NullableListTransactionsByBlockHashResponseItemBlockchainSpecific) IsSet() bool {
	return v.isSet
}

func (v *NullableListTransactionsByBlockHashResponseItemBlockchainSpecific) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTransactionsByBlockHashResponseItemBlockchainSpecific(val *ListTransactionsByBlockHashResponseItemBlockchainSpecific) *NullableListTransactionsByBlockHashResponseItemBlockchainSpecific {
	return &NullableListTransactionsByBlockHashResponseItemBlockchainSpecific{value: val, isSet: true}
}

func (v NullableListTransactionsByBlockHashResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTransactionsByBlockHashResponseItemBlockchainSpecific) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


