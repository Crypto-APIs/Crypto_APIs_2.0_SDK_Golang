/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// ListAllUnconfirmedTransactionsRIBS - struct for ListAllUnconfirmedTransactionsRIBS
type ListAllUnconfirmedTransactionsRIBS struct {
	ListAllUnconfirmedTransactionsRIBSB *ListAllUnconfirmedTransactionsRIBSB
	ListAllUnconfirmedTransactionsRIBSBC *ListAllUnconfirmedTransactionsRIBSBC
	ListAllUnconfirmedTransactionsRIBSBSC *ListAllUnconfirmedTransactionsRIBSBSC
	ListAllUnconfirmedTransactionsRIBSD *ListAllUnconfirmedTransactionsRIBSD
	ListAllUnconfirmedTransactionsRIBSD2 *ListAllUnconfirmedTransactionsRIBSD2
	ListAllUnconfirmedTransactionsRIBSE *ListAllUnconfirmedTransactionsRIBSE
	ListAllUnconfirmedTransactionsRIBSEC *ListAllUnconfirmedTransactionsRIBSEC
	ListAllUnconfirmedTransactionsRIBSL *ListAllUnconfirmedTransactionsRIBSL
	ListAllUnconfirmedTransactionsRIBSZ *ListAllUnconfirmedTransactionsRIBSZ
}

// ListAllUnconfirmedTransactionsRIBSBAsListAllUnconfirmedTransactionsRIBS is a convenience function that returns ListAllUnconfirmedTransactionsRIBSB wrapped in ListAllUnconfirmedTransactionsRIBS
func ListAllUnconfirmedTransactionsRIBSBAsListAllUnconfirmedTransactionsRIBS(v *ListAllUnconfirmedTransactionsRIBSB) ListAllUnconfirmedTransactionsRIBS {
	return ListAllUnconfirmedTransactionsRIBS{ ListAllUnconfirmedTransactionsRIBSB: v}
}

// ListAllUnconfirmedTransactionsRIBSBCAsListAllUnconfirmedTransactionsRIBS is a convenience function that returns ListAllUnconfirmedTransactionsRIBSBC wrapped in ListAllUnconfirmedTransactionsRIBS
func ListAllUnconfirmedTransactionsRIBSBCAsListAllUnconfirmedTransactionsRIBS(v *ListAllUnconfirmedTransactionsRIBSBC) ListAllUnconfirmedTransactionsRIBS {
	return ListAllUnconfirmedTransactionsRIBS{ ListAllUnconfirmedTransactionsRIBSBC: v}
}

// ListAllUnconfirmedTransactionsRIBSBSCAsListAllUnconfirmedTransactionsRIBS is a convenience function that returns ListAllUnconfirmedTransactionsRIBSBSC wrapped in ListAllUnconfirmedTransactionsRIBS
func ListAllUnconfirmedTransactionsRIBSBSCAsListAllUnconfirmedTransactionsRIBS(v *ListAllUnconfirmedTransactionsRIBSBSC) ListAllUnconfirmedTransactionsRIBS {
	return ListAllUnconfirmedTransactionsRIBS{ ListAllUnconfirmedTransactionsRIBSBSC: v}
}

// ListAllUnconfirmedTransactionsRIBSDAsListAllUnconfirmedTransactionsRIBS is a convenience function that returns ListAllUnconfirmedTransactionsRIBSD wrapped in ListAllUnconfirmedTransactionsRIBS
func ListAllUnconfirmedTransactionsRIBSDAsListAllUnconfirmedTransactionsRIBS(v *ListAllUnconfirmedTransactionsRIBSD) ListAllUnconfirmedTransactionsRIBS {
	return ListAllUnconfirmedTransactionsRIBS{ ListAllUnconfirmedTransactionsRIBSD: v}
}

// ListAllUnconfirmedTransactionsRIBSD2AsListAllUnconfirmedTransactionsRIBS is a convenience function that returns ListAllUnconfirmedTransactionsRIBSD2 wrapped in ListAllUnconfirmedTransactionsRIBS
func ListAllUnconfirmedTransactionsRIBSD2AsListAllUnconfirmedTransactionsRIBS(v *ListAllUnconfirmedTransactionsRIBSD2) ListAllUnconfirmedTransactionsRIBS {
	return ListAllUnconfirmedTransactionsRIBS{ ListAllUnconfirmedTransactionsRIBSD2: v}
}

// ListAllUnconfirmedTransactionsRIBSEAsListAllUnconfirmedTransactionsRIBS is a convenience function that returns ListAllUnconfirmedTransactionsRIBSE wrapped in ListAllUnconfirmedTransactionsRIBS
func ListAllUnconfirmedTransactionsRIBSEAsListAllUnconfirmedTransactionsRIBS(v *ListAllUnconfirmedTransactionsRIBSE) ListAllUnconfirmedTransactionsRIBS {
	return ListAllUnconfirmedTransactionsRIBS{ ListAllUnconfirmedTransactionsRIBSE: v}
}

// ListAllUnconfirmedTransactionsRIBSECAsListAllUnconfirmedTransactionsRIBS is a convenience function that returns ListAllUnconfirmedTransactionsRIBSEC wrapped in ListAllUnconfirmedTransactionsRIBS
func ListAllUnconfirmedTransactionsRIBSECAsListAllUnconfirmedTransactionsRIBS(v *ListAllUnconfirmedTransactionsRIBSEC) ListAllUnconfirmedTransactionsRIBS {
	return ListAllUnconfirmedTransactionsRIBS{ ListAllUnconfirmedTransactionsRIBSEC: v}
}

// ListAllUnconfirmedTransactionsRIBSLAsListAllUnconfirmedTransactionsRIBS is a convenience function that returns ListAllUnconfirmedTransactionsRIBSL wrapped in ListAllUnconfirmedTransactionsRIBS
func ListAllUnconfirmedTransactionsRIBSLAsListAllUnconfirmedTransactionsRIBS(v *ListAllUnconfirmedTransactionsRIBSL) ListAllUnconfirmedTransactionsRIBS {
	return ListAllUnconfirmedTransactionsRIBS{ ListAllUnconfirmedTransactionsRIBSL: v}
}

// ListAllUnconfirmedTransactionsRIBSZAsListAllUnconfirmedTransactionsRIBS is a convenience function that returns ListAllUnconfirmedTransactionsRIBSZ wrapped in ListAllUnconfirmedTransactionsRIBS
func ListAllUnconfirmedTransactionsRIBSZAsListAllUnconfirmedTransactionsRIBS(v *ListAllUnconfirmedTransactionsRIBSZ) ListAllUnconfirmedTransactionsRIBS {
	return ListAllUnconfirmedTransactionsRIBS{ ListAllUnconfirmedTransactionsRIBSZ: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListAllUnconfirmedTransactionsRIBS) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListAllUnconfirmedTransactionsRIBSB
	err = json.Unmarshal(data, &dst.ListAllUnconfirmedTransactionsRIBSB)
	if err == nil {
		jsonListAllUnconfirmedTransactionsRIBSB, _ := json.Marshal(dst.ListAllUnconfirmedTransactionsRIBSB)
		if string(jsonListAllUnconfirmedTransactionsRIBSB) == "{}" { // empty struct
			dst.ListAllUnconfirmedTransactionsRIBSB = nil
		} else {
			match++
		}
	} else {
		dst.ListAllUnconfirmedTransactionsRIBSB = nil
	}

	// try to unmarshal data into ListAllUnconfirmedTransactionsRIBSBC
	err = json.Unmarshal(data, &dst.ListAllUnconfirmedTransactionsRIBSBC)
	if err == nil {
		jsonListAllUnconfirmedTransactionsRIBSBC, _ := json.Marshal(dst.ListAllUnconfirmedTransactionsRIBSBC)
		if string(jsonListAllUnconfirmedTransactionsRIBSBC) == "{}" { // empty struct
			dst.ListAllUnconfirmedTransactionsRIBSBC = nil
		} else {
			match++
		}
	} else {
		dst.ListAllUnconfirmedTransactionsRIBSBC = nil
	}

	// try to unmarshal data into ListAllUnconfirmedTransactionsRIBSBSC
	err = json.Unmarshal(data, &dst.ListAllUnconfirmedTransactionsRIBSBSC)
	if err == nil {
		jsonListAllUnconfirmedTransactionsRIBSBSC, _ := json.Marshal(dst.ListAllUnconfirmedTransactionsRIBSBSC)
		if string(jsonListAllUnconfirmedTransactionsRIBSBSC) == "{}" { // empty struct
			dst.ListAllUnconfirmedTransactionsRIBSBSC = nil
		} else {
			match++
		}
	} else {
		dst.ListAllUnconfirmedTransactionsRIBSBSC = nil
	}

	// try to unmarshal data into ListAllUnconfirmedTransactionsRIBSD
	err = json.Unmarshal(data, &dst.ListAllUnconfirmedTransactionsRIBSD)
	if err == nil {
		jsonListAllUnconfirmedTransactionsRIBSD, _ := json.Marshal(dst.ListAllUnconfirmedTransactionsRIBSD)
		if string(jsonListAllUnconfirmedTransactionsRIBSD) == "{}" { // empty struct
			dst.ListAllUnconfirmedTransactionsRIBSD = nil
		} else {
			match++
		}
	} else {
		dst.ListAllUnconfirmedTransactionsRIBSD = nil
	}

	// try to unmarshal data into ListAllUnconfirmedTransactionsRIBSD2
	err = json.Unmarshal(data, &dst.ListAllUnconfirmedTransactionsRIBSD2)
	if err == nil {
		jsonListAllUnconfirmedTransactionsRIBSD2, _ := json.Marshal(dst.ListAllUnconfirmedTransactionsRIBSD2)
		if string(jsonListAllUnconfirmedTransactionsRIBSD2) == "{}" { // empty struct
			dst.ListAllUnconfirmedTransactionsRIBSD2 = nil
		} else {
			match++
		}
	} else {
		dst.ListAllUnconfirmedTransactionsRIBSD2 = nil
	}

	// try to unmarshal data into ListAllUnconfirmedTransactionsRIBSE
	err = json.Unmarshal(data, &dst.ListAllUnconfirmedTransactionsRIBSE)
	if err == nil {
		jsonListAllUnconfirmedTransactionsRIBSE, _ := json.Marshal(dst.ListAllUnconfirmedTransactionsRIBSE)
		if string(jsonListAllUnconfirmedTransactionsRIBSE) == "{}" { // empty struct
			dst.ListAllUnconfirmedTransactionsRIBSE = nil
		} else {
			match++
		}
	} else {
		dst.ListAllUnconfirmedTransactionsRIBSE = nil
	}

	// try to unmarshal data into ListAllUnconfirmedTransactionsRIBSEC
	err = json.Unmarshal(data, &dst.ListAllUnconfirmedTransactionsRIBSEC)
	if err == nil {
		jsonListAllUnconfirmedTransactionsRIBSEC, _ := json.Marshal(dst.ListAllUnconfirmedTransactionsRIBSEC)
		if string(jsonListAllUnconfirmedTransactionsRIBSEC) == "{}" { // empty struct
			dst.ListAllUnconfirmedTransactionsRIBSEC = nil
		} else {
			match++
		}
	} else {
		dst.ListAllUnconfirmedTransactionsRIBSEC = nil
	}

	// try to unmarshal data into ListAllUnconfirmedTransactionsRIBSL
	err = json.Unmarshal(data, &dst.ListAllUnconfirmedTransactionsRIBSL)
	if err == nil {
		jsonListAllUnconfirmedTransactionsRIBSL, _ := json.Marshal(dst.ListAllUnconfirmedTransactionsRIBSL)
		if string(jsonListAllUnconfirmedTransactionsRIBSL) == "{}" { // empty struct
			dst.ListAllUnconfirmedTransactionsRIBSL = nil
		} else {
			match++
		}
	} else {
		dst.ListAllUnconfirmedTransactionsRIBSL = nil
	}

	// try to unmarshal data into ListAllUnconfirmedTransactionsRIBSZ
	err = json.Unmarshal(data, &dst.ListAllUnconfirmedTransactionsRIBSZ)
	if err == nil {
		jsonListAllUnconfirmedTransactionsRIBSZ, _ := json.Marshal(dst.ListAllUnconfirmedTransactionsRIBSZ)
		if string(jsonListAllUnconfirmedTransactionsRIBSZ) == "{}" { // empty struct
			dst.ListAllUnconfirmedTransactionsRIBSZ = nil
		} else {
			match++
		}
	} else {
		dst.ListAllUnconfirmedTransactionsRIBSZ = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListAllUnconfirmedTransactionsRIBSB = nil
		dst.ListAllUnconfirmedTransactionsRIBSBC = nil
		dst.ListAllUnconfirmedTransactionsRIBSBSC = nil
		dst.ListAllUnconfirmedTransactionsRIBSD = nil
		dst.ListAllUnconfirmedTransactionsRIBSD2 = nil
		dst.ListAllUnconfirmedTransactionsRIBSE = nil
		dst.ListAllUnconfirmedTransactionsRIBSEC = nil
		dst.ListAllUnconfirmedTransactionsRIBSL = nil
		dst.ListAllUnconfirmedTransactionsRIBSZ = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ListAllUnconfirmedTransactionsRIBS)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ListAllUnconfirmedTransactionsRIBS)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListAllUnconfirmedTransactionsRIBS) MarshalJSON() ([]byte, error) {
	if src.ListAllUnconfirmedTransactionsRIBSB != nil {
		return json.Marshal(&src.ListAllUnconfirmedTransactionsRIBSB)
	}

	if src.ListAllUnconfirmedTransactionsRIBSBC != nil {
		return json.Marshal(&src.ListAllUnconfirmedTransactionsRIBSBC)
	}

	if src.ListAllUnconfirmedTransactionsRIBSBSC != nil {
		return json.Marshal(&src.ListAllUnconfirmedTransactionsRIBSBSC)
	}

	if src.ListAllUnconfirmedTransactionsRIBSD != nil {
		return json.Marshal(&src.ListAllUnconfirmedTransactionsRIBSD)
	}

	if src.ListAllUnconfirmedTransactionsRIBSD2 != nil {
		return json.Marshal(&src.ListAllUnconfirmedTransactionsRIBSD2)
	}

	if src.ListAllUnconfirmedTransactionsRIBSE != nil {
		return json.Marshal(&src.ListAllUnconfirmedTransactionsRIBSE)
	}

	if src.ListAllUnconfirmedTransactionsRIBSEC != nil {
		return json.Marshal(&src.ListAllUnconfirmedTransactionsRIBSEC)
	}

	if src.ListAllUnconfirmedTransactionsRIBSL != nil {
		return json.Marshal(&src.ListAllUnconfirmedTransactionsRIBSL)
	}

	if src.ListAllUnconfirmedTransactionsRIBSZ != nil {
		return json.Marshal(&src.ListAllUnconfirmedTransactionsRIBSZ)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListAllUnconfirmedTransactionsRIBS) GetActualInstance() (interface{}) {
	if obj.ListAllUnconfirmedTransactionsRIBSB != nil {
		return obj.ListAllUnconfirmedTransactionsRIBSB
	}

	if obj.ListAllUnconfirmedTransactionsRIBSBC != nil {
		return obj.ListAllUnconfirmedTransactionsRIBSBC
	}

	if obj.ListAllUnconfirmedTransactionsRIBSBSC != nil {
		return obj.ListAllUnconfirmedTransactionsRIBSBSC
	}

	if obj.ListAllUnconfirmedTransactionsRIBSD != nil {
		return obj.ListAllUnconfirmedTransactionsRIBSD
	}

	if obj.ListAllUnconfirmedTransactionsRIBSD2 != nil {
		return obj.ListAllUnconfirmedTransactionsRIBSD2
	}

	if obj.ListAllUnconfirmedTransactionsRIBSE != nil {
		return obj.ListAllUnconfirmedTransactionsRIBSE
	}

	if obj.ListAllUnconfirmedTransactionsRIBSEC != nil {
		return obj.ListAllUnconfirmedTransactionsRIBSEC
	}

	if obj.ListAllUnconfirmedTransactionsRIBSL != nil {
		return obj.ListAllUnconfirmedTransactionsRIBSL
	}

	if obj.ListAllUnconfirmedTransactionsRIBSZ != nil {
		return obj.ListAllUnconfirmedTransactionsRIBSZ
	}

	// all schemas are nil
	return nil
}

type NullableListAllUnconfirmedTransactionsRIBS struct {
	value *ListAllUnconfirmedTransactionsRIBS
	isSet bool
}

func (v NullableListAllUnconfirmedTransactionsRIBS) Get() *ListAllUnconfirmedTransactionsRIBS {
	return v.value
}

func (v *NullableListAllUnconfirmedTransactionsRIBS) Set(val *ListAllUnconfirmedTransactionsRIBS) {
	v.value = val
	v.isSet = true
}

func (v NullableListAllUnconfirmedTransactionsRIBS) IsSet() bool {
	return v.isSet
}

func (v *NullableListAllUnconfirmedTransactionsRIBS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAllUnconfirmedTransactionsRIBS(val *ListAllUnconfirmedTransactionsRIBS) *NullableListAllUnconfirmedTransactionsRIBS {
	return &NullableListAllUnconfirmedTransactionsRIBS{value: val, isSet: true}
}

func (v NullableListAllUnconfirmedTransactionsRIBS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAllUnconfirmedTransactionsRIBS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


