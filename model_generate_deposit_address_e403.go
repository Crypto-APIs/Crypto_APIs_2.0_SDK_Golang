/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GenerateDepositAddressE403 - struct for GenerateDepositAddressE403
type GenerateDepositAddressE403 struct {
	BannedIpAddress *BannedIpAddress
	EndpointNotAllowedForApiKey *EndpointNotAllowedForApiKey
	EndpointNotAllowedForPlan *EndpointNotAllowedForPlan
	FeatureMainnetsNotAllowedForPlan *FeatureMainnetsNotAllowedForPlan
	WalletAsAServiceDepositAddressesLimitReached *WalletAsAServiceDepositAddressesLimitReached
	WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType *WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType
}

// BannedIpAddressAsGenerateDepositAddressE403 is a convenience function that returns BannedIpAddress wrapped in GenerateDepositAddressE403
func BannedIpAddressAsGenerateDepositAddressE403(v *BannedIpAddress) GenerateDepositAddressE403 {
	return GenerateDepositAddressE403{
		BannedIpAddress: v,
	}
}

// EndpointNotAllowedForApiKeyAsGenerateDepositAddressE403 is a convenience function that returns EndpointNotAllowedForApiKey wrapped in GenerateDepositAddressE403
func EndpointNotAllowedForApiKeyAsGenerateDepositAddressE403(v *EndpointNotAllowedForApiKey) GenerateDepositAddressE403 {
	return GenerateDepositAddressE403{
		EndpointNotAllowedForApiKey: v,
	}
}

// EndpointNotAllowedForPlanAsGenerateDepositAddressE403 is a convenience function that returns EndpointNotAllowedForPlan wrapped in GenerateDepositAddressE403
func EndpointNotAllowedForPlanAsGenerateDepositAddressE403(v *EndpointNotAllowedForPlan) GenerateDepositAddressE403 {
	return GenerateDepositAddressE403{
		EndpointNotAllowedForPlan: v,
	}
}

// FeatureMainnetsNotAllowedForPlanAsGenerateDepositAddressE403 is a convenience function that returns FeatureMainnetsNotAllowedForPlan wrapped in GenerateDepositAddressE403
func FeatureMainnetsNotAllowedForPlanAsGenerateDepositAddressE403(v *FeatureMainnetsNotAllowedForPlan) GenerateDepositAddressE403 {
	return GenerateDepositAddressE403{
		FeatureMainnetsNotAllowedForPlan: v,
	}
}

// WalletAsAServiceDepositAddressesLimitReachedAsGenerateDepositAddressE403 is a convenience function that returns WalletAsAServiceDepositAddressesLimitReached wrapped in GenerateDepositAddressE403
func WalletAsAServiceDepositAddressesLimitReachedAsGenerateDepositAddressE403(v *WalletAsAServiceDepositAddressesLimitReached) GenerateDepositAddressE403 {
	return GenerateDepositAddressE403{
		WalletAsAServiceDepositAddressesLimitReached: v,
	}
}

// WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletTypeAsGenerateDepositAddressE403 is a convenience function that returns WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType wrapped in GenerateDepositAddressE403
func WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletTypeAsGenerateDepositAddressE403(v *WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType) GenerateDepositAddressE403 {
	return GenerateDepositAddressE403{
		WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GenerateDepositAddressE403) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BannedIpAddress
	err = newStrictDecoder(data).Decode(&dst.BannedIpAddress)
	if err == nil {
		jsonBannedIpAddress, _ := json.Marshal(dst.BannedIpAddress)
		if string(jsonBannedIpAddress) == "{}" { // empty struct
			dst.BannedIpAddress = nil
		} else {
			match++
		}
	} else {
		dst.BannedIpAddress = nil
	}

	// try to unmarshal data into EndpointNotAllowedForApiKey
	err = newStrictDecoder(data).Decode(&dst.EndpointNotAllowedForApiKey)
	if err == nil {
		jsonEndpointNotAllowedForApiKey, _ := json.Marshal(dst.EndpointNotAllowedForApiKey)
		if string(jsonEndpointNotAllowedForApiKey) == "{}" { // empty struct
			dst.EndpointNotAllowedForApiKey = nil
		} else {
			match++
		}
	} else {
		dst.EndpointNotAllowedForApiKey = nil
	}

	// try to unmarshal data into EndpointNotAllowedForPlan
	err = newStrictDecoder(data).Decode(&dst.EndpointNotAllowedForPlan)
	if err == nil {
		jsonEndpointNotAllowedForPlan, _ := json.Marshal(dst.EndpointNotAllowedForPlan)
		if string(jsonEndpointNotAllowedForPlan) == "{}" { // empty struct
			dst.EndpointNotAllowedForPlan = nil
		} else {
			match++
		}
	} else {
		dst.EndpointNotAllowedForPlan = nil
	}

	// try to unmarshal data into FeatureMainnetsNotAllowedForPlan
	err = newStrictDecoder(data).Decode(&dst.FeatureMainnetsNotAllowedForPlan)
	if err == nil {
		jsonFeatureMainnetsNotAllowedForPlan, _ := json.Marshal(dst.FeatureMainnetsNotAllowedForPlan)
		if string(jsonFeatureMainnetsNotAllowedForPlan) == "{}" { // empty struct
			dst.FeatureMainnetsNotAllowedForPlan = nil
		} else {
			match++
		}
	} else {
		dst.FeatureMainnetsNotAllowedForPlan = nil
	}

	// try to unmarshal data into WalletAsAServiceDepositAddressesLimitReached
	err = newStrictDecoder(data).Decode(&dst.WalletAsAServiceDepositAddressesLimitReached)
	if err == nil {
		jsonWalletAsAServiceDepositAddressesLimitReached, _ := json.Marshal(dst.WalletAsAServiceDepositAddressesLimitReached)
		if string(jsonWalletAsAServiceDepositAddressesLimitReached) == "{}" { // empty struct
			dst.WalletAsAServiceDepositAddressesLimitReached = nil
		} else {
			match++
		}
	} else {
		dst.WalletAsAServiceDepositAddressesLimitReached = nil
	}

	// try to unmarshal data into WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType
	err = newStrictDecoder(data).Decode(&dst.WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType)
	if err == nil {
		jsonWalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType, _ := json.Marshal(dst.WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType)
		if string(jsonWalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType) == "{}" { // empty struct
			dst.WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType = nil
		} else {
			match++
		}
	} else {
		dst.WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BannedIpAddress = nil
		dst.EndpointNotAllowedForApiKey = nil
		dst.EndpointNotAllowedForPlan = nil
		dst.FeatureMainnetsNotAllowedForPlan = nil
		dst.WalletAsAServiceDepositAddressesLimitReached = nil
		dst.WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GenerateDepositAddressE403)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GenerateDepositAddressE403)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GenerateDepositAddressE403) MarshalJSON() ([]byte, error) {
	if src.BannedIpAddress != nil {
		return json.Marshal(&src.BannedIpAddress)
	}

	if src.EndpointNotAllowedForApiKey != nil {
		return json.Marshal(&src.EndpointNotAllowedForApiKey)
	}

	if src.EndpointNotAllowedForPlan != nil {
		return json.Marshal(&src.EndpointNotAllowedForPlan)
	}

	if src.FeatureMainnetsNotAllowedForPlan != nil {
		return json.Marshal(&src.FeatureMainnetsNotAllowedForPlan)
	}

	if src.WalletAsAServiceDepositAddressesLimitReached != nil {
		return json.Marshal(&src.WalletAsAServiceDepositAddressesLimitReached)
	}

	if src.WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType != nil {
		return json.Marshal(&src.WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GenerateDepositAddressE403) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BannedIpAddress != nil {
		return obj.BannedIpAddress
	}

	if obj.EndpointNotAllowedForApiKey != nil {
		return obj.EndpointNotAllowedForApiKey
	}

	if obj.EndpointNotAllowedForPlan != nil {
		return obj.EndpointNotAllowedForPlan
	}

	if obj.FeatureMainnetsNotAllowedForPlan != nil {
		return obj.FeatureMainnetsNotAllowedForPlan
	}

	if obj.WalletAsAServiceDepositAddressesLimitReached != nil {
		return obj.WalletAsAServiceDepositAddressesLimitReached
	}

	if obj.WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType != nil {
		return obj.WalletAsAServiceProvidedNetworkIsNotSuitableForThisWalletType
	}

	// all schemas are nil
	return nil
}

type NullableGenerateDepositAddressE403 struct {
	value *GenerateDepositAddressE403
	isSet bool
}

func (v NullableGenerateDepositAddressE403) Get() *GenerateDepositAddressE403 {
	return v.value
}

func (v *NullableGenerateDepositAddressE403) Set(val *GenerateDepositAddressE403) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateDepositAddressE403) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateDepositAddressE403) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateDepositAddressE403(val *GenerateDepositAddressE403) *NullableGenerateDepositAddressE403 {
	return &NullableGenerateDepositAddressE403{value: val, isSet: true}
}

func (v NullableGenerateDepositAddressE403) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateDepositAddressE403) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


