/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// EstimateTokenGasLimitRI struct for EstimateTokenGasLimitRI
type EstimateTokenGasLimitRI struct {
	// Represents the amount of gas used by this specific transaction alone.
	GasLimit string `json:"gasLimit"`
}

// NewEstimateTokenGasLimitRI instantiates a new EstimateTokenGasLimitRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimateTokenGasLimitRI(gasLimit string) *EstimateTokenGasLimitRI {
	this := EstimateTokenGasLimitRI{}
	this.GasLimit = gasLimit
	return &this
}

// NewEstimateTokenGasLimitRIWithDefaults instantiates a new EstimateTokenGasLimitRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimateTokenGasLimitRIWithDefaults() *EstimateTokenGasLimitRI {
	this := EstimateTokenGasLimitRI{}
	return &this
}

// GetGasLimit returns the GasLimit field value
func (o *EstimateTokenGasLimitRI) GetGasLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value
// and a boolean to check if the value has been set.
func (o *EstimateTokenGasLimitRI) GetGasLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasLimit, true
}

// SetGasLimit sets field value
func (o *EstimateTokenGasLimitRI) SetGasLimit(v string) {
	o.GasLimit = v
}

func (o EstimateTokenGasLimitRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gasLimit"] = o.GasLimit
	}
	return json.Marshal(toSerialize)
}

type NullableEstimateTokenGasLimitRI struct {
	value *EstimateTokenGasLimitRI
	isSet bool
}

func (v NullableEstimateTokenGasLimitRI) Get() *EstimateTokenGasLimitRI {
	return v.value
}

func (v *NullableEstimateTokenGasLimitRI) Set(val *EstimateTokenGasLimitRI) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateTokenGasLimitRI) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateTokenGasLimitRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateTokenGasLimitRI(val *EstimateTokenGasLimitRI) *NullableEstimateTokenGasLimitRI {
	return &NullableEstimateTokenGasLimitRI{value: val, isSet: true}
}

func (v NullableEstimateTokenGasLimitRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateTokenGasLimitRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


