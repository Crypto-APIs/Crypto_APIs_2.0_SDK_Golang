/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// NewUnconfirmedCoinsTransactionsRI struct for NewUnconfirmedCoinsTransactionsRI
type NewUnconfirmedCoinsTransactionsRI struct {
	// Represents the Secret Key value provided by the customer. This field is used for security purposes during the callback notification, in order to prove the sender of the callback as Crypto APIs. For more information please see our [Documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-security).
	CallbackSecretKey string `json:"callbackSecretKey"`
	// Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs.
	CallbackUrl string `json:"callbackUrl"`
	// Represents the number of confirmations, i.e. the amount of blocks that have been built on top of this block.
	ConfirmationsCount int32 `json:"confirmationsCount"`
	// Defines the specific time/date when the subscription was created in Unix Timestamp.
	CreatedTimestamp int32 `json:"createdTimestamp"`
	// Defines the type of the specific event available for the customer to subscribe to for callback notification.
	EventType string `json:"eventType"`
	// Defines whether the subscription is active or not. Set as boolean.
	IsActive bool `json:"isActive"`
	// Represents a unique ID used to reference the specific callback subscription.
	ReferenceId string `json:"referenceId"`
	// Represents the unique identification string that defines the transaction.
	TransactionId string `json:"transactionId"`
}

// NewNewUnconfirmedCoinsTransactionsRI instantiates a new NewUnconfirmedCoinsTransactionsRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewUnconfirmedCoinsTransactionsRI(callbackSecretKey string, callbackUrl string, confirmationsCount int32, createdTimestamp int32, eventType string, isActive bool, referenceId string, transactionId string) *NewUnconfirmedCoinsTransactionsRI {
	this := NewUnconfirmedCoinsTransactionsRI{}
	this.CallbackSecretKey = callbackSecretKey
	this.CallbackUrl = callbackUrl
	this.ConfirmationsCount = confirmationsCount
	this.CreatedTimestamp = createdTimestamp
	this.EventType = eventType
	this.IsActive = isActive
	this.ReferenceId = referenceId
	this.TransactionId = transactionId
	return &this
}

// NewNewUnconfirmedCoinsTransactionsRIWithDefaults instantiates a new NewUnconfirmedCoinsTransactionsRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewUnconfirmedCoinsTransactionsRIWithDefaults() *NewUnconfirmedCoinsTransactionsRI {
	this := NewUnconfirmedCoinsTransactionsRI{}
	return &this
}

// GetCallbackSecretKey returns the CallbackSecretKey field value
func (o *NewUnconfirmedCoinsTransactionsRI) GetCallbackSecretKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallbackSecretKey
}

// GetCallbackSecretKeyOk returns a tuple with the CallbackSecretKey field value
// and a boolean to check if the value has been set.
func (o *NewUnconfirmedCoinsTransactionsRI) GetCallbackSecretKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CallbackSecretKey, true
}

// SetCallbackSecretKey sets field value
func (o *NewUnconfirmedCoinsTransactionsRI) SetCallbackSecretKey(v string) {
	o.CallbackSecretKey = v
}

// GetCallbackUrl returns the CallbackUrl field value
func (o *NewUnconfirmedCoinsTransactionsRI) GetCallbackUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value
// and a boolean to check if the value has been set.
func (o *NewUnconfirmedCoinsTransactionsRI) GetCallbackUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CallbackUrl, true
}

// SetCallbackUrl sets field value
func (o *NewUnconfirmedCoinsTransactionsRI) SetCallbackUrl(v string) {
	o.CallbackUrl = v
}

// GetConfirmationsCount returns the ConfirmationsCount field value
func (o *NewUnconfirmedCoinsTransactionsRI) GetConfirmationsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConfirmationsCount
}

// GetConfirmationsCountOk returns a tuple with the ConfirmationsCount field value
// and a boolean to check if the value has been set.
func (o *NewUnconfirmedCoinsTransactionsRI) GetConfirmationsCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfirmationsCount, true
}

// SetConfirmationsCount sets field value
func (o *NewUnconfirmedCoinsTransactionsRI) SetConfirmationsCount(v int32) {
	o.ConfirmationsCount = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *NewUnconfirmedCoinsTransactionsRI) GetCreatedTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *NewUnconfirmedCoinsTransactionsRI) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *NewUnconfirmedCoinsTransactionsRI) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = v
}

// GetEventType returns the EventType field value
func (o *NewUnconfirmedCoinsTransactionsRI) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *NewUnconfirmedCoinsTransactionsRI) GetEventTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *NewUnconfirmedCoinsTransactionsRI) SetEventType(v string) {
	o.EventType = v
}

// GetIsActive returns the IsActive field value
func (o *NewUnconfirmedCoinsTransactionsRI) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *NewUnconfirmedCoinsTransactionsRI) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *NewUnconfirmedCoinsTransactionsRI) SetIsActive(v bool) {
	o.IsActive = v
}

// GetReferenceId returns the ReferenceId field value
func (o *NewUnconfirmedCoinsTransactionsRI) GetReferenceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
func (o *NewUnconfirmedCoinsTransactionsRI) GetReferenceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ReferenceId, true
}

// SetReferenceId sets field value
func (o *NewUnconfirmedCoinsTransactionsRI) SetReferenceId(v string) {
	o.ReferenceId = v
}

// GetTransactionId returns the TransactionId field value
func (o *NewUnconfirmedCoinsTransactionsRI) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *NewUnconfirmedCoinsTransactionsRI) GetTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *NewUnconfirmedCoinsTransactionsRI) SetTransactionId(v string) {
	o.TransactionId = v
}

func (o NewUnconfirmedCoinsTransactionsRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["callbackSecretKey"] = o.CallbackSecretKey
	}
	if true {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	if true {
		toSerialize["confirmationsCount"] = o.ConfirmationsCount
	}
	if true {
		toSerialize["createdTimestamp"] = o.CreatedTimestamp
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["isActive"] = o.IsActive
	}
	if true {
		toSerialize["referenceId"] = o.ReferenceId
	}
	if true {
		toSerialize["transactionId"] = o.TransactionId
	}
	return json.Marshal(toSerialize)
}

type NullableNewUnconfirmedCoinsTransactionsRI struct {
	value *NewUnconfirmedCoinsTransactionsRI
	isSet bool
}

func (v NullableNewUnconfirmedCoinsTransactionsRI) Get() *NewUnconfirmedCoinsTransactionsRI {
	return v.value
}

func (v *NullableNewUnconfirmedCoinsTransactionsRI) Set(val *NewUnconfirmedCoinsTransactionsRI) {
	v.value = val
	v.isSet = true
}

func (v NullableNewUnconfirmedCoinsTransactionsRI) IsSet() bool {
	return v.isSet
}

func (v *NullableNewUnconfirmedCoinsTransactionsRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewUnconfirmedCoinsTransactionsRI(val *NewUnconfirmedCoinsTransactionsRI) *NullableNewUnconfirmedCoinsTransactionsRI {
	return &NullableNewUnconfirmedCoinsTransactionsRI{value: val, isSet: true}
}

func (v NullableNewUnconfirmedCoinsTransactionsRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewUnconfirmedCoinsTransactionsRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


