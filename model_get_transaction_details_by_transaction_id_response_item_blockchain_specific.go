/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific - struct for GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific
type GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific struct {
	GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin
	GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash
	GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash
	GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin
	GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum
	GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic
	GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin
}

// GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific is a convenience function that returns GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin wrapped in GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific
func GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific(v *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin) GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific {
	return GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific{ GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin: v}
}

// GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCashAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific is a convenience function that returns GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash wrapped in GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific
func GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCashAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific(v *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash) GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific {
	return GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific{ GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash: v}
}

// GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDashAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific is a convenience function that returns GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash wrapped in GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific
func GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDashAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific(v *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash) GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific {
	return GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific{ GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash: v}
}

// GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoinAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific is a convenience function that returns GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin wrapped in GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific
func GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoinAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific(v *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin) GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific {
	return GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific{ GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin: v}
}

// GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific is a convenience function that returns GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum wrapped in GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific
func GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific(v *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum) GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific {
	return GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific{ GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum: v}
}

// GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassicAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific is a convenience function that returns GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic wrapped in GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific
func GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassicAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific(v *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic) GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific {
	return GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific{ GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic: v}
}

// GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoinAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific is a convenience function that returns GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin wrapped in GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific
func GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoinAsGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific(v *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin) GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific {
	return GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific{ GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin)
		if string(jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash)
		if string(jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash)
		if string(jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin)
		if string(jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum)
		if string(jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic)
		if string(jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin)
		if string(jsonGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin = nil
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash = nil
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash = nil
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin = nil
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum = nil
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic = nil
		dst.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	if src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin)
	}

	if src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash)
	}

	if src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash)
	}

	if src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin)
	}

	if src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum)
	}

	if src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic)
	}

	if src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) GetActualInstance() (interface{}) {
	if obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin != nil {
		return obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin
	}

	if obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash != nil {
		return obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash
	}

	if obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash != nil {
		return obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash
	}

	if obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin != nil {
		return obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin
	}

	if obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum != nil {
		return obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum
	}

	if obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic != nil {
		return obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic
	}

	if obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin != nil {
		return obj.GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin
	}

	// all schemas are nil
	return nil
}

type NullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific struct {
	value *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific
	isSet bool
}

func (v NullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) Get() *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific {
	return v.value
}

func (v *NullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) Set(val *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific(val *GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) *NullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific {
	return &NullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific{value: val, isSet: true}
}

func (v NullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


