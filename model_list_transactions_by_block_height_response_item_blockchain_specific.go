/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// ListTransactionsByBlockHeightResponseItemBlockchainSpecific - struct for ListTransactionsByBlockHeightResponseItemBlockchainSpecific
type ListTransactionsByBlockHeightResponseItemBlockchainSpecific struct {
	ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin *ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin
	ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash *ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash
	ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash *ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash
	ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin *ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin
	ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum *ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum
	ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic *ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic
	ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin *ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin
}

// ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinAsListTransactionsByBlockHeightResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin wrapped in ListTransactionsByBlockHeightResponseItemBlockchainSpecific
func ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinAsListTransactionsByBlockHeightResponseItemBlockchainSpecific(v *ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin) ListTransactionsByBlockHeightResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHeightResponseItemBlockchainSpecific{ ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin: v}
}

// ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCashAsListTransactionsByBlockHeightResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash wrapped in ListTransactionsByBlockHeightResponseItemBlockchainSpecific
func ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCashAsListTransactionsByBlockHeightResponseItemBlockchainSpecific(v *ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash) ListTransactionsByBlockHeightResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHeightResponseItemBlockchainSpecific{ ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash: v}
}

// ListTransactionsByBlockHeightResponseItemBlockchainSpecificDashAsListTransactionsByBlockHeightResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash wrapped in ListTransactionsByBlockHeightResponseItemBlockchainSpecific
func ListTransactionsByBlockHeightResponseItemBlockchainSpecificDashAsListTransactionsByBlockHeightResponseItemBlockchainSpecific(v *ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash) ListTransactionsByBlockHeightResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHeightResponseItemBlockchainSpecific{ ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash: v}
}

// ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoinAsListTransactionsByBlockHeightResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin wrapped in ListTransactionsByBlockHeightResponseItemBlockchainSpecific
func ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoinAsListTransactionsByBlockHeightResponseItemBlockchainSpecific(v *ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin) ListTransactionsByBlockHeightResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHeightResponseItemBlockchainSpecific{ ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin: v}
}

// ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumAsListTransactionsByBlockHeightResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum wrapped in ListTransactionsByBlockHeightResponseItemBlockchainSpecific
func ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumAsListTransactionsByBlockHeightResponseItemBlockchainSpecific(v *ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum) ListTransactionsByBlockHeightResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHeightResponseItemBlockchainSpecific{ ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum: v}
}

// ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassicAsListTransactionsByBlockHeightResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic wrapped in ListTransactionsByBlockHeightResponseItemBlockchainSpecific
func ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassicAsListTransactionsByBlockHeightResponseItemBlockchainSpecific(v *ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic) ListTransactionsByBlockHeightResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHeightResponseItemBlockchainSpecific{ ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic: v}
}

// ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoinAsListTransactionsByBlockHeightResponseItemBlockchainSpecific is a convenience function that returns ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin wrapped in ListTransactionsByBlockHeightResponseItemBlockchainSpecific
func ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoinAsListTransactionsByBlockHeightResponseItemBlockchainSpecific(v *ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin) ListTransactionsByBlockHeightResponseItemBlockchainSpecific {
	return ListTransactionsByBlockHeightResponseItemBlockchainSpecific{ ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListTransactionsByBlockHeightResponseItemBlockchainSpecific) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin)
	if err == nil {
		jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin, _ := json.Marshal(dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin)
		if string(jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin) == "{}" { // empty struct
			dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash)
	if err == nil {
		jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash, _ := json.Marshal(dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash)
		if string(jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash) == "{}" { // empty struct
			dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash)
	if err == nil {
		jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificDash, _ := json.Marshal(dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash)
		if string(jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificDash) == "{}" { // empty struct
			dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin)
	if err == nil {
		jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin, _ := json.Marshal(dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin)
		if string(jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin) == "{}" { // empty struct
			dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum)
	if err == nil {
		jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum, _ := json.Marshal(dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum)
		if string(jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum) == "{}" { // empty struct
			dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic)
	if err == nil {
		jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic, _ := json.Marshal(dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic)
		if string(jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic) == "{}" { // empty struct
			dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic = nil
	}

	// try to unmarshal data into ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin
	err = json.Unmarshal(data, &dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin)
	if err == nil {
		jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin, _ := json.Marshal(dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin)
		if string(jsonListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin) == "{}" { // empty struct
			dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin = nil
		} else {
			match++
		}
	} else {
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin = nil
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash = nil
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash = nil
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin = nil
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum = nil
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic = nil
		dst.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ListTransactionsByBlockHeightResponseItemBlockchainSpecific)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ListTransactionsByBlockHeightResponseItemBlockchainSpecific)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListTransactionsByBlockHeightResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	if src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin != nil {
		return json.Marshal(&src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin)
	}

	if src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash != nil {
		return json.Marshal(&src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash)
	}

	if src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash != nil {
		return json.Marshal(&src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash)
	}

	if src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin != nil {
		return json.Marshal(&src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin)
	}

	if src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum != nil {
		return json.Marshal(&src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum)
	}

	if src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic != nil {
		return json.Marshal(&src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic)
	}

	if src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin != nil {
		return json.Marshal(&src.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListTransactionsByBlockHeightResponseItemBlockchainSpecific) GetActualInstance() (interface{}) {
	if obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin != nil {
		return obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin
	}

	if obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash != nil {
		return obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash
	}

	if obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash != nil {
		return obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash
	}

	if obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin != nil {
		return obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin
	}

	if obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum != nil {
		return obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum
	}

	if obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic != nil {
		return obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic
	}

	if obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin != nil {
		return obj.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin
	}

	// all schemas are nil
	return nil
}

type NullableListTransactionsByBlockHeightResponseItemBlockchainSpecific struct {
	value *ListTransactionsByBlockHeightResponseItemBlockchainSpecific
	isSet bool
}

func (v NullableListTransactionsByBlockHeightResponseItemBlockchainSpecific) Get() *ListTransactionsByBlockHeightResponseItemBlockchainSpecific {
	return v.value
}

func (v *NullableListTransactionsByBlockHeightResponseItemBlockchainSpecific) Set(val *ListTransactionsByBlockHeightResponseItemBlockchainSpecific) {
	v.value = val
	v.isSet = true
}

func (v NullableListTransactionsByBlockHeightResponseItemBlockchainSpecific) IsSet() bool {
	return v.isSet
}

func (v *NullableListTransactionsByBlockHeightResponseItemBlockchainSpecific) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTransactionsByBlockHeightResponseItemBlockchainSpecific(val *ListTransactionsByBlockHeightResponseItemBlockchainSpecific) *NullableListTransactionsByBlockHeightResponseItemBlockchainSpecific {
	return &NullableListTransactionsByBlockHeightResponseItemBlockchainSpecific{value: val, isSet: true}
}

func (v NullableListTransactionsByBlockHeightResponseItemBlockchainSpecific) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTransactionsByBlockHeightResponseItemBlockchainSpecific) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


