/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// DecodeRawTransactionHexRISD2 Dogecoin
type DecodeRawTransactionHexRISD2 struct {
	// Represents the time at which a particular transaction can be added to the blockchain.
	Locktime int32 `json:"locktime"`
	// Represents the same as transactionId for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols hash is different from transactionId for SegWit transactions.
	TransactionHash string `json:"transactionHash"`
	// Represents the virtual size of this transaction.
	VSize int32 `json:"vSize"`
	// Represents transaction version number
	Version int32 `json:"version"`
	// Represents the transaction inputs.
	Vin []DecodeRawTransactionHexRISD2Vin `json:"vin"`
	// Represents the transaction outputs.
	Vout []DecodeRawTransactionHexRISD2Vout `json:"vout"`
	// Represents the size of a block, measured in weight units and including the segwit discount.
	Weight *int32 `json:"weight,omitempty"`
}

// NewDecodeRawTransactionHexRISD2 instantiates a new DecodeRawTransactionHexRISD2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecodeRawTransactionHexRISD2(locktime int32, transactionHash string, vSize int32, version int32, vin []DecodeRawTransactionHexRISD2Vin, vout []DecodeRawTransactionHexRISD2Vout) *DecodeRawTransactionHexRISD2 {
	this := DecodeRawTransactionHexRISD2{}
	this.Locktime = locktime
	this.TransactionHash = transactionHash
	this.VSize = vSize
	this.Version = version
	this.Vin = vin
	this.Vout = vout
	return &this
}

// NewDecodeRawTransactionHexRISD2WithDefaults instantiates a new DecodeRawTransactionHexRISD2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecodeRawTransactionHexRISD2WithDefaults() *DecodeRawTransactionHexRISD2 {
	this := DecodeRawTransactionHexRISD2{}
	return &this
}

// GetLocktime returns the Locktime field value
func (o *DecodeRawTransactionHexRISD2) GetLocktime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Locktime
}

// GetLocktimeOk returns a tuple with the Locktime field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISD2) GetLocktimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locktime, true
}

// SetLocktime sets field value
func (o *DecodeRawTransactionHexRISD2) SetLocktime(v int32) {
	o.Locktime = v
}

// GetTransactionHash returns the TransactionHash field value
func (o *DecodeRawTransactionHexRISD2) GetTransactionHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISD2) GetTransactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionHash, true
}

// SetTransactionHash sets field value
func (o *DecodeRawTransactionHexRISD2) SetTransactionHash(v string) {
	o.TransactionHash = v
}

// GetVSize returns the VSize field value
func (o *DecodeRawTransactionHexRISD2) GetVSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VSize
}

// GetVSizeOk returns a tuple with the VSize field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISD2) GetVSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VSize, true
}

// SetVSize sets field value
func (o *DecodeRawTransactionHexRISD2) SetVSize(v int32) {
	o.VSize = v
}

// GetVersion returns the Version field value
func (o *DecodeRawTransactionHexRISD2) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISD2) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DecodeRawTransactionHexRISD2) SetVersion(v int32) {
	o.Version = v
}

// GetVin returns the Vin field value
func (o *DecodeRawTransactionHexRISD2) GetVin() []DecodeRawTransactionHexRISD2Vin {
	if o == nil {
		var ret []DecodeRawTransactionHexRISD2Vin
		return ret
	}

	return o.Vin
}

// GetVinOk returns a tuple with the Vin field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISD2) GetVinOk() ([]DecodeRawTransactionHexRISD2Vin, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vin, true
}

// SetVin sets field value
func (o *DecodeRawTransactionHexRISD2) SetVin(v []DecodeRawTransactionHexRISD2Vin) {
	o.Vin = v
}

// GetVout returns the Vout field value
func (o *DecodeRawTransactionHexRISD2) GetVout() []DecodeRawTransactionHexRISD2Vout {
	if o == nil {
		var ret []DecodeRawTransactionHexRISD2Vout
		return ret
	}

	return o.Vout
}

// GetVoutOk returns a tuple with the Vout field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISD2) GetVoutOk() ([]DecodeRawTransactionHexRISD2Vout, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vout, true
}

// SetVout sets field value
func (o *DecodeRawTransactionHexRISD2) SetVout(v []DecodeRawTransactionHexRISD2Vout) {
	o.Vout = v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *DecodeRawTransactionHexRISD2) GetWeight() int32 {
	if o == nil || o.Weight == nil {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRISD2) GetWeightOk() (*int32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *DecodeRawTransactionHexRISD2) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *DecodeRawTransactionHexRISD2) SetWeight(v int32) {
	o.Weight = &v
}

func (o DecodeRawTransactionHexRISD2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["locktime"] = o.Locktime
	}
	if true {
		toSerialize["transactionHash"] = o.TransactionHash
	}
	if true {
		toSerialize["vSize"] = o.VSize
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["vin"] = o.Vin
	}
	if true {
		toSerialize["vout"] = o.Vout
	}
	if o.Weight != nil {
		toSerialize["weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableDecodeRawTransactionHexRISD2 struct {
	value *DecodeRawTransactionHexRISD2
	isSet bool
}

func (v NullableDecodeRawTransactionHexRISD2) Get() *DecodeRawTransactionHexRISD2 {
	return v.value
}

func (v *NullableDecodeRawTransactionHexRISD2) Set(val *DecodeRawTransactionHexRISD2) {
	v.value = val
	v.isSet = true
}

func (v NullableDecodeRawTransactionHexRISD2) IsSet() bool {
	return v.isSet
}

func (v *NullableDecodeRawTransactionHexRISD2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecodeRawTransactionHexRISD2(val *DecodeRawTransactionHexRISD2) *NullableDecodeRawTransactionHexRISD2 {
	return &NullableDecodeRawTransactionHexRISD2{value: val, isSet: true}
}

func (v NullableDecodeRawTransactionHexRISD2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecodeRawTransactionHexRISD2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


