/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ValidateAddressRI struct for ValidateAddressRI
type ValidateAddressRI struct {
	// Represents the specific address that will be checked if it's valid or not.
	Address string `json:"address"`
	// Defines whether the address is valid or not. Set as boolean.
	IsValid bool `json:"isValid"`
}

// NewValidateAddressRI instantiates a new ValidateAddressRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateAddressRI(address string, isValid bool) *ValidateAddressRI {
	this := ValidateAddressRI{}
	this.Address = address
	this.IsValid = isValid
	return &this
}

// NewValidateAddressRIWithDefaults instantiates a new ValidateAddressRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateAddressRIWithDefaults() *ValidateAddressRI {
	this := ValidateAddressRI{}
	return &this
}

// GetAddress returns the Address field value
func (o *ValidateAddressRI) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *ValidateAddressRI) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *ValidateAddressRI) SetAddress(v string) {
	o.Address = v
}

// GetIsValid returns the IsValid field value
func (o *ValidateAddressRI) GetIsValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value
// and a boolean to check if the value has been set.
func (o *ValidateAddressRI) GetIsValidOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsValid, true
}

// SetIsValid sets field value
func (o *ValidateAddressRI) SetIsValid(v bool) {
	o.IsValid = v
}

func (o ValidateAddressRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["isValid"] = o.IsValid
	}
	return json.Marshal(toSerialize)
}

type NullableValidateAddressRI struct {
	value *ValidateAddressRI
	isSet bool
}

func (v NullableValidateAddressRI) Get() *ValidateAddressRI {
	return v.value
}

func (v *NullableValidateAddressRI) Set(val *ValidateAddressRI) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateAddressRI) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateAddressRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateAddressRI(val *ValidateAddressRI) *NullableValidateAddressRI {
	return &NullableValidateAddressRI{value: val, isSet: true}
}

func (v NullableValidateAddressRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateAddressRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


