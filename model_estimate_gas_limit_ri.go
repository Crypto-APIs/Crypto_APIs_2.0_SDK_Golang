/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// EstimateGasLimitRI struct for EstimateGasLimitRI
type EstimateGasLimitRI struct {
	// Represents the amount of gas used by this specific transaction alone.
	GasLimit string `json:"gasLimit"`
}

// NewEstimateGasLimitRI instantiates a new EstimateGasLimitRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimateGasLimitRI(gasLimit string) *EstimateGasLimitRI {
	this := EstimateGasLimitRI{}
	this.GasLimit = gasLimit
	return &this
}

// NewEstimateGasLimitRIWithDefaults instantiates a new EstimateGasLimitRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimateGasLimitRIWithDefaults() *EstimateGasLimitRI {
	this := EstimateGasLimitRI{}
	return &this
}

// GetGasLimit returns the GasLimit field value
func (o *EstimateGasLimitRI) GetGasLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value
// and a boolean to check if the value has been set.
func (o *EstimateGasLimitRI) GetGasLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasLimit, true
}

// SetGasLimit sets field value
func (o *EstimateGasLimitRI) SetGasLimit(v string) {
	o.GasLimit = v
}

func (o EstimateGasLimitRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gasLimit"] = o.GasLimit
	}
	return json.Marshal(toSerialize)
}

type NullableEstimateGasLimitRI struct {
	value *EstimateGasLimitRI
	isSet bool
}

func (v NullableEstimateGasLimitRI) Get() *EstimateGasLimitRI {
	return v.value
}

func (v *NullableEstimateGasLimitRI) Set(val *EstimateGasLimitRI) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateGasLimitRI) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateGasLimitRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateGasLimitRI(val *EstimateGasLimitRI) *NullableEstimateGasLimitRI {
	return &NullableEstimateGasLimitRI{value: val, isSet: true}
}

func (v NullableEstimateGasLimitRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateGasLimitRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


