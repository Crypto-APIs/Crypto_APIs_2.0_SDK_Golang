/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ListAllAssetsFromAllWalletsRICoinsInner struct for ListAllAssetsFromAllWalletsRICoinsInner
type ListAllAssetsFromAllWalletsRICoinsInner struct {
	// Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
	Blockchain string `json:"blockchain"`
	// Defines the total balance of the address that is confirmed. It doesn't include unconfirmed transactions.
	ConfirmedBalance string `json:"confirmedBalance"`
	// Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
	Network string `json:"network"`
	// Defines the total amount of all coins received to the address, based on confirmed transactions.
	TotalReceived string `json:"totalReceived"`
	// Defines the total amount of all spent by this address coins, based on confirmed transactions.
	TotalSpent string `json:"totalSpent"`
	// Represents the unit of the confirmed balance.
	Unit string `json:"unit"`
}

// NewListAllAssetsFromAllWalletsRICoinsInner instantiates a new ListAllAssetsFromAllWalletsRICoinsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListAllAssetsFromAllWalletsRICoinsInner(blockchain string, confirmedBalance string, network string, totalReceived string, totalSpent string, unit string) *ListAllAssetsFromAllWalletsRICoinsInner {
	this := ListAllAssetsFromAllWalletsRICoinsInner{}
	this.Blockchain = blockchain
	this.ConfirmedBalance = confirmedBalance
	this.Network = network
	this.TotalReceived = totalReceived
	this.TotalSpent = totalSpent
	this.Unit = unit
	return &this
}

// NewListAllAssetsFromAllWalletsRICoinsInnerWithDefaults instantiates a new ListAllAssetsFromAllWalletsRICoinsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListAllAssetsFromAllWalletsRICoinsInnerWithDefaults() *ListAllAssetsFromAllWalletsRICoinsInner {
	this := ListAllAssetsFromAllWalletsRICoinsInner{}
	return &this
}

// GetBlockchain returns the Blockchain field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetBlockchain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Blockchain
}

// GetBlockchainOk returns a tuple with the Blockchain field value
// and a boolean to check if the value has been set.
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetBlockchainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blockchain, true
}

// SetBlockchain sets field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) SetBlockchain(v string) {
	o.Blockchain = v
}

// GetConfirmedBalance returns the ConfirmedBalance field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetConfirmedBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfirmedBalance
}

// GetConfirmedBalanceOk returns a tuple with the ConfirmedBalance field value
// and a boolean to check if the value has been set.
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetConfirmedBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfirmedBalance, true
}

// SetConfirmedBalance sets field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) SetConfirmedBalance(v string) {
	o.ConfirmedBalance = v
}

// GetNetwork returns the Network field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) SetNetwork(v string) {
	o.Network = v
}

// GetTotalReceived returns the TotalReceived field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetTotalReceived() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalReceived
}

// GetTotalReceivedOk returns a tuple with the TotalReceived field value
// and a boolean to check if the value has been set.
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetTotalReceivedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalReceived, true
}

// SetTotalReceived sets field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) SetTotalReceived(v string) {
	o.TotalReceived = v
}

// GetTotalSpent returns the TotalSpent field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetTotalSpent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalSpent
}

// GetTotalSpentOk returns a tuple with the TotalSpent field value
// and a boolean to check if the value has been set.
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetTotalSpentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSpent, true
}

// SetTotalSpent sets field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) SetTotalSpent(v string) {
	o.TotalSpent = v
}

// GetUnit returns the Unit field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *ListAllAssetsFromAllWalletsRICoinsInner) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *ListAllAssetsFromAllWalletsRICoinsInner) SetUnit(v string) {
	o.Unit = v
}

func (o ListAllAssetsFromAllWalletsRICoinsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blockchain"] = o.Blockchain
	}
	if true {
		toSerialize["confirmedBalance"] = o.ConfirmedBalance
	}
	if true {
		toSerialize["network"] = o.Network
	}
	if true {
		toSerialize["totalReceived"] = o.TotalReceived
	}
	if true {
		toSerialize["totalSpent"] = o.TotalSpent
	}
	if true {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableListAllAssetsFromAllWalletsRICoinsInner struct {
	value *ListAllAssetsFromAllWalletsRICoinsInner
	isSet bool
}

func (v NullableListAllAssetsFromAllWalletsRICoinsInner) Get() *ListAllAssetsFromAllWalletsRICoinsInner {
	return v.value
}

func (v *NullableListAllAssetsFromAllWalletsRICoinsInner) Set(val *ListAllAssetsFromAllWalletsRICoinsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListAllAssetsFromAllWalletsRICoinsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListAllAssetsFromAllWalletsRICoinsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAllAssetsFromAllWalletsRICoinsInner(val *ListAllAssetsFromAllWalletsRICoinsInner) *NullableListAllAssetsFromAllWalletsRICoinsInner {
	return &NullableListAllAssetsFromAllWalletsRICoinsInner{value: val, isSet: true}
}

func (v NullableListAllAssetsFromAllWalletsRICoinsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAllAssetsFromAllWalletsRICoinsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


