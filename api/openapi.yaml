openapi: 3.0.3
info:
  contact:
    email: developers@cryptoapis.io
    name: CryptoAPIs Team
    url: https://cryptoapis.io
  description: Crypto APIs 2.0 is a complex and innovative infrastructure layer that
    radically simplifies the development of any Blockchain and Crypto related applications.
    Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum
    enthusiasts and crypto experts with the development of their blockchain applications.
    Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens
    and coins forwardings, callback functionalities, and much more.
  license:
    name: MIT
  termsOfService: https://cryptoapis.io/terms-conditions/
  title: CryptoAPIs
  version: 2.0.0
servers:
- description: REST API
  url: https://rest.cryptoapis.io/v2
security:
- ApiKey: []
tags:
- description: "## Introduction\r\n\r\nCrypto APIs 2.0 is a set of blockchain- and\
    \ crypto-related products which can help you reduce your development and infrastructure\
    \ costs. It's an infrastructure layer which significantly reduces your go to market\
    \ time.\r\n\r\n- **Blockchain Data** - by integrating it once you can retrieve\
    \ the most important data for the most common blockchains. Get results for each\
    \ supported blockchain protocol by changing only a single parameter. Get both\
    \ historical and real-time data, which can be unified, raw, read-only or segmented.\
    \ Quick response time of 25 ms is guaranteed by the scalable- and load-balanced\
    \ database where all data is synced and indexed. You can retrieve information\
    \ on blockchain data such as Blocks, Addresses, HD Wallets (xPub, yPub, zPub),\
    \ Balances, Unconfirmed Transactions, Confirmed Transactions Uncles, Epochs, Tokens,\
    \ Smart Contracts, Internal Transactions, Mempool, Fees, and more.\r\n\r\n- **Blockchain\
    \ Events** - works on the principle of the Webhook. You can subscribe for certain\
    \ events and get a callback notification every time they occur.  There is no need\
    \ of hosting or maintaining any node and the average delivery time is estimated\
    \ at 100 ms. Considered Events could include: a new block that has been mined,\
    \ new unconfirmed and mined transactions, a certain number of confirmations (blocks)\
    \ for a new transaction, and more.\r\n\r\n- **Blockchain Automations** -  By subscribing\
    \ for a certain automation based on a certain event you can get a callback when\
    \ it’s completed. Blockchain Automations don’t require taking care of hot (temporary)\
    \ addresses. Moreover, you can generate as many addresses as preferred and then\
    \ assign them to your users, where all received funds will be automatically moved\
    \ to your secure wallet (warm/cold). Such Automations could automatically move\
    \ received tokens and/or funds to another wallet.\r\n\r\n- **Blockchain Tools**\
    \ - tools that do not require any contact with the database, blockchain data,\
    \ nor the use of nodes. These Blockchain tools include actions such as checking\
    \ the validity of an address and fetching its type, preparing transactions, deriving\
    \ HD (xPub, yPub, zPub) addresses, receiving and changing them, and more.\r\n\r\
    \nCrypto APIs 2.0 offers different pricing plans to fit your specific needs. To\
    \ see Crypto APIs 2.0’s available subscription plans, please visit our [dedicated\
    \ website page]( https://cryptoapis.io/pricing).\r\n\r\nYou can download our OpenAPI\
    \ 3.0 Specification as the latest JSON from [here](https://developers.cryptoapis.io/download-latest-json).\r\
    \n\r\n{warning}This documentation and all API References apply **only** to Crypto\
    \ APIs 2.0.{/warning}"
  name: Overview‌
- description: "## Choose SDK\r\n\r\nCrypto APIs 2.0 Technical Documentation has included\
    \ vast and detailed information regarding the use of its API services. Additionally,\
    \ we have prepared various SDKs to help you get quickly started.\r\n\r\nYou can\
    \ pick one of our current SDK’s [here](https://developers.cryptoapis.io/sdkslibraries).\r\
    \n\r\n\r\n## Create an account\r\nTo get started with Crypto APIs 2.0 services\
    \ the first thing you need to do is create your account at https://dashboard.cryptoapis.io/login.\
    \ By creating an account you get access to a personalized Crypto APIs 2.0 Dashboard,\
    \ where you can monitor and control your API keys, requests, credits, tokens,\
    \ exchange accounts, and more. \r\n\r\nYou can create your Crypto APIs 2.0 account\
    \ manually by adding information to the required fields, or simply use the Social\
    \ Login provided for Google, GitHub and LinkedIn.\r\n\r\n{note}Please use a valid\
    \ email address you have access to, in order to be able to receive messages from\
    \ Crypto APIs 2.0 needed for user authentication, registration completion and\
    \ API use.{/note}\r\n\r\n\r\n## The Dashboard\r\nOnce you create an account, you\
    \ get access to a personalized Crypto APIs 2.0 [Dashboard](https://dashboard.cryptoapis.io/).\
    \ Through the dashboard is where you can choose and subscribe to a Crypto APIs\
    \ 2.0 blockchain product - Blockchain Data, Blockchain Events, Blockchain Tools,\
    \ or Blockchain Automations.\r\n\r\nFrom the Dashboard you can:\r\n\r\n- create\
    \ and manage API keys - for authorization of the API; \r\n- create and manage\
    \ callback URLs - set URLs for response;\r\n- monitor successful and failed requests,\
    \ credits, callbacks; \r\n- manage webhooks and tokens;\r\n- create and manage\
    \ exchange accounts, etc.\r\n\r\nThe Crypto APIs 2.0 Technical and Best use Documentation\
    \ is public and available to everyone. Still, support levels for a Crypto APIs\
    \ 2.0 product vary depending on your subscription.\r\n\r\n## Authenticate requests\r\
    \n\r\nTo use and make calls to any Crypto APIs 2.0 product, you must create an\
    \ API key, in order for your requests to be authenticated.\r\n\r\nAn API key is\
    \ a code unique to the user who generated it. It is used to identify the call\
    \ to the specific API and track the access to it and its usage. You can generate\
    \ your API key from within the Crypto APIs 2.0 [dashboard](https://dashboard.cryptoapis.io/account/api-keys)\
    \ by clicking on the “Create new API key” button. You can generate more than one\
    \ API key and use a single API key more than once. \r\n\r\nFor more information\
    \ on Authenticating requests, please see [“Authentication”](https://developers.cryptoapis.io/technical-documentation/general-information/authentication)\
    \ section."
  name: Getting Started
- description: "## Create API key\r\n\r\nAPI keys are required as an authentication\
    \ method with Crypto APIs 2.0 products. By using an API key you authenticate access\
    \ to the specific API. Without authentication access to the API is denied. \r\n\
    \r\nYou can generate and manage API keys from within the Crypto APIs 2.0 Dashboard\
    \ [here](https://dashboard.cryptoapis.io/account/api-keys). By clicking on “Create\
    \ new API key” you can enter a name and the system will generate a unique for\
    \ your user key for API authentication. Multiple keys can be generated. Old API\
    \ keys, that you no longer want to use, can be disabled from the same location.\r\
    \n\r\n## Use API key\r\n\r\nAPI keys are required for the authentication of the\
    \ calling program to the API. All Crypto APIs 2.0 keys use the same base URL \"\
    https://rest.cryptoapis.io\". They can be used in test environments such as: Development,\
    \ QA, and main Production environments.\r\n\r\nWe do not recommend using the same\
    \ API key for more than one environment. We do recommend to use a single key for\
    \ one specific environment - Testing, Production, etc. The API key is sensitive\
    \ private information that we strongly advise to have and keep restricted access\
    \ to it.\r\n\r\nContent-Type: application/json\r\nX-API-Key: my-api-key\r\n\r\n\
    {warning}It's important to secure your API Key against public access. The custom\
    \ header option is strongly recommended for a production environment.{/warning}\r\
    \n\r\n\r\n## API Credential Usage - Credits\r\n\r\nMost plans include a daily\
    \ limit or “hard stop” to the number of data calls that can be made and the results\
    \ provided by Crypto APIs 2.0. This limit is directly tied to your API Key usage\
    \ and number of credits purchased. Your daily credits will be reloaded at 0:00\
    \ AM UTC.\r\n\r\n{warning}It's important to understand that we will set your list\
    \ results to equal 100 by default. You can manually adjust these before making\
    \ a particular list call.{/warning}\r\n\r\nThe daily credit limit is tracked based\
    \ on API data calls and results provided with your key. Each credit is accounted\
    \ for and incremented 1:1, with the exception of:\r\n\r\n1. Error responses are\
    \ not included in this monthly limit;\r\n2. Paginated Endpoints: List based endpoints.\
    \ Credit allocation per API credentials is done for every 50 data results returned,\
    \ always rounded-up.\r\n3. Bundled/Batched API calls: Credit allocation per API\
    \ credentials is done for every 50 data results returned, always rounded-up.\r\
    \n\r\nThis is directly related to the API call Rate Limiting which is applied\
    \ to all Crypto APIs 2.0. For more information on API limiting and other ways\
    \ we limit data from our API, please see [“Data Flow Limiting”](https://developers.cryptoapis.io/technical-documentation/general-information/data-flow-limiting)\
    \ section."
  name: Authentication
- description: "## Supported Protocols and Networks\r\n\r\n| Blockchain protocol |\
    \ Network |\r\n| :---: | :---: |\r\n| Bitcoin | Mainnet, Testnet |\r\n| Ethereum\
    \ | Mainnet, Ropsten, Rinkeby |\r\n| XRP | Mainnet, Testnet |\r\n| Litecoin |\
    \ Mainnet, Testnet |\r\n| Bitcoin Cash | Mainnet, Testnet |\r\n| Dash | Mainnet,\
    \ Testnet |\r\n| Doge | Mainnet, Testnet |\r\n| Ethereum Classic | Mainnet, Mordor\
    \ |\r\n| Zilliqa | Mainnet |\r\n| BItcoin Vault | Mainnet, Testnet |\r\n\r\n\r\
    \n## Supported Blockchain Tokens and Layers\r\n\r\nWe support all token standards:\
    \ **Omni layer**, **ERC-20** and **ERC-721**. All tokens, based on these, are\
    \ also supported by Crypto APIs 2.0. Since the list is too long and new tokens\
    \ emerge every day, we cannot include it here. Nevertheless, you can view some\
    \ of the most famous tokens on our [website](https://cryptoapis.io/).\r\n\r\n\r\
    \n## Supported Omni Layer transaction types\r\n\r\nWe support the following Omni\
    \ layer transaction types for the providing of Blockchain data:\r\n\r\n1. Simple\
    \ Send\r\n2. DEx Purchase\r\n3. DEx Sell Offer\r\n4. DEx Accept Offer\r\n5. Close\
    \ Crowdsale\r\n6. Create Property - Fixed\r\n7. Create Property - Variable\r\n\
    8. Send To Owners\r\n9. Crowdsale Purchase\r\n10. Create Property - Manual\r\n\
    11. Grant Property Tokens\r\n12. Revoke Property Tokens\r\n13. Change Issuer Address\r\
    \n14. MetaDEx trade\r\n15. Feature Activation\r\n16. ALERT\r\n17. MetaDEx cancel-price\r\
    \n18. Send All\r\n19. MetaDEx cancel-ecosystem\r\n20. Enable Freezing\r\n21. Freeze\
    \ Property Tokens\r\n22. Disable Freezing\r\n23. MetaDEx cancel-pair\r\n24. Unfreeze\
    \ Property Tokens\r\n\r\n## Blockchain Units and Denominations\r\n \r\nEach blockchain\
    \ protocol has its own native decimal base denomination. The following is a reference\
    \ for how to convert Bitcoin- and Ethereum-based units.\r\n\r\nBitcoin has 8 decimal\
    \ places and the smallest unit is called a \"Satoshi\", in honor of the blockchain’\
    s creator, who is known as only Satoshi Nakamoto. 1 Satoshi is equal to 0.00000001\
    \ Bitcoin.\r\n\r\nEthereum, on the other hand, has 18 decimal places with the\
    \ smallest unit called a “wei”. 1 Wei is 0.000000000000000001 of the Ether.\r\n\
    \r\n### Bitcoin Denominations\r\n\r\n| Unit | Denomination |\r\n| :---: | :---:\
    \ |\r\n| 1 Bitcoin | = 100 000 000 Satoshi |\r\n| 1 Satoshi | = 0.00000001 Bitcoin\
    \ |\r\n| 1 μBTC (microbitcoin) | = 0.00000100 Bitcoin = 100 Satoshi |\r\n| mBTC\
    \ (millibitcoin) | = 0.00100000 Bitcoin = 100 000 Satoshi |\r\n| cBTC (centibitcoin\
    \ or bitcent) | = 0.01000000 Bitcoin = 1 000 000 Satoshi |\r\n| dBTC (decibit\
    \ or decibitcoin) | = 0.10000000 Bitcoin = 10 000 000 Satoshi |\r\n| daBTC (decabit\
    \ or decabitcoin) | = 10 Bitcoin = 1e9 Satoshi |\r\n\r\n### Ethereum Denominations\r\
    \n\r\n| Unit | Denomination |\r\n| :---: | :---: |\r\n| 1 Ether | = 1e18 Wei |\r\
    \n| 1 Wei | = 0.000000000000000001 Ether |\r\n| 1 Kwei (babbage) | = 1000 Wei\
    \ = 0.000000000000001 Ether |\r\n| 1 Mwei (lovelace) | = 1 000 000 Wei = 0.000000000001\
    \ Ether |\r\n| 1 Gwei (shannon) | = 1e9 Wei = 0.000000001 Ether |\r\n| 1 Twei\
    \ (szabo) | = 1e12 Wei = 0.000001 Ether |\r\n| 1 Pwei (finney) | = 1e15 Wei =\
    \ 0.001 Ether |"
  name: What we support
- description: "## List of errors\r\n\r\nAll requests with a response status code\
    \ different than 200 (successful HTTP) are considered as a failure of the particular\
    \ API call and referred to as “HTTPS errors”. When the response (error) is returned\
    \ an additional JSON is present in the body containing the error message. Depending\
    \ on what has gone wrong with the API call, the error message is different.\r\n\
    \r\nAs best practice we recommend to store all error messages somewhere along\
    \ with request data for further manual review.\r\n\r\nThe errors we use follow\
    \ the HTTP Error Codes Standard. \r\n\r\n| HTTP Status Code | Error it represents\
    \ |\r\n|:---:|:---:|\r\n|3xx | Redirection Error |\r\n|4xx | Client Error |\r\n\
    |5xx | Server Error |\r\n\r\n\r\nThe structure of the error **always** returns\
    \ the following values, as listed and described in the example:\r\n\r\n\r\n_**Example:**_\r\
    \n\r\n```\r\n{\r\n    \"apiVersion\": \"\", // The current API Version.\r\n  \
    \  \"requestId\": \"\", // Each request has a unique ID, for which the Support\
    \ team could ask for when contacted.\r\n    \"context\": \"\", // Optional: In\
    \ case you send this value in your request.\r\n    \"error\": {\r\n        \"\
    code\": \"\", // Error Code, please check our [Errors page](https://developers.cryptoapis.io/technical-documentation/general-information/errors-and-api-statuserrors)\
    \ to see the full list of error codes.\r\n        \"message\": \"\", // Is the\
    \ human readable error message.\r\n        \"details\": \"\" // Optional: Some\
    \ errors may need more details.\r\n    }\r\n}\r\n```\r\n\r\nWe use the following\
    \ error codes:\r\n\r\n\r\n### General errors\r\n\r\n| Type of code | HTTP Status\
    \ Code | Error code | Message |\r\n| :---: | :---: | :---: | :---: |\r\n| Client\
    \ Error | 400 | `uri_not_found` | \"The specified URI has not been found. Check\
    \ the URI and try again.\" |\r\n|  |  | `limit_greater_than_allowed` | \"You have\
    \ reached the allowed limit. The maximum number of items for this endpoint is\
    \ {limit}, please use the specific pagination attributes to get the items in portions.\"\
    \ |\r\n|  |  | `invalid_pagination` | \"The pagination attributes that have been\
    \ used are invalid. Please check the Documentation to see details on pagination.\"\
    \ |\r\n|  | 401 | `missing_api_key` | \"The specific authorization header (API\
    \ Key) is missing, please check our Authorization section in our Documentation.\"\
    \ |\r\n|  |  | `invalid_api_key` | \"The provided API key is invalid. Please,\
    \ generate a new one from your Dashboard.” |\r\n|  | 402 | `insufficient_credits`\
    \ | \"You have insufficient credits. Please upgrade your plan from your Dashboard\
    \ or contact our team via email.\" |\r\n|  | 403 | `https_required` | \"The use\
    \ of HTTP**S** is required.\" |\r\n|  |  | `endpoint_not_allowed_for_plan` | \"\
    This endpoint is not available for your current subscription plan, please upgrade\
    \ your plan to be able to use it.\" |\r\n|  |  | `data_not_allowed_for_plan` |\
    \ \"Your subscription plan includes only {days} days of historical data. Please\
    \ upgrade your plan or contact our team for more information.\" |\r\n|  |  | `banned_ip_address`\
    \ | \"This IP address has been banned. To check the reason for that, please contact\
    \ our team via email.\" |\r\n|  |  | `endpoint_not_allowed_for_api_key` | “This\
    \ endpoint is not available for your API key.” |\r\n|  | 404 | `resource_not_found`\
    \ | \"The specified resource has not been found.\" |\r\n|  | 405 | `request_method_not_supported`\
    \ | \"The specified request method ({method}) is not supported for this endpoint.\
    \ Please check our Documentation and make sure you set the right request method.\"\
    \ |\r\n|  |  | `allowed_methods` | \"The specified method **must** be one of the\
    \ following: {methods}.\" |\r\n|  | 409 | `invalid_query_parameter` | \"The query\
    \ parameter provided is invalid. Please provide a proper query parameter, or refer\
    \ to the documentation for more information.\" |\r\n|  |  | `missing_request_body`\
    \ | \"The required request body is missing, action cannot be performed.\" |\r\n\
    |  |  | `bad_json` | \"The JSON provided is invalid. Please make sure it's valid\
    \ and try again.\" |\r\n|  |  | `invalid_data` | \"The data provided seems to\
    \ be invalid.\" |\r\n|  |  | `already_exists` | \"The specified resource already\
    \ exists.\" |\r\n|  |  | `callback_url_not_verified` | \"The Callback URL has\
    \ not been verified. Please, verify the URL from within your Dashboard and try\
    \ again.\" |\r\n|  |  | `missing_required_attributes` | \"A required parameter\
    \ is missing. Please provide all required parameters, or refer to the documentation\
    \ for more information.\" |\r\n|  |  | `extra_body_attributes` | \"A provided\
    \ body parameter is unknown or not specified. Please provide only specified body\
    \ parameters, or refer to the documentation for more information.\" |\r\n|  |\
    \  | `extra_query_attributes` | \"A provided query parameter is unknown or not\
    \ specified. Please provide only specified query parameters, or refer to the documentation\
    \ for more information.\" |\r\n|  | 415 | `unsupported_media_type` | \"The selected\
    \ Media Type is unavailable. The Content-Type header should be 'application/json'.\"\
    \ |\r\n|  | 429 | `request_limit_reached` | \"The request limit has been reached.\
    \ There can be maximum {requests} requests per {seconds} second(s) made. Please\
    \ contact our team via email if you need more or upgrade your plan.\" |\r\n| Server\
    \ Error | 500 | `technical_issues` | \"We are currently facing some technical\
    \ issues, please try again later.\" |\r\n|  |  | `unexpected_server_error` | \"\
    An unexpected server error has occurred, we are working to fix this. Please try\
    \ again later and in case it occurs again please report it to our team via email.\"\
    \ |\r\n|  | 501 | `unimplemented` | \"This {feature} has not been implemented\
    \ yet.\" |\r\n|  | 503 | `temporary_shutdown_endpoint` | \"This endpoint is temporarily\
    \ stopped due to performance reasons. For more information please contact our\
    \ team via email.\" |\r\n\r\n\r\n### Custom errors:\r\n\r\n| Type of code | HTTP\
    \ Status Code | Error code | Message |\r\n| :---: | :---: | :---: | :---: |\r\n\
    | Client Error | 400 | `invalid_blockchain` | \"The provided blockchain is invalid.\
    \ The blockchain **must** be a supported one. For the full list of supported blockchains\
    \ please see our Documentation.\" |\r\n|  |  | `invalid_network` | \"The provided\
    \ network is invalid. The network **must** be a supported one. For the full list\
    \ of supported networks please see our Documentation.\" |\r\n|  |  | `blockchain_data_invalid_address`\
    \ | \"The provided address is invalid for the mentioned blockchain/network. \"\
    \ |\r\n|  |  | `xpub_not_synced` | \"This xPub is not yet synced, please first\
    \ use the endpoint “Sync HD (xPub, yPub, zPub) wallet” to synchronize it.\" |\r\
    \n|  | 404 | `blockchain_data_address_not_found` | \"The provided address for\
    \ this blockchain/network has not been found. Please check it and try again.\"\
    \ |\r\n|  |  | `blockchain_data_block_not_found` | \"The specified block has not\
    \ been found on the specific blockchain.\" |\r\n|  |  | ` blockchain_data_transaction_not_found`\
    \ | \"The specified transaction has not been found on the specific blockchain.\"\
    \ |\r\n|  |  | `order_book_unknown_symbol_id` | \"This symbol ID cannot be found.\
    \ Please check all symbol IDs in our Market Data product.\""
  name: Errors and API status
- description: "## Data Limiting\r\n\r\nData limiting is much more helpful to the\
    \ APIs operation and user’s experience than it sounds. The purpose of such strategies\
    \ and processes is threefold - to prevent overloading of the API in one way or\
    \ another, to ensure the best possible processing speed and response time, and\
    \ to provide additional security to Crypto APIs 2.0 products and the fetched data.\
    \ Some data flow limiting is nevertheless subject to variation depending on the\
    \ Crypto APIs 2.0 product subscription tier you have as a customer. Different\
    \ subscription plans provide different levels of data flow limiting. To see more\
    \ details on Crypto APIs 2.0 products, please visit our [website](https://cryptoapis.io/).\
    \ \r\n\r\nCrypto APIs 2.0 uses the following methods and strategies of limiting\
    \ data flow:\r\n\r\n### Rate Limiting\r\n\r\nAPI call Rate Limits are an essential\
    \ part of Internet security designed to prevent DoS attacks, the overwhelming\
    \ of an API, and the decreasing of its business value. What the process does is\
    \ to basically limit the API calls sent simultaneously with your API key from\
    \ a single source, as unlimited such could compromise both the performance and\
    \ security of the API in question. API limiting also assists in boosting the API’\
    s scalability which prevents lags during traffic spikes.\r\n\r\nFor these and\
    \ more reasons Crypto APIs 2.0 professional service is subject to API call Rate\
    \ Limits. All such limits, applied to you and your use, are based on your chosen\
    \ subscription plan tier. If you are interested in increasing your Rate limits,\
    \ you can always [reach out to our team](https://cryptoapis.io/contacts) and set\
    \ up a custom subscription.\r\n\r\nIn the case you exceed the aforementioned limits,\
    \ your requests will return an HTTPS Status Code 429.\r\n\r\nThe Rate Limits are\
    \ tracked and calculated on the basis of calls per day, per hour, per minute and\
    \ per second in correspondence to available credits. \r\n\r\n### Daily credits\r\
    \n\r\nCrypto APIs 2.0 provides a specific amount of daily credits for the different\
    \ subscription tiers of its product. The higher level the subscription, the more\
    \ daily credits it provides. Your daily credits are accounted for 24 hours from\
    \ the initial call made to our API-Gateway.\r\n\r\nDaily credits allow you to\
    \ actually make an API call. This is the limit of calls you can make for 24 hours.\
    \ One credit doesn’t necessarily mean one request though. If you request a list\
    \ of data, we count each 50 results (the pagination limit) as one credit.\r\n\r\
    \n### Enabled features\r\n\r\nAnother way we limit data flow are the features\
    \ each subscription tier holds. Crypto APIs 2.0 offers a variety of blockchain-related\
    \ API products where each higher subscription tier provides more and better features\
    \ for your preferences in retrieving blockchain and cryptocurrency data. \r\n\r\
    \nTo see our prefixed subscription and pricing list with products, please see\
    \ our [website](https://cryptoapis.io/pricing). If you feel like you can work\
    \ better with a custom plan, simply contact [our team](https://cryptoapis.io/contacts)\
    \ and we’ll discuss the possibilities we can offer you.\r\n\r\n### Pagination\r\
    \n\r\n#### Using Pagination\r\n\r\nWhen making calls to the Crypto APIs 2.0, a\
    \ large number of results can be expected in the response. Blockchains consist\
    \ of hundreds of thousands of data blocks at the least, containing hashed information\
    \ on transactions which can add up to hundreds and more pages of information when\
    \ called. To ensure the normal flow and structure of the results of the API response\
    \ and optimize our efficiency, we paginate our results. Paginated results are\
    \ returned usually to a GET request. \r\n\r\n\r\n_**Example:**_\r\n\r\n```\r\n\
    {\r\n    \"apiVersion\": \"2.0\",\r\n    \"requestId\": \"xxxxxxxxxxxx\",\r\n\
    \    \"data\": {\r\n        \"limit\": 0,\r\n        \"offset\": 50,\r\n     \
    \   \"total\": 2,\r\n        \"items\": [\r\n            {\r\n              //item\
    \ 1\r\n            },\r\n            {\r\n              //item 2\r\n         \
    \   }\r\n        ]\r\n    }\r\n}\r\n\r\n```\r\n\r\nTo avoid requests that may\
    \ potentially crash the system or result in an error, we have set up a default\
    \ limit on results with the value `offset`: 50. This means that regardless of\
    \ the total number of items in the response, by default only 50 can be displayed\
    \ at a time. This number cannot be modified to be more or less than 50.\r\n\r\n\
    To see how many items in total your request can return in general, see the value\
    \ `total`. Depending on that number (if it is higher than the default `offset`:\
    \ 50) and your preferences, you can send another request to fetch the next segment\
    \ of the results again displayed within the default 50 items per page limit.\r\
    \n\r\n\r\n#### How do I know whether a certain endpoint uses pagination?\r\n\r\
    \nThe process of pagination requires a request that would return a response of\
    \ multiple items, or a list. When information is listed then It requires sorting\
    \ and limiting of display. \r\n\r\nEndpoints that request information on a specific\
    \ item - address, transaction, block, etc., will return a single count of the\
    \ requested item, along with its respected details, which are the goal of the\
    \ request. \r\n\r\n_**Example:**_\r\n\r\nThis is a response example for a request\
    \ to GET address details. The value `item` being in the singular form, due to\
    \ the request fetching information on one item, indicates there is no pagination\
    \ for the specific endpoint.\r\n\r\n```\r\n{\r\n    \"apiVersion\": \"2.0\",\r\
    \n    \"requestId\": \"xxxxxxxxxxxx\",\r\n    \"address\": \"xxxxxxxxxxxx\",\r\
    \n    \"data\": {\r\n        \"limit\": 0,\r\n        \"offset\": 50,\r\n    \
    \    \"total\": 1,\r\n        \"item\": [\r\n            {\r\n              //address\
    \ details\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n```\r\n\r\n_**Example:**_\r\
    \n\r\nThe following is a different response example for a request to GET a list\
    \ of addresses by a certain attribute. The value `items` is in the plural form,\
    \ which indicates that the response includes more than one count of the requested\
    \ information, which makes it a list. Ergo, this specific endpoint uses pagination.\r\
    \n\r\n```\r\n{\r\n    \"apiVersion\": \"2.0\",\r\n    \"requestId\": \"xxxxxxxxxxxx\"\
    ,\r\n    \"data\": {\r\n        \"limit\": 0,\r\n        \"offset\": 50,\r\n \
    \       \"total\": 1000,\r\n        \"items\": [\r\n            {\r\n        \
    \      //address 1\r\n            },\r\n            {\r\n              //address\
    \ 2\r\n            },\r\n\t{\r\n\t …\r\n\t}\r\n        ]\r\n    }\r\n}\r\n\r\n\
    ```\r\n\r\n#### How do I see the next page of the response?\r\n\r\nCrypto APIs\
    \ 2.0 obtains information from the blockchain database, therefore a new request\
    \ has to be made in order to see further items from the response. The next response\
    \ will still be limited to the default pagination value `offset`: 50, but you\
    \ can get the next page by modifying the `limit` value.\r\n\r\n`limit` indicates\
    \ from which item in the list should the response start displaying results. The\
    \ first paginated response of a request will by default start count from 0, i.e.\
    \ `limit`: 0. By modifying this value you can retrieve the next segment of the\
    \ results again displayed within the default 50 items per page limit.\r\n\r\n\
    _**Example:**_\r\n\r\n```\r\n{\r\n    \"apiVersion\": \"2.0\",\r\n    \"requestId\"\
    : \"xxxxxxxxxxxx\",\r\n    \"data\": {\r\n        \"limit\": 51,\r\n        \"\
    offset\": 50,\r\n        \"total\": 1000,\r\n        \"items\": [\r\n        \
    \    {\r\n              //address 51\r\n            },\r\n            {\r\n  \
    \            //address 52\r\n            },\r\n\t{\r\n\t …\r\n\t}\r\n        ]\r\
    \n    }\r\n}\r\n\r\n```\r\n\r\nTo retrieve every segment of the response, in order\
    \ to view all possible results, you have to each time make a new request with\
    \ a modified `limit`. The default `offset` value cannot be modified to be more\
    \ or less than 50."
  name: Data Flow Limiting
- description: "## Introduction\r\n\r\nThis article will present and describe principles,\
    \ standards and conventions we apply to our APIs and processes. The following\
    \ information may be subject to change and may as well not apply to other software.\r\
    \n\r\nWe use OpenAPI 3 Standard for our Technical Documentation and Endpoints\
    \ description. All Technical Documentation can be found in the [Developer’s Portal](https://developers.cryptoapis.io/technical-documentation).\
    \ Moreover, all Crypto APIs 2.0 are REST.\r\n\r\n\r\n## URI\r\n\r\n### URI Structure\r\
    \n\r\nThe Crypto APIs 2.0 and endpoint URIs follow the RFC 3986 specification\
    \ and are divided into three main parts, applicable to all Crypto APIs 2.0 products\
    \ (Blockchain Events, Blockchain Data, etc.):\r\n\r\n1. The domain and subdomain\
    \ in the URI always display as: **rest.cryptoapis.io**\r\n2. Next is displayed\
    \ the version of the product, e.g. currently it is: **/v2/**\r\n3. Next is displayed\
    \ the product name, where words are separated with spinal-case: **/blockchain-data/**\r\
    \n\r\n_**Example:**_\r\n\r\nrest.cryptoapis.io/v2/blockchain-data/..\r\n\r\nDepending\
    \ on which product is specified, after that the URI’s structure may look different\
    \ in each case. The different Crypto APIs 2.0 products require different query\
    \ parameters and variables. \r\n\r\nAfter the main URI parts, it is completed\
    \ with a component and after that - parameters.\r\n\r\n_**Example:**_\r\n\r\n\
    ../address/${litecoinValidAddress}\r\n\r\n\r\n### URI Naming Standards\r\n\r\n\
    URIs have to follow the naming standards as listed below:\r\n\r\n- the URI has\
    \ to be written in all lower cases, except when a specific string requires capital\
    \ letters;\r\n- the path parameter must use spinal-case ( a hyphen - ) to separate\
    \ words, e.g. **/v2/blockchain-data**;\r\n- the query parameters must use camelCase\
    \ to differentiate words, e.g. **/v2/blockchain-data/bitcoin/addresses?offset=10&limit=0**;\r\
    \n- the variables must use camelCase to differentiate words, e.g. **/v2/blockchain-data/bitcoin/addresses/${bitcoinValidAddress}**;\r\
    \n- all URLs must be **HTTPS** - secured, using only HTTP is not accepted.\r\n\
    \r\n\r\n### URI Maximum Length\r\n\r\nThe entire URI cannot exceed 2000 characters\
    \ in length including any punctuation marks, e.g. commas, hyphens, question marks,\
    \ pluses or forward slashes.\r\n\r\n\r\n## Request and Response Standards\r\n\r\
    \n### Basic API Request \r\n\r\nMain prerequisites for requests to the Crypto\
    \ APIs 2.0 include:\r\n\r\n- requests are sent through HTTPS only to the domain\
    \ **rest.cryptoapis.io**;\r\n- headers must by default incorporate the JSON content\
    \ type **application/json**;\r\n- all custom for Crypto APIs 2.0 attributes are\
    \ indicated in the beginning with an `x-`, e.g. `x-signature`;\r\n- request public\
    \ attributes must be all camelCase, e.g. `\"apiVersion\": 2`, `\"attributeName\"\
    : \"attributeValue\"`;\r\n- we enable CORS (Cross-Origin Resource Sharing), for\
    \ which the API responds with an `Access-Control-Allow-Origin:` header. **Nevertheless**,\
    \ your users **shouldn’t make** direct API requests from a web application that\
    \ you are building, as our CORS policy may change at some point without warning\
    \ and any such requests could be then rejected;\r\n- no random unspecified keys\
    \ can be added to the Crypto APIs 2.0 URI, e.g. `?randomKey=randomUnspecifiedValue`,\
    \ as that will result in a 400 error;\r\n- all requests to the Crypto APIs 2.0\
    \ **must** be authenticated with an API key. Clients can generate API keys through\
    \ their dedicated [Dashboards](https://dashboard.cryptoapis.io) only after product\
    \ subscription. Multiple API keys can be generated for a single user. To see more\
    \ information on Authentication, please see the respective [article](https://developers.cryptoapis.io/technical-documentation/general-information/authentication);\r\
    \n- API keys must be kept secure and private by the users who own them. API keys\
    \ **must not** be uploaded to a frontend of a mobile or web application or in\
    \ any open source code, as API keys represent access to the user’s account and\
    \ the data inside.\r\n\r\n{tip}Best to use one API key for testing and integration\
    \ purposes, and a separate one for production, known to only a limited number\
    \ of people.{/tip}\r\n\r\nShortly put, all Crypto APIs 2.0 requests include:\r\
    \n\r\n```\r\nREST API Base URL: https://rest.cryptoapis.io\r\nAPI Version: /v2/\r\
    \nAuthentication (API Key + JSON)\r\nRequest Type (GET, POST, PUT, PATCH, DELETE)\r\
    \n```\r\n\r\nOur API Requests incorporate the following HTTP methods:\r\n\r\n\
    | HTTP method | Definition |\r\n|:---:|:---:|\r\n| GET | Retrieve a specified\
    \ resource/information from the server. |\r\n| POST | Send data to the server\
    \ and requests to accept it. |\r\n| PUT | Updates a resource. |\r\n| PATCH | Partially\
    \ updates a resource. |\r\n| DELETE | Deletes a resource. |\r\n\r\n**POST** requests\
    \ always contain the following body structure:\r\n\r\n\r\n```\r\n{\r\n\t\"apiVersion\"\
    : \"2.0\", // The current API version.\r\n\t\"context\": \"You can add any text\
    \ here.\", // Optional: In case you send this value in the request.\r\n\t\"data\"\
    : { // Contains the request parameters.\r\n\t\t\"item\": { // Single item’s details.\r\
    \n\t\t\t\"endpointAttribute\": \"value\" // Parameter data.\r\n\t\t}\r\n\t}\r\n\
    }\r\n```\r\n\r\nIf an endpoint has no parameters, the body structure has less\
    \ data:\r\n\r\n```\r\n{\r\n\t\"apiVersion\": \"2.0\", // The current API version.\r\
    \n\t\"context\": \"You can add any text here\", // Optional: In case you send\
    \ this value in the request.\r\n\t\"data\": { // Contains the request parameters.\r\
    \n\t\t\"item\": { } // Single item’s details.\r\n\t}\r\n}\r\n```\r\n\r\n\r\n\r\
    \n### Basic API Response\r\n\r\nResponses to Crypto APIs 2.0 requests prerequisites:\
    \ \r\n\r\n- response public attributes must be all camelCase, e.g. `”apiVersion”\
    : 2`, `”customAttribute”: \"customAttribute\"`;\r\n- Crypto APIs 2.0 requests\
    \ always return the following parameters:\r\n\r\n```\r\n{\r\n \"apiVersion\":\
    \ \"\",\r\n    \"requestId\": \"\",\r\n    \"context\": \"\",\r\n    \"data\"\
    : {\r\n        \"item\": {\r\n              }\r\n    }\r\n}\r\n```\r\n\r\n- `apiVersion`\
    \ reflects the version of the software used, currently it is V2;\r\n- `requestId`\
    \ is a unique code used with the purposes of tracking, support, etc.;\r\n- the\
    \ attribute `data` always contains the result, no matter of the quantity of items\
    \ in it;\r\n- the attribute `item` specifies the response’s result indicating\
    \ there is only a single one, when listed as `items` it means there are two or\
    \ more results, i.e. a list of results, in the response;\r\n- all calculated prices\
    \ are always in USD currency;\r\n- we use pagination methods to limit the results\
    \ in the response, specifically on responses that can potentially return hundreds\
    \ or thousands of results, please see more information in our [Data Flow Limiting\
    \ section](https://developers.cryptoapis.io/technical-documentation/general-information/data-flow-limiting).\r\
    \n- each response header contains the following keys, which define the user’s\
    \ credit usage, to see more information on credits, please see our [API Credential\
    \ Use section](https://developers.cryptoapis.io/technical-documentation/general-information/authentication#api-credential-usage-credits):\r\
    \n\r\n```\r\n“x-credits-consumed”\r\n“x-credits-available”\r\n“x-response-time”\
    \r\n```\r\n\r\n\r\n### The `context` parameter\r\n\r\nThe `context` parameter\
    \ is an optional attribute created with the idea to facilitate users when they\
    \ make requests in bulk.\r\n\r\nThey can set the `context` attribute as a string\
    \ with simple text of their choosing. Afterwards each returned information will\
    \ contain the specific `context` string of its associated request. Through this\
    \ process users can keep track of the responses that come in.\r\n\r\nFor **GET**\
    \ requests the attribute can be set as a query parameter. For **POST** requests\
    \ it can be set as a query or body parameter. In the latter scenario there’s a\
    \ safety measure embedded in case the user sets `context` as both a query and\
    \ body parameter - the system will then take into account the body `context` attribute.\r\
    \n\r\n\r\n\r\n## Error and HTTP Code Standards\r\n\r\nThe full list of Errors\
    \ you can see on our [respective page](https://developers.cryptoapis.io/technical-documentation/general-information/errors-and-api-status).\
    \ \r\n\r\nThe errors we use follow the HTTP Error Codes Standard. \r\n\r\n| HTTP\
    \ Status Code | Error it represents |\r\n|:---:|:---:|\r\n|3xx | Redirection Error\
    \ |\r\n|4xx | Client Error |\r\n|5xx | Server Error |\r\n\r\n\r\nThe structure\
    \ of the error **always** returns the following values, as listed and described\
    \ in the example:\r\n\r\n\r\n_**Example:**_\r\n\r\n```\r\n{\r\n    \"apiVersion\"\
    : \"\", // The current API Version.\r\n    \"requestId\": \"\", // Each request\
    \ has a unique ID, for which the Support team could ask for when contacted.\r\n\
    \    \"context\": \"\", // Optional: In case you send this value in your request.\r\
    \n    \"error\": {\r\n        \"code\": \"\", // Error Code, please check our\
    \ [Errors page](https://developers.cryptoapis.io/technical-documentation/general-information/errors-and-api-statuserrors)\
    \ to see the full list of error codes.\r\n        \"message\": \"\", // Is the\
    \ human readable error message.\r\n        \"details\": \"\" // Optional: Some\
    \ errors may need more details.\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Date and Time\
    \ Formats\r\n\r\nFor all required endpoints that use a time parameter, the accepted\
    \ value is `timestamp` which is always UTC-based by definition. The human date\
    \ which corresponds to the `timestamp` is always converted by the system to UNIX\
    \ Epoch time and returned as an integer.\r\n\r\n_**Example:**_\r\n\r\nHuman time:\
    \ 09:12:41 AM 28th January 2021\r\n\r\nWhich corresponds to:\r\n\r\nUNIX Epoch\
    \ time: 1611825161\r\n\r\nHence the system will return `”timestamp”: 1611825161`\
    \ and not the human time.\r\n\r\nThe UNIX Epoch time is a system that describes\
    \ a point in time. This would be the amount of time in seconds that have passed\
    \ since the Unix Epoch which was 00:00:00 UTC on 1 January 1970, minus leap seconds."
  name: Standards and Conventions
- description: "## Callbacks and Main Terminology\r\n\r\nLet's first define some main\
    \ vocabulary related to callbacks that will make the process easier to talk about.\r\
    \n\r\n\r\n### Callback\r\n\r\nShortly put, a “callback” is a POST request sent\
    \ from Crypto APIs 2.0 to a customer’s Callback URL when an event they have already\
    \ subscribed for occurs.\r\n\r\nNow with a bit more detail, a “callback” is used\
    \ to describe an event reaction process where a user receives notifications on\
    \ certain events by having first subscribed to them in the system. The term has\
    \ become interchangeable with the word “webhook”, used to describe the same thing.\
    \ The callback is a way for the system to avoid customers constantly calling the\
    \ Crypto API to check for an update or event they may be expecting. Callbacks\
    \ can be very useful for customers who expect, track or want to be notified about\
    \ the state of transactions on the blockchain.\r\n\r\nThere are two sides of the\
    \ callback - the server side and the customer side. The process follows the customer\
    \ side subscribing for an event on the server side and the server side notifying\
    \ the customer side when that event is completed. \r\n\r\nWith Crypto APIs 2.0\
    \ there are endpoints which will lead to callbacks. These include, but are not\
    \ limited to [Blockchain Events](https://cryptoapis.io/products/blockchain-events)\
    \ and [Blockchain Automations](https://cryptoapis.io/products/blockchain-automations).\r\
    \n\r\n\r\n### Callback Events\r\n#### Definition\r\n\r\nSpecific processes are\
    \ considered an “event”. Simply put, an “event” is something that occurs on the\
    \ Blockchain or Crypto Market. Crypto APIs 2.0 incorporates various endpoints\
    \ which hold different characteristics. You can see endpoints that represent events\
    \ to which users can subscribe for a callback on our [API Reference page](https://developers.cryptoapis.io/technical-documentation).\
    \ Such supported for callback endpoints are displayed with an arrow icon next\
    \ to them to easily view Callback request parameters and response examples.\r\n\
    \r\n#### Types\r\n\r\nThere are a number of different event types. As a Callback\
    \ event the following are considered:\r\n\r\n- New Block;\r\n- New Incoming Transaction;\r\
    \n- New Outgoing Transaction;\r\n- New Confirmation;\r\n- Already Forwarded Coins,\
    \ and more.\r\n\r\n\r\n### Callback URL\r\n\r\nCallbacks require what is known\
    \ as a **”Callback URL”**. It is the destination where Crypto APIs 2.0 sends the\
    \ callback notification for the event. Setting up this URL is done entirely on\
    \ the customer’s side and is the first step to setting up a Callback. \r\n\r\n\
    {note}Crypto APIs 2.0 requires the set up and **verification** of a domain to\
    \ base a Callback URL on for security purposes, i.e. proof of access. Crypto APIs\
    \ 2.0 **will not** send callbacks to unverified domains, websites or URLs.{/note}\r\
    \n\r\nLet’s see the main steps the customer needs to take in order to set up their\
    \ Callback URL:\r\n\r\n1. First and foremost, the user must verify a domain they\
    \ have access to in general. This is done in their [Crypto APIs 2.0 Dashboard](https://dashboard.cryptoapis.io/).\
    \ The customer has to upload a unique code, provided to them by the Crypto APIs\
    \ 2.0 Dashboard, to the frontend of their website.\r\n\r\n2. Afterwards, the customer\
    \ can click to Verify in the Dashboard. AT that point Crypto APIs 2.0 will make\
    \ a request to the specified domain name and check for the code. When it is located,\
    \ Crypto APIs 2.0 verifies the domain. If it is not found in the frontend, the\
    \ domain will not be verified.\r\n\r\nAfter the domain is verified, then the user\
    \ can set a specific URL destination to serve as the Callback URL.\r\n\r\n{note}Please\
    \ note that the domain and the URL are two different addresses, which though containing\
    \ the same root domain, may lead to different pages/locations. For the reason\
    \ Crypto APIs 2.0 requires both the domain verification and then the specification\
    \ of a URL on that domain.{/note}\r\n\r\n{warning}Please pay attention to the\
    \ domain you verify. If your Callback URL is going to contain a subdomain, please\
    \ verify the main domain name along with the sub domain.{/warning}\r\n\r\n_**Example:**_\r\
    \n\r\nDomain to verify: **”mypage.mydomain.com”**\r\nCallback URL to set: **“\
    mypage.mydomain.com/login/callback”**\r\nCannot use URL: **“mydomain.com/login/callback”\
    **\r\n\r\nDomain to verify: **”mydomain.com”**\r\nCallback URL to set: **“mydomain.com/login/callback”\
    **\r\nCannot use URL: **“mypage.mydomain.com/login/callback”**\r\n\r\n{note}It\
    \ is most important that the user has access to the Callback URL they set, in\
    \ order for them to be able to access/see the callback notification when received.{/note}\r\
    \n\r\n\r\n## Crypto APIs 2.0 Callback basics\r\n\r\nCrypto APIs 2.0 Callbacks\
    \ follow certain basics and the same standard that applies to all callback subscriptions.\r\
    \n\r\n- Callback requests sent from Crypto APIs 2.0 are **always** POST;\r\n-\
    \ All Crypto APIs 2.0 headers must by default incorporate the JSON content type\
    \ **application/json**;\r\n- All Crypto APIs 2.0 Callbacks incorporate the use\
    \ of a Callback URL, without exceptions;\r\n- A customer can subscribe for a callback\
    \ to as many supported events as they want, as many times as needed;\r\n- The\
    \ callback functionality in Crypto APIs 2.0 is identical throughout every product\
    \ and endpoint that supports it;\r\n- The callback request from Crypto APIs 2.0\
    \ to the customer includes the exact information and parameters as requested by\
    \ the customer when they first set up the subscription, which are included in\
    \ the `data` parameter of the code; \r\n- The attribute `x-signature` is a custom\
    \ for Crypto APIs 2.0 parameter, as indicated with the `x-` in the beginning;\r\
    \n- The structure of the Callback is always the same no matter the subscription\
    \ or type of event.\r\n\r\n\r\n## Callback standard structure\r\n\r\nThe callback\
    \ structure has the following constant parameters:\r\n\r\n```\r\n{\r\n    \"apiVersion\"\
    : \"2.0\", //**Represents the current Crypto APIa version, which is v2.**\r\n\
    \    \"referenceId\": \"2921e3df-c671-4d20-b51b-d176d5c1e43g\", //**Represents\
    \ the unique reference identifier of the callback.**\r\n    \"idempotencyKey\"\
    : \"3b3359d0ccdb1d3d3ca8dbaa79cb5395b33c5bc52d782f3ea22904abef45d1j4\", //**Specifies\
    \ a unique ID used by Crypto APIs 2.0 to recognize consecutive requests with the\
    \ same data so that not to perform the same operation twice.**\r\n    \"data\"\
    : { //**Includes information and details on the callback, dependent on the customer’\
    s secret.**\r\n        \"product\": \"BLOCKCHAIN_EVENTS\", //**Specifies the product\
    \ for which the event occurs.**\r\n        \"event\": \"BLOCK_MINED\", //**Specifies\
    \ the actual event type, for which the callback subscription was made.\r\n   \
    \     \"item\": { //**Includes all customer-specific details for the callback.**\r\
    \n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Versions and `apiVersion`\r\
    \n\r\nThe structure of the callback the customer will receive depends on the version\
    \ of the Crypto API. Currently, we use **v2**. When the user sets a subscription\
    \ for an event while on v2 of the software, the callback will be returned according\
    \ to v2 specifics. \r\n\r\nEach time we update our API to a next version, the\
    \ customer would need to reset their event subscriptions so that they correspond\
    \ to the newest software version currently in use. To do that the customer would\
    \ need to remove the event subscription and set it up again. Otherwise, the callback\
    \ response will be received in the format of the older API version it was set\
    \ up in.\r\n\r\n{warning}This versioning-callback dependency **does not** apply\
    \ to v1 of the Crypto APIs 2.0 software, only to v2+.{/warning}\r\n\r\n\r\n###\
    \ Reference ID and `referenceId`\r\n\r\nThe `referenceId` indicates a reference\
    \ to the subscription that has been made by the customer. It is a unique code\
    \ applicable only for that subscription. Each time a customer sets up an automation\
    \ or event subscription, the corresponding callback always has a parameter `referenceId`.\
    \ \r\n\r\n\r\n### Idempotency and `idempotentKey`\r\n\r\nIdempotency represents\
    \ a process in computing and REST which a server uses to recognize subsequent\
    \ retries of the same request where the returned result always remains the same.\
    \ It is a security mechanism for retrying requests without the risk of performing\
    \ the same operation more than once.\r\n\r\nSuch risks usually can occur when\
    \ an API call is for some reason disrupted during processing (e.g. network connection\
    \ error) and a response is not returned. In such cases the API call would be retried.\
    \ By including an **`idempotencyKey`** in the initial request there is guarantee\
    \ that the specific action won’t be done more than once.\r\n\r\nThe `idempotencyKey`\
    \ is generated only on the server-end in the use of Crypto APIs 2.0 Callbacks.\
    \ It is added to the Callback request and is unique per initial callback request.\
    \ `idempotencyKey` values are generated randomly. \r\n\r\nAll original requests\
    \ containing an `idempotencyKey`, along with their body and response status code\
    \ (both success and error), are saved by the system. After that, any subsequent\
    \ requests containing the same `idempotencyKey` will automatically return the\
    \ same result. \r\n\r\n\r\n## Setting up callbacks\r\n\r\nCallbacks combine certain\
    \ elements and steps needed to be able to create a correct reaction and on-time\
    \ notification.\r\n\r\nTheir way of work includes the customer to first set up\
    \ their callback subscription, and later on, whenever the subscription event occurs,\
    \ for the Crypto APIs 2.0 to notify the customer. All steps are taken through\
    \ API Requests and Responses.\r\n\r\n1. **Customer sets up Callback URL** \r\n\
    \r\n The customer must first have a [verified domain and set up Callback URL](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).\r\
    \n\r\n2. **Customer subscribes for an event**\r\n\r\n After verifying their domain,\
    \ the customer has to send a request to Crypto APIs 2.0 in order to subscribe\
    \ for a callback on a certain event. The customer can subscribe to as many events\
    \ they want, as many times as they need.\r\n\r\n When the customer sends their\
    \ request to subscribe for an event the system must return a response. If there\
    \ is no problem, where otherwise an error would result, the response from Crypto\
    \ APIs 2.0 would be “201 New resource successfully created”. Then it is confirmed\
    \ that the callback subscription for that particular event has been set up.\r\n\
    \r\n If the subscription setup has failed, it will return an error, e.g. **Error\
    \ 409 Conflict**. If an error is returned, there is a mistake or issue with the\
    \ customer’s request. It must be then fixed so that Crypto APIs 2.0 can return\
    \ a successful response. \r\n\r\n3. **Crypto APIs 2.0 sends the Callback as a\
    \ request**\r\n\r\n Crypto APIs 2.0’s responsibility to the customer is to notify\
    \ them according to their subscription for that particular event or events **only\
    \ when it/they occur**. Whenever the event happens Crypto APIs 2.0 sends a request\
    \ back to the customer that includes the data on the event, as requested by the\
    \ customer. This is essentially the “callback” itself. If the callback is not\
    \ confirmed by the customer side with a “200 OK” response, the system will follow\
    \ a specific retry strategy.\r\n\r\nIt is important to also clarify that subscribing\
    \ for an event and setting a callback for it **does not** necessarily mean that\
    \ the callback will occur soon or even at all. We do everything possible to make\
    \ sure that callbacks have no delays, errors, or issues, and are received as the\
    \ events occur. \r\n\r\nStill, not receiving a callback for a subscribed event\
    \ for a long time could be due to many reasons. There may be events that need\
    \ to take days, weeks or months to occur even just once, and some that may encounter\
    \ problems, errors, issues, and never happen at all.\r\n\r\n{warning}A user will\
    \ **not receive** a notification, an email, a message, a report or any other kind\
    \ of alert for an event they have subscribed for, when the event has not occurred\
    \ or will not happen at all, regardless of how much time has passed since the\
    \ setup of the callback. Setting up a callback ensures the obligation of the system\
    \ towards the customer to notify them **only when** the event happens.{/warning}\r\
    \n\r\n{warning}Users might at times receive a notification for a callback event\
    \ more than once, due to many Workers processing those. Make sure you use [idempotency](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#idempotency-and-codeidempotentkeycode)\
    \ and you can also log processed events only once without processing such that\
    \ are already-logged.{/warning}\r\n\r\n\r\n### Callback Retries\r\n\r\nWhen the\
    \ callback request is sent from Crypto APIs 2.0 it expects a response from the\
    \ customer side, as well. \r\n\r\nUntil a status code “200 OK Request has been\
    \ successful” is received, Crypto APIs 2.0 will keep retrying the request. There\
    \ will be 10 retries in total distributed at certain intervals.\r\n\r\n - Crypto\
    \ APIs 2.0 will send the requested callback when it’s time and a customer response\
    \ is expected in the first 5 seconds;\r\n- If a response isn’t received during\
    \ that time frame the system is prepared to send **in total 10** retries of the\
    \ callback;\r\n- The first callback retry will be send after 30 min;\r\n- After\
    \ that, each following callback will take twice as long to be sent compared to\
    \ the previous one. This is done with the purpose to extend the time during which\
    \ the customer can at all receive the notification and its retries and provide\
    \ opportunity for the customer to send a “200 OK” response;\r\n- Additionally,\
    \ there’s an included **“random value”** into the algorithm as a factor of **”\
    0.2”**, which creates small but important fluctuations in the time frames between\
    \ callback retries. This ensures that when large volumes of callbacks are sent\
    \ they would not be in bulk due to having the same time frames, which could otherwise\
    \ lead to crashes and server issues.\r\n\r\n{note}Time frames in the system are\
    \ measured in seconds, e.g. first callback retry will be send after 30 min = 1800\
    \ sec.{/note}\r\n\r\n{warning}If after all callback retries from Crypto APIs 2.0\
    \ there is no successful response from the customer, the callback will end up\
    \ in a final error and terminate.{/warning} \r\n\r\n\r\n## Callback Security\r\
    \n\r\nCrypto APIs 2.0 has incorporated a security layer to keep callbacks from\
    \ being intercepted, duplicated and make sure customers are receiving their callbacks\
    \ only from Crypto APIs 2.0.\r\n\r\n\r\n### Customer’s Secret Key\r\n\r\nThe customer’\
    s request can include data on the event they want to subscribe for and has the\
    \ option to also have a `callbackSecretKey`. This parameter is an optional security\
    \ measure for the benefit of the customer. The `callbackSecretKey` can only be\
    \ generated by the customer. It is used to create a unique hash string in the\
    \ `x-signature` response header in the callback request sent from  Crypto APIs\
    \ 2.0 when the event occurs.\r\n\r\nThe `callbackSecretKey`, and thus the `x-signature`,\
    \ are set up per event subscription, not per single callback. Hence the customer\
    \ only needs to set up the `callbackSecretKey` once when subscribing for an event.\
    \ They can use a single `callbackSecretKey` for all subscriptions, or different\
    \ ones for each subscription. The security is effective enough even with just\
    \ one common `callbackSecretKey`.\r\n\r\n{warning}Please note that though using\
    \ the `callbackSecretKey` is an optional step, we recommend it for security purposes!\
    \ Not using a `callbackSecretKey` means that no security layer will be applied\
    \ to your callbacks.{/warning}\r\n\r\n\r\n### Callback Signature\r\n\r\nIn the\
    \ case a customer has included a `callbackSecretKey` in their request to Crypto\
    \ APIs 2.0, the callback includes a specific `x-signature` parameter which is\
    \ for verification purposes. It is used by the customer to verify the information\
    \ they receive is in actuality really coming from Crypto APIs 2.0 and not a scam.\r\
    \n\r\nThe `x-signature` is provided in the header of the callback and represents\
    \ a unique hash derived from all the information included in the callback about\
    \ the event and the customer’s `callbackSecretKey`.\r\n\r\nFor the purpose HMAC_SHA256\
    \ is used. It stands for Hash-based message authentication code and along with\
    \ its cryptographic hash function SHA256 it represents higher security than any\
    \ other authentication code.\r\n\r\nThe cryptographic strength of the HMAC depends\
    \ upon the size of the `callbackSecretKey` that has been used. The most common\
    \ attack against HMACs is brute force to uncover that secret key. HMACs are substantially\
    \ less affected by collisions than their underlying hashing algorithms alone.\r\
    \n\r\nWhen the customer receives the callback request from Crypto APIs 2.0, they\
    \ can first check the `x-signature` before processing the request. By using their\
    \ `callbackSecretKey`, which only they would know, together with the information\
    \ from the callback they can generate a hash and compare it to the `x-signature`\
    \ hash that the Crypto APIs 2.0 server has returned. They **must** match which\
    \ only then would authenticate Crypto APIs 2.0 as the true sender. \r\n\r\nAfter\
    \ authentication of the callback, the customer can then proceed to processing\
    \ it. If the authentication with the `x-signature` fails, then the customer **must**\
    \ ignore it as someone else is sending it.\r\n\r\n_**Example:**_\r\n\r\nHMAC_SHA256\
    \ (`callbackSecretKey`, `The quick brown fox jumps over the lazy dog`) = f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbg2d1a3cd8\r\
    \n\r\n`callbackSecretKey` - Represents an optional string the customer can send\
    \ into their request when they create the callback subscription.\r\n`The quick\
    \ brown fox jumps over the lazy dog` - Represents everything we post in the body\
    \ of the server side callback request.\r\n`f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbg2d1a3cd8`\
    \ - Represents the resulting hash sent in the header (parameter name: `x-signature`)\
    \ of the post request."
  name: Callbacks
- description: "Using Crypto APIs 2.0 Blockchain Data Unified Endpoints you can get\
    \ information from all supported blockchain protocols in the same unified way.\
    \ \r\n\r\nUnified endpoints have the same data on the main level and varying attributes\
    \ depedning on the selected Blockchain, e.g. Bitcoin, Etehreum, Litecoin, etc."
  name: Unified Endpoints
- description: UTXO Based endpoints, where UTXO stands for Unspent Transaction Output
    and it is a type of electronic money left behind unspent after a cryptocurrency
    transaction has been made. These endpoints include UTXO-based transactions.
  name: UTXO Based
- description: "You can use Automatic coins forwarding to automatically forward **coins**\
    \ to your main address. These endpoints apply **only to coins, not tokens**.\r\
    \n\r\nA `feePriority` will be returned which represents the fee priority of the\
    \ automation whether it is \"SLOW\", \"STANDARD\" OR \"FAST\". The higher the\
    \ priority, the higher the fee.\r\n\r\nThe response of this endpoint contains\
    \ an attribute fromAddress which can be used as a deposit address. Any funds received\
    \ by this address will be automatically forwarded to toAddress based on what the\
    \ customer has set for the automation."
  name: Automatic Coins Forwarding
- description: "You can use Automatic coins forwarding to automatically forward **tokens**\
    \ to your main address. These endpoints apply **only to tokens, not coins**.\r\
    \n\r\nA `feePriority` will be returned which represents the fee priority of the\
    \ automation whether it is \"SLOW\", \"STANDARD\" OR \"FAST\". The higher the\
    \ priority, the higher the fee.\r\n\r\nThe response of this endpoint contains\
    \ an attribute fromAddress which can be used as a deposit address. Any funds received\
    \ by this address will be automatically forwarded to toAddress based on what the\
    \ customer has set for the automation."
  name: Automatic Tokens Forwarding
- description: "With Crypto APIs 2.0 and Blockchain Events you can set up subscriptions\
    \ to receive a callback whenever a specific events occurs. Various endpoints are\
    \ available for callback subscription. Callback subscription can be set from the\
    \ Crypto APIs 2.0 Dashboard. They require a Callback URL where the actual callback\
    \ will be received at.\r\n\r\nCrypto APIs 2.0 Callbacks will be sent along with\
    \ a retry logic if the first one is not accepted by the customer's end.\r\n\r\n\
    Note, that a Callback will be sent only when the event occurs. In some cases this\
    \ may take a long time, in others it may never even happen. This is not up to\
    \ Crypto APIs.\r\n\r\nIt is important to note that in order to set a valid and\
    \ working Callback subscription, the domain for the Callback URL must be first\
    \ verified.\r\n\r\nTo see more information on Callbacks and how they operate,\
    \ please see our dedicated [documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks)."
  name: Create Subscriptions for
- description: "Manage subscriptions set for event callbacks. These could include\
    \ listing subscriptions set for the user, deleting subscriptions, etc.\r\n\r\n\
    Note, that a Callback will be sent only when the event occurs. In some cases this\
    \ may take a long time, in others it may never even happen. This is not up to\
    \ Crypto APIs.\r\n\r\nIt is important to note that in order to set a valid and\
    \ working Callback subscription, the domain for the Callback URL must be first\
    \ verified.\r\n\r\nTo see more information on Callbacks and how they operate,\
    \ please see our dedicated [documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks)."
  name: Manage Subscriptions
- description: Validate HD Wallets (xPub, yPub, zPub) through these endpoints.
  name: Validating
- description: We support ERC-20, ERC-721 standards on Ethereum and Omni Layer on
    Bitcoin. You can see the full list on [our website](https://cryptoapis.io/).
  name: Tokens
- description: This section represents only endpoints related to XRP (Ripple) blockchain
    protocol.
  name: XRP (Ripple)
- description: This section represents only endpoints related to Omni Layer  exchanges.
  name: Omni Layer
- description: Assets
  name: Assets
- description: Exchange Rates
  name: Exchange Rates
- description: metadata
  name: Metadata
paths:
  /blockchain-data/{blockchain}/{network}/addresses/{address}:
    get:
      description: Through this endpoint the customer can receive basic information
        about a given address based on confirmed/synced blocks only. In the case where
        there are any incoming or outgoing **unconfirmed** transactions for the specific
        address, they **will not** be counted or calculated here.
      operationId: Get Address Details
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: Represents the public address, which is a compressed and shortened
          form of a public key.
        example: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: Represents the public address, which is a compressed and shortened
            form of a public key.
          example: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAddressDetailsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Address Details
      tags:
      - Unified Endpoints
  /blockchain-data/{blockchain}/{network}/omni/addresses/{address}:
    get:
      description: Through this endpoint the customer can receive basic information
        about a given Omni address based on confirmed/synced blocks only. In the case
        where there are any incoming or outgoing **unconfirmed** transactions for
        the specific address, they **will not** be counted or calculated here.
      operationId: List Omni Tokens By Address
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          example: bitcoin
          type: string
        style: simple
      - description: Represents the public address, which is a compressed and shortened
          form of a public key.
        example: mi7iSsKcvyFYNsiYdDZqJmH75RmoHomwmo
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: Represents the public address, which is a compressed and shortened
            form of a public key.
          example: mi7iSsKcvyFYNsiYdDZqJmH75RmoHomwmo
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOmniTokensByAddressResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Omni Tokens By Address
      tags:
      - Omni Layer
  /blockchain-data/xrp/{network}/addresses/{address}:
    get:
      description: "Through this endpoint the customer can receive basic information\
        \ about a given XRP address based on confirmed/synced blocks only. In the\
        \ case where there are any incoming or outgoing **unconfirmed** transactions\
        \ for the specific address, they **will not** be counted or calculated here.\r\
        \n\r\nSince XRP is a different blockchain than Bitcoin and Ethereum, it isn't\
        \ unified."
      operationId: Get XRP (Ripple) Address Details
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet",  are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet",  are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the public address, which is a compressed and shortened
          form of a public key.
        example: rA9bXGJcXvZKaWofrRphdJsBWzhyCfH3z
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: Represents the public address, which is a compressed and shortened
            form of a public key.
          example: rA9bXGJcXvZKaWofrRphdJsBWzhyCfH3z
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXRPRippleAddressDetailsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: Invalid data
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error was encountered, we are working
            on fixing this.
      summary: Get XRP (Ripple) Address Details
      tags:
      - XRP (Ripple)
  /blockchain-data/{blockchain}/{network}/transactions/{transactionId}:
    get:
      description: Through this endpoint customers can obtain details about a transaction
        by the transaction's unique identifier. In UTXO-based protocols like BTC there
        are attributes such as `transactionId` and transaction `hash`. They still
        could be different. In protocols like Ethereum there is only one unique value
        and it's `hash`.
      operationId: Get Transaction Details By Transaction ID
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: Represents the unique identifier of a transaction, i.e. it could
          be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
          `hash` in Ethereum blockchain.
        example: 4b66461bf88b61e1e4326356534c135129defb504c7acb2fd6c92697d79eb250
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 4b66461bf88b61e1e4326356534c135129defb504c7acb2fd6c92697d79eb250
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainDataTransactionNotFound'
          description: The specified transaction has not been found on the specific
            blockchain.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Transaction Details By Transaction ID
      tags:
      - Unified Endpoints
  /blockchain-data/{blockchain}/{network}/omni/addresses/{address}/transactions:
    get:
      description: This endpoint will list Omni transactions by an attribute `address`.
        The transactions listed will detail additional information such as hash, height,
        time of creation in Unix timestamp, etc.
      operationId: List Omni Transactions By Address
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          example: bitcoin
          type: string
        style: simple
      - description: Represents the public address, which is a compressed and shortened
          form of a public key.
        example: mi7iSsKcvyFYNsiYdDZqJmH75RmoHomwmo
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: Represents the public address, which is a compressed and shortened
            form of a public key.
          example: mi7iSsKcvyFYNsiYdDZqJmH75RmoHomwmo
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOmniTransactionsByAddressResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Omni Transactions By Address
      tags:
      - Omni Layer
  /blockchain-data/xrp/{network}/transactions/{transactionHash}:
    get:
      description: "Through this endpoint customers can obtain details about a XRP\
        \ transaction by the transaction's unique identifier. \r\n\r\nSince XRP is\
        \ a different blockchain than Bitcoin and Ethereum, it isn't unified."
      operationId: Get XRP (Ripple) Transaction Details By Transaction ID
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the same as `transactionId` for account-based protocols
          like Ethereum, while it could be different in UTXO-based protocols like
          Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId`
          for SegWit transactions.
        example: 36a1737481edec87bacc3101dfb752ae2c76f9171e7edebe587e330c1ea77c8d
        explode: false
        in: path
        name: transactionHash
        required: true
        schema:
          description: Represents the same as `transactionId` for account-based protocols
            like Ethereum, while it could be different in UTXO-based protocols like
            Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId`
            for SegWit transactions.
          example: 36a1737481edec87bacc3101dfb752ae2c76f9171e7edebe587e330c1ea77c8d
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: Resource not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: Invalid data
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error was encountered, we are working
            on fixing this.
      summary: Get XRP (Ripple) Transaction Details By Transaction ID
      tags:
      - XRP (Ripple)
  /blockchain-data/{blockchain}/{network}/addresses/{address}/transactions:
    get:
      description: This endpoint will list transactions by an attribute `address`.
        The transactions listed will detail additional information such as hash, height,
        time of creation in Unix timestamp, etc.
      operationId: List Transactions By Address
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum-classic
          - ethereum
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - mordor
          - ropsten
          - rinkeby
          example: testnet
          type: string
        style: simple
      - description: Represents the public address, which is a compressed and shortened
          form of a public key.
        example: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: Represents the public address, which is a compressed and shortened
            form of a public key.
          example: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTransactionsByAddressResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Transactions By Address
      tags:
      - Unified Endpoints
  /blockchain-data/xrp/{network}/addresses/{address}/transactions:
    get:
      description: "This endpoint will list XRP transactions by a attribute `address`.\
        \ The transactions listed will detail additional information such as hash,\
        \ height, time of creation in Unix timestamp, etc.\r\n\r\nSince XRP is a different\
        \ blockchain than Bitcoin and Ethereum, it isn't unified."
      operationId: List XRP (Ripple) Transactions by Address
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet",  are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet",  are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the public address, which is a compressed and shortened
          form of a public key.
        example: rA9bXGJcXvZKaWofrRphdJsBWzhyCfH3z
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: Represents the public address, which is a compressed and shortened
            form of a public key.
          example: rA9bXGJcXvZKaWofrRphdJsBWzhyCfH3z
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListXRPRippleTransactionsByAddressResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: Invalid data
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error was encountered, we are working
            on fixing this.
      summary: List XRP (Ripple) Transactions by Address
      tags:
      - XRP (Ripple)
  /blockchain-data/{blockchain}/{network}/omni/address-transactions-unconfirmed/{address}:
    get:
      description: "This endpoint will list unconfirmed Omni transactions by an attribute\
        \ `address`. The transactions listed will detail additional information such\
        \ as hash, height, time of creation in Unix timestamp, etc.\r\n\r\nUnconfirmed\
        \ transactions are usually put in the Mempool and await verification so that\
        \ they can be added to a block."
      operationId: List Unconfirmed Omni Transactions By Address
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          example: bitcoin
          type: string
        style: simple
      - description: Represents the public address, which is a compressed and shortened
          form of a public key.
        example: mi7iSsKcvyFYNsiYdDZqJmH75RmoHomwmo
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: Represents the public address, which is a compressed and shortened
            form of a public key.
          example: mi7iSsKcvyFYNsiYdDZqJmH75RmoHomwmo
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByAddressResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Unconfirmed Omni Transactions By Address
      tags:
      - Omni Layer
  /blockchain-data/{blockchain}/{network}/blocks/hash/{blockHash}/transactions:
    get:
      description: This endpoint will list transactions by an attribute `transactionHash`.
        The transactions listed will detail additional information such as addresses,
        height, time of creation in Unix timestamp, etc.
      operationId: List Transactions by Block Hash
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - testnet
          - mainnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: Represents the hash of the block, which is its unique identifier.
          It represents a cryptographic digital fingerprint made by hashing the block
          header twice through the SHA256 algorithm.
        example: 00000000000000127080d8bcf84f4ad830a71ea0aadce3632579b6b2f26cd94b
        explode: false
        in: path
        name: blockHash
        required: true
        schema:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 00000000000000127080d8bcf84f4ad830a71ea0aadce3632579b6b2f26cd94b
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTransactionsByBlockHashResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Transactions by Block Hash
      tags:
      - Unified Endpoints
  /blockchain-data/xrp/{network}/blocks/hash/{blockHash}/transactions:
    get:
      description: "This endpoint will list transactions by an attribute `blockHash`.\
        \ The transactions listed will detail additional information such as hash,\
        \ addresses, time of creation in Unix timestamp, etc.\r\n\r\nSince XRP is\
        \ a different blockchain than Bitcoin and Ethereum, it isn't unified."
      operationId: List XRP (Ripple) Transactions By Block Hash
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the hash of the block, which is its unique identifier.
          It represents a cryptographic digital fingerprint made by hashing the block
          header twice through the SHA256 algorithm.
        example: 14754656235f865a74eba27791fd41a47bdfe07fe811ff6d78f53db32e129e39
        explode: false
        in: path
        name: blockHash
        required: true
        schema:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 14754656235f865a74eba27791fd41a47bdfe07fe811ff6d78f53db32e129e39
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListXRPRippleTransactionsByBlockHashResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: Invalid data
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error was encountered, we are working
            on fixing this.
      summary: List XRP (Ripple) Transactions By Block Hash
      tags:
      - XRP (Ripple)
  /blockchain-data/{blockchain}/{network}/omni/transactions-unconfirmed/{transactionId}:
    get:
      description: "Through this endpoint customers can obtain information on unconfirmed\
        \ Omni transactions by an attribute `transactionId`. The transaction can have\
        \ information such as hash, height, time of creation in Unix timestamp, etc.\r\
        \n\r\nUnconfirmed transactions are usually put in the Mempool and await verification\
        \ so that they can be added to a block."
      operationId: Get Unconfirmed Omni Transaction By Transaction ID (Txid)
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          example: bitcoin
          type: string
        style: simple
      - description: Represents the unique identifier of a transaction, i.e. it could
          be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
          `hash` in Ethereum blockchain.
        example: 92f17d3d16a1baf7de570a86179cc263cb9866c66778feec2dce111430f41c08
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 92f17d3d16a1baf7de570a86179cc263cb9866c66778feec2dce111430f41c08
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUnconfirmedOmniTransactionByTransactionIDTxidResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainDataTransactionNotFound'
          description: The specified transaction has not been found on the specific
            blockchain.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Unconfirmed Omni Transaction By Transaction ID (Txid)
      tags:
      - Omni Layer
  /blockchain-data/{blockchain}/{network}/blocks/height/{height}/transactions:
    get:
      description: This endpoint will list transactions by an attribute `blockHeight`.
        The transactions listed will detail additional information such as hash, addresses,
        time of creation in Unix timestamp, etc.
      operationId: List Transactions by Block Height
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          - dash
          - dogecoin
          - litecoin
          - bitcoin-cash
          - ethereum-classic
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: Represents the number of blocks in the blockchain preceding this
          specific block. Block numbers have no gaps. A blockchain usually starts
          with block 0 called the "Genesis block".
        example: 673852
        explode: false
        in: path
        name: height
        required: true
        schema:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: 673852
          type: integer
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTransactionsByBlockHeightResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainDataBlockNotFound'
          description: The specified block has not been found on the specific blockchain.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Transactions by Block Height
      tags:
      - Unified Endpoints
  /blockchain-data/{blockchain}/{network}/blocks/height/{height}:
    get:
      description: "Through this endpoint customers can obtain basic information about\
        \ a given mined block, specifically by using the `height` parameter. These\
        \ block details could include the hash of the specific, the previous and the\
        \ next block, its transactions count, its height, etc. \r\n\r\nBlockchain\
        \ specific data is information such as version, nonce, size, bits, merkleroot,\
        \ etc."
      operationId: Get Block Details By Block Height
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          - ethereum-classic
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: Represents the number of blocks in the blockchain preceding this
          specific block. Block numbers have no gaps. A blockchain usually starts
          with block 0 called the "Genesis block".
        example: 673852
        explode: false
        in: path
        name: height
        required: true
        schema:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: 673852
          type: integer
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainDataBlockNotFound'
          description: The specified block has not been found on the specific blockchain.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Block Details By Block Height
      tags:
      - Unified Endpoints
  /blockchain-data/xrp/{network}/blocks/height/{height}:
    get:
      description: "Through this endpoint customers can obtain basic information about\
        \ a given XRP block (a block on the XRP blockchain), specifically by using\
        \ the `height` parameter. These block details could include the hash of the\
        \ specific, the previous and the next block, its transactions count, etc.\r\
        \n\r\nSince XRP is a different blockchain than Bitcoin and Ethereum, it isn't\
        \ unified."
      operationId: Get XRP (Ripple) Block Details By Block Height
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet",  are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet",  are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the number of blocks in the blockchain preceding this
          specific block. Block numbers have no gaps. A blockchain usually starts
          with block 0 called the "Genesis block".
        example: "15886156"
        explode: false
        in: path
        name: height
        required: true
        schema:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: "15886156"
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHeightResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: Resource not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: Invalid data
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error was encountered, we are working
            on fixing this.
      summary: Get XRP (Ripple) Block Details By Block Height
      tags:
      - XRP (Ripple)
  /blockchain-data/{blockchain}/{network}/omni/properties/{propertyId}/transactions:
    get:
      description: "This endpoint will list unconfirmed Omni transactions by an attribute\
        \ `propertyId`. The transactions listed will detail additional information\
        \ such as hash, height, time of creation in Unix timestamp, etc.\r\n\r\nUnconfirmed\
        \ transactions are usually put in the Mempool and await verification so that\
        \ they can be added to a block."
      operationId: List Unconfirmed Omni Transactions By Property ID
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          example: bitcoin
          type: string
        style: simple
      - description: Represents the identifier of the tokens to send.
        example: "2"
        explode: false
        in: path
        name: propertyId
        required: true
        schema:
          description: Represents the identifier of the tokens to send.
          example: "2"
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByPropertyIDResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Unconfirmed Omni Transactions By Property ID
      tags:
      - Omni Layer
  /blockchain-data/{blockchain}/{network}/blocks/hash/{blockHash}:
    get:
      description: "Through this endpoint customers can obtain basic information about\
        \ a given mined block, specifically by using the `hash` parameter. These block\
        \ details could include the hash of the specific, the previous and the next\
        \ block, its transactions count, its height, etc. \r\n\r\nBlockchain specific\
        \ data is information such as version, nonce, size, bits, merkleroot, etc."
      operationId: Get Block Details By Block Hash
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          - ethereum-classic
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: Represents the hash of the block, which is its unique identifier.
          It represents a cryptographic digital fingerprint made by hashing the block
          header twice through the SHA256 algorithm.
        example: 0000000006b3f483bec16b8a85c632bdd30a14a202c83a9148002c9ee441dd0c
        explode: false
        in: path
        name: blockHash
        required: true
        schema:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 0000000006b3f483bec16b8a85c632bdd30a14a202c83a9148002c9ee441dd0c
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainDataBlockNotFound'
          description: The specified block has not been found on the specific blockchain.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Block Details By Block Hash
      tags:
      - Unified Endpoints
  /blockchain-data/xrp/{network}/blocks/hash/{blockHash}:
    get:
      description: "Through this endpoint customers can obtain basic information about\
        \ a given XRP block (a block on the XRP blockchain), specifically by using\
        \ the `hash` parameter. These block details could include the hash of the\
        \ specific, the previous and the next block, the number of included transactions,\
        \ etc. \r\n\r\nSince XRP is a different blockchain than Bitcoin and Ethereum,\
        \ it isn't unified."
      operationId: Get XRP (Ripple) Block Details By Block Hash
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet",  are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet",  are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the hash of the block, which is its unique identifier.
          It represents a cryptographic digital fingerprint made by hashing the block
          header twice through the SHA256 algorithm.
        example: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
        explode: false
        in: path
        name: blockHash
        required: true
        schema:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHashResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: Resource not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: Invalid data
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error was encountered, we are working
            on fixing this.
      summary: Get XRP (Ripple) Block Details By Block Hash
      tags:
      - XRP (Ripple)
  /blockchain-data/{blockchain}/{network}/omni/transactions/{transactionId}:
    get:
      description: Through this endpoint customers can obtain details about an Omni
        transaction by the transaction's unique identifier. The transaction can return
        information such as hash, height, time of creation in Unix timestamp, etc.
      operationId: Get Omni Transaction Details By Transaction ID (Txid)
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          example: bitcoin
          type: string
        style: simple
      - description: Represents the unique identifier of a transaction, i.e. it could
          be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
          `hash` in Ethereum blockchain.
        example: d237ff4a681617b767bf22c4e1e8f5115b95c8c168d6cf53bbdec68529f91ecb
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: d237ff4a681617b767bf22c4e1e8f5115b95c8c168d6cf53bbdec68529f91ecb
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOmniTransactionDetailsByTransactionIDTxidResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainDataTransactionNotFound'
          description: The specified transaction has not been found on the specific
            blockchain.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Omni Transaction Details By Transaction ID (Txid)
      tags:
      - Omni Layer
  /blockchain-data/{blockchain}/{network}/blocks/last:
    get:
      description: "Through this endpoint customers can fetch the last mined block\
        \ in a specific blockchain network, along with its details. These could include\
        \ the hash of the specific, the previous and the next block, its transactions\
        \ count, its height, etc. \r\n\r\nBlockchain specific data is information\
        \ such as version, nonce, size, bits, merkleroot, etc."
      operationId: Get Latest Mined Block
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          - ethereum-classic
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLatestMinedBlockResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainDataBlockNotFound'
          description: The specified block has not been found on the specific blockchain.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Latest Mined Block
      tags:
      - Unified Endpoints
  /blockchain-data/{blockchain}/{network}/omni/blocks/height/{blockHeight}/transactions:
    get:
      description: This endpoint will list Omni transactions by an attribute `blockHeight`.
        The transactions listed will detail additional information such as hash, addresses,
        time of creation in Unix timestamp, etc.
      operationId: List Omni Transactions By Block Height
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          example: bitcoin
          type: string
        style: simple
      - description: Represents the number of blocks in the blockchain preceding this
          specific block. Block numbers have no gaps. A blockchain usually starts
          with block 0 called the "Genesis block".
        example: "1941222"
        explode: false
        in: path
        name: blockHeight
        required: true
        schema:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: "1941222"
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOmniTransactionsByBlockHeightResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Omni Transactions By Block Height
      tags:
      - Omni Layer
  /blockchain-data/xrp/{network}/blocks/last:
    get:
      description: "Through this endpoint customers can fetch the last mined XRP block\
        \ in the blockchain, along with its details. These could include the hash\
        \ of the specific, the previous and the next block, its transactions count,\
        \ its height, etc. \r\n\r\nSince XRP is a different blockchain than Bitcoin\
        \ and Ethereum, it isn't unified."
      operationId: Get Latest Mined XRP (Ripple) Block
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLatestMinedXRPRippleBlockResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: Resource not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error was encountered, we are working
            on fixing this.
      summary: Get Latest Mined XRP (Ripple) Block
      tags:
      - XRP (Ripple)
  /blockchain-data/{blockchain}/{network}/hd/sync:
    post:
      description: HD wallets usually have a lot of addresses and transactions, getting
        the data on demand is a heavy operation. That's why we have created this feature,
        to be able to get HD wallet details or transactions this HD wallet must be
        synced first. In addition to the initial sync we keep updating the synced
        HD wallets all the time.
      operationId: Sync HD Wallet (xPub, yPub, zPub)
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncHDWalletxPubYPubZPubRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncHDWalletxPubYPubZPubResponse'
          description: The resource has been successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidXpub'
          description: The provided Xpub is invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XpubSyncInProgress'
          description: Your wallet (xPub, yPub, zPub) is still syncing, it should
            take few seconds depending on how many transactions it has.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Sync HD Wallet (xPub, yPub, zPub)
      tags:
      - UTXO Based
  /blockchain-data/{blockchain}/{network}/omni/blocks/hash/{blockHash}/transactions:
    get:
      description: This endpoint will list Omni transactions by an attribute `transactionHash`.
        The transactions listed will detail additional information such as addresses,
        height, time of creation in Unix timestamp, etc.
      operationId: List Omni Transactions By Block Hash
      parameters:
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          example: bitcoin
          type: string
        style: simple
      - description: Represents the hash of the block, which is its unique identifier.
          It represents a cryptographic digital fingerprint made by hashing the block
          header twice through the SHA256 algorithm.
        example: 000000000000001f50c9d33d122562daa7fc9582df0b415e626216c37d015818
        explode: false
        in: path
        name: blockHash
        required: true
        schema:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 000000000000001f50c9d33d122562daa7fc9582df0b415e626216c37d015818
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOmniTransactionsByBlockHashResponse'
          description: The request has been successfull.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Omni Transactions By Block Hash
      tags:
      - Omni Layer
  /blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/details:
    get:
      description: HD wallet details is useful endpoint to get the most important
        data about HD wallet without the need to do a lot of calculations, once the
        HD Wallet is synced using Sync endpoint we keep it up to date and we calculate
        these details in advance.
      operationId: Get HD Wallet (xPub, yPub, zPub) Details
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          example: bitcoin
          type: string
        style: simple
      - description: Defines the account extended publicly known key which is used
          to derive all child public keys.
        example: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
        explode: false
        in: path
        name: extendedPublicKey
        required: true
        schema:
          description: Defines the account extended publicly known key which is used
            to derive all child public keys.
          example: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: The way how the HD walled derives, for example when the type
          is ACCOUNT, it derives change and receive addresses while when the type
          is BIP32 it derives directly.
        explode: true
        in: query
        name: derivation
        required: false
        schema:
          description: The way how the HD walled derives, for example when the type
            is ACCOUNT, it derives change and receive addresses while when the type
            is BIP32 it derives directly.
          enum:
          - account
          - bip32
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHDWalletxPubYPubZPubDetailsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XpubNotSynced'
          description: This xPub is not yet synced, please first use endpoint “Sync
            HD (xPub, yPub, zPub) wallet” to synchronize it.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XpubSyncInProgress'
          description: Your wallet (xPub, yPub, zPub) is still syncing, it should
            take few seconds depending on how many transactions it has.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get HD Wallet (xPub, yPub, zPub) Details
      tags:
      - UTXO Based
  /blockchain-data/{blockchain}/{network}/hd/{extendedPublicKey}/transactions:
    get:
      description: This endpoint will list HD Wallet transactions.
      operationId: List HD Wallet (xPub, yPub, zPub) Transactions
      parameters:
      - description: Represents the specific blockchain.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          example: bitcoin
          type: string
        style: simple
      - description: Defines the master public key (xPub) of the account.
        example: tpubD9GMECjiZHCaF9NHSMAeMbQMXnM7CviEJZsYBuztVwsUjPHWjxewWAUXWV2UExaAtoEvQGXDBmVWo6ZHGtj6TsH6Pop7D9DskQwGHA1gu1w
        explode: false
        in: path
        name: extendedPublicKey
        required: true
        schema:
          description: Defines the master public key (xPub) of the account.
          example: tpubD9GMECjiZHCaF9NHSMAeMbQMXnM7CviEJZsYBuztVwsUjPHWjxewWAUXWV2UExaAtoEvQGXDBmVWo6ZHGtj6TsH6Pop7D9DskQwGHA1gu1w
          type: string
        style: simple
      - description: Represents the specific network.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the specific network.
          enum:
          - mainnet
          - testnet
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: The way how the HD walled derives, for example when the type
          is ACCOUNT, it derives change and receive addresses while when the type
          is BIP32 it derives directly.
        explode: true
        in: query
        name: derivation
        required: false
        schema:
          description: The way how the HD walled derives, for example when the type
            is ACCOUNT, it derives change and receive addresses while when the type
            is BIP32 it derives directly.
          enum:
          - account
          - bip32
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHDWalletxPubYPubZPubTransactionsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XpubNotSynced'
          description: This xPub is not yet synced, please first use endpoint “Sync
            HD (xPub, yPub, zPub) wallet” to synchronize it.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XpubSyncInProgress'
          description: Your wallet (xPub, yPub, zPub) is still syncing, it should
            take few seconds depending on how many transactions it has.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List HD Wallet (xPub, yPub, zPub) Transactions
      tags:
      - UTXO Based
  /blockchain-data/{blockchain}/{network}/mempool/fees:
    get:
      description: Through this endpoint customers can obtain fee recommendations.
        Our fees recommendations are based on Mempool data which makes them much more
        accurate than fees based on already mined blocks. Calculations are done in
        real time live. Using this endpoint customers can get gas price for Ethereum,
        fee per byte for Bitcoin, etc.
      operationId: Get Fee Recommendations
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          - ethereum-classic
          - bitcoin-cash
          - dogecoin
          - dash
          - litecoin
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - rinkeby
          - ropsten
          - mordor
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeeRecommendationsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Fee Recommendations
      tags:
      - Unified Endpoints
  /blockchain-data/{blockchain}/{network}/addresses/{contractAddress}/contract:
    get:
      description: This endpoint will return a smart contract details by address,
        this address is the address of the smart contract. It's not the same as the
        smart contract creator address.
      operationId: Get Contract Details by Address
      parameters:
      - explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - ethereum
          - ethereum-classic
          type: string
        style: simple
      - explode: false
        in: path
        name: network
        required: true
        schema:
          enum:
          - mainnet
          - ropsten
          - rinkeby
          - mordor
          type: string
        style: simple
      - description: String identifier of the token
        explode: false
        in: path
        name: contractAddress
        required: true
        schema:
          description: String identifier of the token
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContractDetailsByAddressResponse'
          description: TBD
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Contract Details by Address
      tags: []
  /blockchain-data/{blockchain}/{network}/transactions/{transactionHash}/tokens-transfers:
    get:
      description: "Through this endpoint customers can obtain a list with token transfers\
        \ by the `transactionHash` attribute. Token transfers may include information\
        \ such as addresses of the sender and recipient, token name, token symbol,\
        \ etc.\r\n\r\n{note}This refers only to transfers done for **tokens** not\
        \ coins.{/note}"
      operationId: List Tokens Transfers By Transaction Hash
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Ethereum Classic, etc.
        example: ethereum
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Ethereum Classic, etc.
          enum:
          - ethereum
          example: ethereum
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "ropsten", "rinkeby" are test networks.
        example: ropsten
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - ropsten
          - rinkeby
          example: ropsten
          type: string
        style: simple
      - description: Represents the hash of the transaction, which is its unique identifier.
          It represents a cryptographic digital fingerprint made by hashing the block
          header twice through the SHA256 algorithm.
        example: 0xbe38781783b1b9d480219255ff98e20335a39e13979a66112efa33f05fde0a33
        explode: false
        in: path
        name: transactionHash
        required: true
        schema:
          description: Represents the hash of the transaction, which is its unique
            identifier. It represents a cryptographic digital fingerprint made by
            hashing the block header twice through the SHA256 algorithm.
          example: 0xbe38781783b1b9d480219255ff98e20335a39e13979a66112efa33f05fde0a33
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTokensTransfersByTransactionHashResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Tokens Transfers By Transaction Hash
      tags:
      - Tokens
  /blockchain-data/{blockchain}/{network}/addresses/{address}/tokens-transfers:
    get:
      description: "Through this endpoint customers can obtain a list with token transfers\
        \ by the `address` attribute. Token transfers may include information such\
        \ as addresses of the sender and recipient, token name, token symbol, etc.\r\
        \n\r\n{note}This refers only to transfers done for **tokens** not coins.{/note}"
      operationId: List Tokens Transfers By Address
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Ethereum Classic, etc.
        example: ethereum
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Ethereum Classic, etc.
          enum:
          - ethereum
          example: ethereum
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "ropsten", "rinkeby" are test networks.
        example: ropsten
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - ropsten
          - rinkeby
          example: ropsten
          type: string
        style: simple
      - description: Represents the public address, which is a compressed and shortened
          form of a public key.
        example: 0x033ef6db9fbd0ee60e2931906b987fe0280471a0
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: Represents the public address, which is a compressed and shortened
            form of a public key.
          example: 0x033ef6db9fbd0ee60e2931906b987fe0280471a0
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTokensTransfersByAddressResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Tokens Transfers By Address
      tags:
      - Tokens
  /blockchain-data/{blockchain}/{network}/addresses/{address}/tokens:
    get:
      description: Through this endpoint customers can obtain token data by providing
        an attribute - `address`.  The information that can be returned can include
        the contract address, the token symbol, type and balance.
      operationId: List Tokens By Address
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Ethereum Classic, etc.
        example: ethereum
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Ethereum Classic, etc.
          enum:
          - ethereum
          example: ethereum
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "ropsten", "rinkeby" are test networks.
        example: ropsten
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - ropsten
          - rinkeby
          example: ropsten
          type: string
        style: simple
      - description: Represents the public address, which is a compressed and shortened
          form of a public key.
        example: 0x033ef6db9fbd0ee60e2931906b987fe0280471a0
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: Represents the public address, which is a compressed and shortened
            form of a public key.
          example: 0x033ef6db9fbd0ee60e2931906b987fe0280471a0
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTokensByAddressResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Tokens By Address
      tags:
      - Tokens
  /blockchain-events/{blockchain}/{network}/subscriptions/address-coins-transactions-unconfirmed:
    post:
      callbacks:
        ADDRESS_COINS_TRANSACTION_UNCONFIRMED:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: aDDRESS_COINS_TRANSACTION_UNCONFIRMED_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddressCoinsTransactionUnconfirmed'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can create callback subscriptions\
        \ for a specific event. In this case the event is when there are new unconfirmed\
        \ coins transactions for the user. By creating this subscription the user\
        \ will be notified by Crypto APIs 2.0 when that event occurs. The information\
        \ is returned per specified address.\r\n\r\nUnconfirmed coins transactions\
        \ remain in the mempool (memory pool) until they are confirmed by miners and\
        \ added to the next block. Sometimes spikes in transaction activity can cause\
        \ delays in confirmations.\r\n\r\n{note}To have an operational callback subscription,\
        \ you need to first verify a domain for the Callback URL. Please see more\
        \ information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{note}It is also **important to note** that just because pending unconfirmed\
        \ transactions are in the mempool, **doesn't necessarily** mean they will\
        \ get confirmed.{/note}\r\n\r\n{warning}Crypto APIs will notify the user **only\
        \ when** the event occurs. There are cases when the specific event doesn't\
        \ happen at all, or takes a long time to do so. A callback notification **will\
        \ not** be sent if the event does not or cannot occur, or will take long time\
        \ to occur.{/warning}"
      operationId: New unconfirmed coins transactions
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUnconfirmedCoinsTransactionsRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUnconfirmedCoinsTransactionsResponse'
          description: The resource has been successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainEventsCallbacksLimitReached'
          description: You have reached the maximum number of active Blockchain Events
            subscriptions which is {callbacks_limit} now. Please upgrade your plan
            to be get higher number of active subscriptions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: New unconfirmed coins transactions
      tags:
      - Create Subscriptions for
  /blockchain-events/{blockchain}/{network}/subscriptions/address-tokens-transactions-unconfirmed:
    post:
      callbacks:
        ADDRESS_TOKENS_TRANSACTION_UNCONFIRMED:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: aDDRESS_TOKENS_TRANSACTION_UNCONFIRMED_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddressTokensTransactionUnconfirmed'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can create callback subscriptions\
        \ for a specific event. In this case the event is when there are new unconfirmed\
        \ tokens transactions for the user. By creating this subscription the user\
        \ will be notified by Crypto APIs 2.0 when that event occurs. The information\
        \ is returned per specified address.\r\n\r\nUnconfirmed tokens transactions\
        \ remain in the mempool (memory pool) until they are confirmed by miners and\
        \ added to the next block. Sometimes spikes in transaction activity can cause\
        \ delays in confirmations.\r\n\r\n{note}To have an operational callback subscription,\
        \ you need to first verify a domain for the Callback URL. Please see more\
        \ information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{note}It is also **important to note** that just because pending unconfirmed\
        \ transactions are in the mempool, **doesn't necessarily** mean they will\
        \ get confirmed.{/note}\r\n\r\n{warning}Crypto APIs will notify the user **only\
        \ when** the event occurs. There are cases when the specific event doesn't\
        \ happen at all, or takes a long time to do so. A callback notification **will\
        \ not** be sent if the event does not or cannot occur, or will take long time\
        \ to occur.{/warning}"
      operationId: New unconfirmed tokens transactions
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUnconfirmedTokensTransactionsRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUnconfirmedTokensTransactionsResponse'
          description: The resource has been successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainEventsCallbacksLimitReached'
          description: You have reached the maximum number of active Blockchain Events
            subscriptions which is {callbacks_limit} now. Please upgrade your plan
            to be get higher number of active subscriptions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: New unconfirmed tokens transactions
      tags:
      - Create Subscriptions for
  /blockchain-events/{blockchain}/{network}/subscriptions/address-coins-transactions-confirmed:
    post:
      callbacks:
        ADDRESS_COINS_TRANSACTION_CONFIRMED:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: aDDRESS_COINS_TRANSACTION_CONFIRMED_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddressCoinsTransactionConfirmed'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can create callback subscriptions\
        \ for a specific event. In this case the event is when there are new incoming\
        \ or outgoing confirmed transactions for coins from/to the customer's address.\
        \ By creating this subscription the user will be notified by Crypto APIs 2.0\
        \ when that event occurs. The information is returned per specified address.\
        \ \r\n\r\nBeing confirmed means that the transactions are verified by miners\
        \ and added to the next block.\r\n\r\n{note}To have an operational callback\
        \ subscription, you need to first verify a domain for the Callback URL. Please\
        \ see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{warning}Crypto APIs will notify the user **only when** the event occurs.\
        \ There are cases when the specific event doesn't happen at all, or takes\
        \ a long time to do so. A callback notification **will not** be sent if the\
        \ event does not or cannot occur, or will take long time to occur.{/warning}"
      operationId: New confirmed coins transactions
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewConfirmedCoinsTransactionsRequestBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewConfirmedCoinsTransactionsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainEventsCallbacksLimitReached'
          description: You have reached the maximum number of active Blockchain Events
            subscriptions which is {callbacks_limit} now. Please upgrade your plan
            to be get higher number of active subscriptions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: New confirmed coins transactions
      tags:
      - Create Subscriptions for
  /blockchain-events/{blockchain}/{network}/subscriptions/address-tokens-transactions-confirmed:
    post:
      callbacks:
        ADDRESS_TOKENS_TRANSACTION_CONFIRMED:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: aDDRESS_TOKENS_TRANSACTION_CONFIRMED_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddressTokensTransactionConfirmed'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can create callback subscriptions\
        \ for a specific event. In this case the event is when there are new incoming\
        \ or outgoing confirmed transactions for tokens from/to the customer's address.\
        \ By creating this subscription the user will be notified by Crypto APIs 2.0\
        \ when that event occurs. The information is returned per specified address.\
        \ \r\n\r\nBeing confirmed means that the transactions are verified by miners\
        \ and added to the next block. This endpoint refers to **tokens transactions\
        \ only, not coins**.\r\n\r\n{note}To have an operational callback subscription,\
        \ you need to first verify a domain for the Callback URL. Please see more\
        \ information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{warning}Crypto APIs will notify the user **only when** the event occurs.\
        \ There are cases when the specific event doesn't happen at all, or takes\
        \ a long time to do so. A callback notification **will not** be sent if the\
        \ event does not or cannot occur, or will take long time to occur.{/warning}"
      operationId: New confirmed tokens transactions
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewConfirmedTokensTransactionsRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewConfirmedTokensTransactionsResponse'
          description: The resource has been successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainEventsCallbacksLimitReached'
          description: You have reached the maximum number of active Blockchain Events
            subscriptions which is {callbacks_limit} now. Please upgrade your plan
            to be get higher number of active subscriptions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: New confirmed tokens transactions
      tags:
      - Create Subscriptions for
  /blockchain-events/{blockchain}/{network}/subscriptions/address-tokens-transactions-confirmed-each-confirmation:
    post:
      callbacks:
        ADDRESS_TOKENS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: aDDRESS_TOKENS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddressTokensTransactionConfirmedEachConfirmation'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can create callback subscriptions\
        \ for a specific event. In this case the event is when there are new incoming\
        \ or outgoing confirmed transactions for tokens from/to the customer's address\
        \ with also a response at each confirmation the transaction has received until\
        \ the specified confirmations limit is reached. By creating this subscription\
        \ the user will be notified by Crypto APIs 2.0 when that event occurs. The\
        \ information is returned per specified address. \r\n\r\nBeing confirmed means\
        \ that the transactions are verified by miners and added to the next block.\
        \ This endpoint refers to **tokens transactions only, not coins**.\r\n\r\n\
        {note}To have an operational callback subscription, you need to first verify\
        \ a domain for the Callback URL. Please see more information on Callbacks\
        \ [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{warning}Crypto APIs will notify the user **only when** the event occurs.\
        \ There are cases when the specific event doesn't happen at all, or takes\
        \ a long time to do so. A callback notification **will not** be sent if the\
        \ event does not or cannot occur, or will take long time to occur.{/warning}"
      operationId: New confirmed tokens transactions and each confirmation
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewConfirmedTokensTransactionsAndEachConfirmationRequestBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewConfirmedTokensTransactionsAndEachConfirmationResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainEventsCallbacksLimitReached'
          description: You have reached the maximum number of active Blockchain Events
            subscriptions which is {callbacks_limit} now. Please upgrade your plan
            to be get higher number of active subscriptions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: New confirmed tokens transactions and each confirmation
      tags:
      - Create Subscriptions for
  /blockchain-events/{blockchain}/{network}/subscriptions/address-coins-transactions-confirmed-each-confirmation:
    post:
      callbacks:
        ADDRESS_COINS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: aDDRESS_COINS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddressCoinsTransactionConfirmedEachConfirmation'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can create callback subscriptions\
        \ for a specific event. In this case the event is when there are new incoming\
        \ or outgoing confirmed transactions for coins from/to the customer's address\
        \ with also a response at each confirmation the transaction has received until\
        \ the specified confirmations limit is reached. By creating this subscription\
        \ the user will be notified by Crypto APIs 2.0 when that event occurs. The\
        \ information is returned per specified address. \r\n\r\nBeing confirmed means\
        \ that the transactions are verified by miners and added to the next block.\
        \ This endpoint refers to **coins transactions only, not tokens**.\r\n\r\n\
        {note}To have an operational callback subscription, you need to first verify\
        \ a domain for the Callback URL. Please see more information on Callbacks\
        \ [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{warning}Crypto APIs will notify the user **only when** the event occurs.\
        \ There are cases when the specific event doesn't happen at all, or takes\
        \ a long time to do so. A callback notification **will not** be sent if the\
        \ event does not or cannot occur, or will take long time to occur.{/warning}"
      operationId: New confirmed coins transactions and each confirmation
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewConfirmedCoinsTransactionsAndEachConfirmationRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewConfirmedCoinsTransactionsAndEachConfirmationResponse'
          description: The resource has been successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainEventsCallbacksLimitReached'
          description: You have reached the maximum number of active Blockchain Events
            subscriptions which is {callbacks_limit} now. Please upgrade your plan
            to be get higher number of active subscriptions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: New confirmed coins transactions and each confirmation
      tags:
      - Create Subscriptions for
  /blockchain-events/{blockchain}/{network}/subscriptions/transaction-mined:
    post:
      callbacks:
        TRANSACTION_MINED:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: tRANSACTION_MINED_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/TransactionMined'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can create callback subscriptions\
        \ for a specific event. In this case the event is when a specific transaction\
        \ is mined. By creating this subscription the user will be notified by Crypto\
        \ APIs 2.0 when that event occurs. The information is returned per specified\
        \ `transactionId`.\r\n\r\nA transaction is mined when it is included in a\
        \ new block in the blockchain.\r\n\r\n{note}To have an operational callback\
        \ subscription, you need to first verify a domain for the Callback URL. Please\
        \ see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{warning}Crypto APIs will notify the user **only when** the event occurs.\
        \ There are cases when the specific event doesn't happen at all, or takes\
        \ a long time to do so. A callback notification **will not** be sent if the\
        \ event does not or cannot occur, or will take long time to occur.{/warning}"
      operationId: Mined transaction
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinedTransactionRequestBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinedTransactionResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainEventsCallbacksLimitReached'
          description: You have reached the maximum number of active Blockchain Events
            subscriptions which is {callbacks_limit} now. Please upgrade your plan
            to be get higher number of active subscriptions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Mined transaction
      tags:
      - Create Subscriptions for
  /blockchain-events/{blockchain}/{network}/subscriptions/block-mined:
    post:
      callbacks:
        BLOCK_MINED:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: bLOCK_MINED_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/BlockMined'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can create callback subscriptions\
        \ for a specific event. In this case the event is when a new block is mined\
        \ in the specific blockchain. By creating this subscription the user will\
        \ be notified by Crypto APIs 2.0 when that event occurs. The information is\
        \ returned per specified address.\r\n\r\nA new block is mined when it is added\
        \ to the chain once a consensus is reached by the majority of the miners,\
        \ which is when the block gets validated and added to the blockchain.\r\n\r\
        \n{note}To have an operational callback subscription, you need to first verify\
        \ a domain for the Callback URL. Please see more information on Callbacks\
        \ [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{warning}Crypto APIs will notify the user **only when** the event occurs.\
        \ There are cases when the specific event doesn't happen at all, or takes\
        \ a long time to do so. A callback notification **will not** be sent if the\
        \ event does not or cannot occur, or will take long time to occur.{/warning}"
      operationId: New Block
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBlockRequestBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewBlockResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainEventsCallbacksLimitReached'
          description: You have reached the maximum number of active Blockchain Events
            subscriptions which is {callbacks_limit} now. Please upgrade your plan
            to be get higher number of active subscriptions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: New Block
      tags:
      - Create Subscriptions for
  /blockchain-events/{blockchain}/{network}/subscriptions:
    get:
      description: "Through this endpoint the customer can obtain a list of their\
        \ callback subscriptions for the available Blockchain events.\r\n\r\nCurrently\
        \ Crypto APIs 2.0 offers certain Blockchain event endpoints which allow the\
        \ user to subscribe for one/a few/all and receive callback notifications when\
        \ the specific event occurs.\r\n\r\n{note}To have an operational callback\
        \ subscription, you need to first verify a domain for the Callback URL. Please\
        \ see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{warning}Crypto APIs will notify the user **only when** the event occurs.\
        \ There are cases when the specific event doesn't happen at all, or takes\
        \ a long time to do so. A callback notification **will not** be sent if the\
        \ event does not or cannot occur, or will take long time to occur.{/warning}"
      operationId: List Blockchain Events Subscriptions
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBlockchainEventsSubscriptionsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Blockchain Events Subscriptions
      tags:
      - Manage Subscriptions
  /blockchain-events/{blockchain}/{network}/subscriptions/{referenceId}:
    delete:
      description: "Through this endpoint the customer can delete blockchain event\
        \ subscriptions they have by attributes `referenceId` and `network`.\r\n\r\
        \nCurrently Crypto APIs 2.0 offers certain Blockchain event endpoints which\
        \ allow the user to subscribe for one/a few/all and receive callback notifications\
        \ when the specific event occurs.\r\n\r\n{note}To have an operational callback\
        \ subscription, you need to first verify a domain for the Callback URL. Please\
        \ see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}\r\
        \n\r\n{warning}Crypto APIs will notify the user **only when** the event occurs.\
        \ There are cases when the specific event doesn't happen at all, or takes\
        \ a long time to do so. A callback notification **will not** be sent if the\
        \ event does not or cannot occur, or will take long time to occur.{/warning}"
      operationId: Delete Blockchain Event Subscription
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: Represents a unique ID used to reference the specific callback
          subscription.
        example: d3fd6a0e-f2b6-4bb5-9fd3-7944bcec9e9f
        explode: false
        in: path
        name: referenceId
        required: true
        schema:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: d3fd6a0e-f2b6-4bb5-9fd3-7944bcec9e9f
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBlockchainEventSubscriptionResponse'
          description: The delete request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Delete Blockchain Event Subscription
      tags:
      - Manage Subscriptions
  /blockchain-automations/{blockchain}/{network}/coins-forwarding/automations:
    get:
      description: "Through this endpoint customers can list all of their **coins**\
        \ forwarding automations (**not** tokens).\r\n\r\nCustomers can set up automatic\
        \ forwarding functions for coins by setting a `fromAddress` and a `toAddress`,\
        \ and specifying the amount that can be transferred between addresses. \r\n\
        \r\nA `feePriority` will be returned which represents the fee priority of\
        \ the automation whether it is \"SLOW\", \"STANDARD\" OR \"FAST\".\r\n\r\n\
        {warning}The subscription will work for all incoming transactions until it\
        \ is deleted. There is no need to do that for every transaction.{/warning}"
      operationId: List Coins Forwarding Automations
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCoinsForwardingAutomationsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Coins Forwarding Automations
      tags:
      - Automatic Coins Forwarding
    post:
      callbacks:
        COINS_FORWARDING_SUCCESS:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: cOINS_FORWARDING_SUCCESS_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CoinsForwardingSuccess'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
        COINS_FORWARDING_FAIL:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: cOINS_FORWARDING_FAIL_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CoinsForwardingFail'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can set up an automatic forwarding\
        \ function specifically for coins (**not** tokens). They can have a `toAddress`\
        \ which is essentially the main address and the destination for the automatic\
        \ coins forwarding. \r\n\r\nThere is also a `minimumTransferAmount` which\
        \ only when reached will then trigger the forwarding. Through this the customer\
        \ can save from fees.\r\n\r\nMoreover, `feePriority` can be also set,  which\
        \ defines how quickly to move the coins once they are received. The higher\
        \ priority, the larger the fee will be. It can be \"SLOW\", \"STANDARD\" or\
        \ \"FAST\".\r\n\r\nThe response of this endpoint contains an attribute `fromAddress`\
        \ which can be used as a deposit address. Any funds received by this address\
        \ will be automatically forwarded to `toAddress` based on what the customer\
        \ has set for the automation.\r\n\r\nFor this automatic forwarding the customer\
        \ can set a callback subscription.\r\n\r\n{warning}The subscription will work\
        \ for all incoming transactions until it is deleted. There is no need to do\
        \ that for every transaction.{/warning}\r\n\r\n{note}This endpoint generates\
        \ a new `fromAddress` each time.{/note}"
      operationId: Create Automatic Coins Forwarding
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomaticCoinsForwardingRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAutomaticCoinsForwardingResponse'
          description: The resource has been successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoinsForwardingAutomationsLimitReached'
          description: Your current package plan coins forwarding automations limit
            of {automations_limit} reached. Please contact us if you need more or
            upgrade your plan.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
          description: The specified resource already exists.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Create Automatic Coins Forwarding
      tags:
      - Automatic Coins Forwarding
  /blockchain-automations/{blockchain}/{network}/coins-forwarding/automations/{referenceId}:
    delete:
      description: "Through this endpoint customers can delete a forwarding function\
        \ they have set for **coins** (**not** tokens).\r\n\r\nBy setting a `fromAddress`\
        \ and a `toAddress`, and specifying the amount, coins can be transferred between\
        \ addresses. \r\n\r\nA `feePriority` will be returned which represents the\
        \ fee priority of the automation whether it is \"SLOW\", \"STANDARD\" OR \"\
        FAST\".\r\n\r\n{warning}The subscription will work for all incoming transactions\
        \ until it is deleted. There is no need to do that for every transaction.{/warning}"
      operationId: Delete Automatic Coins Forwarding
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          example: testnet
          type: string
        style: simple
      - description: Represents a unique ID used to reference the specific callback
          subscription.
        example: 600955ea5e75d660e71d3c7d
        explode: false
        in: path
        name: referenceId
        required: true
        schema:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 600955ea5e75d660e71d3c7d
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAutomaticCoinsForwardingResponse'
          description: The delete request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Delete Automatic Coins Forwarding
      tags:
      - Automatic Coins Forwarding
  /blockchain-automations/{blockchain}/{network}/tokens-forwarding/automations/add-token:
    post:
      callbacks:
        TOKENS_FORWARDING_SUCCESS:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: tOKENS_FORWARDING_SUCCESS_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/TokensForwardingSuccess'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
        TOKENS_FORWARDING_FAIL:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: tOKENS_FORWARDING_FAIL_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/TokensForwardingFail'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can add **Automatic Tokens forwardings**\
        \ to an already existing `fromAddress`. Unlike the \"Create Automatic Tokens\
        \ Forwarding\" endpoint, where the `fromAddress` is generated each time, with\
        \ this endpoint customers can add an automation from another token to one\
        \ and the same `fromAddress`.\r\n\r\nThe `fromAddress` can be used as a deposit\
        \ address. Any funds received by this address will be automatically forwarded\
        \ to `toAddress` based on what the customer has set for the automation. The\
        \  `toAddress` is essentially the main address and destination for the automatic\
        \ tokens forwarding.\r\n\r\nThere is also a `minimumTransferAmount` which\
        \ only when reached will then trigger the forwarding. Through this the customer\
        \ can save from fees.\r\n\r\nMoreover, `feePriority` can be also set,  which\
        \ defines how quickly to move the tokens once they are received. The higher\
        \ priority, the larger the fee will be. It can be \"SLOW\", \"STANDARD\" or\
        \ \"FAST\".\r\n\r\nFor this automatic forwarding the customer can set a callback\
        \ subscription.\r\n\r\n{warning}The subscription will work for all incoming\
        \ transactions until it is deleted. There is no need to do that for every\
        \ transaction.{/warning}"
      operationId: Add Tokens To Existing fromAddress
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          example: bitcoin
          type: string
        style: simple
      - description: Network
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Network
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTokensToExistingFromAddressRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTokensToExistingFromAddressResponse'
          description: The resource has been successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensForwardingAutomationsLimitReached'
          description: Your current package plan tokens forwarding automations limit
            of {automations_limit} reached. Please contact us if you need more or
            upgrade your plan.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Add Tokens To Existing fromAddress
      tags:
      - Automatic Tokens Forwarding
  /blockchain-automations/{blockchain}/{network}/tokens-forwarding/automations:
    get:
      description: "Through this endpoint customers can list all of their **tokens**\
        \ forwarding automations (**not** coins).\r\n\r\nCustomers can set up automatic\
        \ forwarding functions for tokens by setting a `fromAddress` and a `toAddress`,\
        \ and specifying the amount that can be transferred between addresses. \r\n\
        \r\nA `feePriority` will be returned which represents the fee priority of\
        \ the automation whether it is \"SLOW\", \"STANDARD\" OR \"FAST\". \r\n\r\n\
        {warning}The subscription will work for all incoming transactions until it\
        \ is deleted. There is no need to do that for every transaction.{/warning}"
      operationId: List Tokens Forwarding Automations
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTokensForwardingAutomationsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Tokens Forwarding Automations
      tags:
      - Automatic Tokens Forwarding
    post:
      callbacks:
        TOKENS_FORWARDING_SUCCESS:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: tOKENS_FORWARDING_SUCCESS_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/TokensForwardingSuccess'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
        TOKENS_FORWARDING_FAIL:
          '{$request.BODY#/callbackUrl':
            post:
              operationId: tOKENS_FORWARDING_FAIL_request_BODYCallbackUrlPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/TokensForwardingFail'
                required: true
              responses:
                "200":
                  description: A Webhook request expects a response with status code
                    200 (OK) or it will retry the request.
              x-callback-request: true
      description: "Through this endpoint customers can set up an automatic forwarding\
        \ function specifically for tokens (**not** coins). They can have a `toAddress`\
        \ which is essentially the main address and the destination for the automatic\
        \ tokens forwarding. \r\n\r\nThere is also a `minimumTransferAmount` which\
        \ only when reached will then trigger the forwarding. Through this the customer\
        \ can save from fees.\r\n\r\nMoreover, `feePriority` can be also set,  which\
        \ defines how quickly to move the tokens once they are received. The higher\
        \ priority, the larger the fee will be. It can be \"SLOW\", \"STANDARD\" or\
        \ \"FAST\".\r\n\r\nThe response of this endpoint contains an attribute `fromAddress`\
        \ which can be used as a deposit address. Any funds received by this address\
        \ will be automatically forwarded to `toAddress` based on what the customer\
        \ has set for the automation.\r\n\r\nFor this automatic forwarding the customer\
        \ can set a callback subscription.\r\n\r\n{warning}The subscription will work\
        \ for all incoming transactions until it is deleted. There is no need to do\
        \ that for every transaction.{/warning}\r\n\r\n{note}This endpoint generates\
        \ a new `fromAddress` each time.{/note}"
      operationId: Create Automatic Tokens Forwarding
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomaticTokensForwardingRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAutomaticTokensForwardingResponse'
          description: The resource has been successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensForwardingAutomationsLimitReached'
          description: Your current package plan tokens forwarding automations limit
            of {automations_limit} reached. Please contact us if you need more or
            upgrade your plan.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Create Automatic Tokens Forwarding
      tags:
      - Automatic Tokens Forwarding
  /blockchain-automations/{blockchain}/{network}/tokens-forwarding/fee-addresses:
    get:
      description: Through this endpoint customers can obtain details about a fee
        address. Only one fee address per currency per network for a user's account
        can be set no matter how many tokens or subscriptions they have or want to
        automatically forward.
      operationId: Get Fee Address Details
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeeAddressDetailsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Fee Address Details
      tags:
      - Automatic Tokens Forwarding
  /blockchain-automations/{blockchain}/{network}/tokens-forwarding/automations/{referenceId}:
    delete:
      description: "Through this endpoint customers can delete a forwarding function\
        \ they have set for **tokens** (**not** coins).\r\n\r\nBy setting a `fromAddress`\
        \ and a `toAddress`, and specifying the amount, tokens can be transferred\
        \ between addresses. \r\n\r\nA `feePriority` will be returned which represents\
        \ the fee priority of the automation whether it is \"SLOW\", \"STANDARD\"\
        \ OR \"FAST\".\r\n\r\n{warning}The subscription will work for all incoming\
        \ transactions until it is deleted. There is no need to do that for every\
        \ transaction.{/warning}"
      operationId: Delete Automatic Tokens Forwarding
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - ethereum
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          example: testnet
          type: string
        style: simple
      - description: Represents a unique ID used to reference the specific callback
          subscription.
        example: 6017dd02a309213863be9e55
        explode: false
        in: path
        name: referenceId
        required: true
        schema:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 6017dd02a309213863be9e55
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAutomaticTokensForwardingResponse'
          description: The delete request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
          description: The specified resource has not been found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Delete Automatic Tokens Forwarding
      tags:
      - Automatic Tokens Forwarding
  /blockchain-tools/{blockchain}/{network}/addresses/validate:
    post:
      description: This endpoint checks user public addresses whether they are valid
        or not.
      operationId: Validate Address
      parameters:
      - description: Represents the specific blockchain protocol name, e.g. Ethereum,
          Bitcoin, etc.
        example: bitcoin
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          enum:
          - bitcoin
          - bitcoin-cash
          - litecoin
          - dogecoin
          - dash
          - ethereum
          - ethereum-classic
          - xrp
          example: bitcoin
          type: string
        style: simple
      - description: Represents the name of the blockchain network used; blockchain
          networks are usually identical as technology and software, but they differ
          in data, e.g. - "mainnet" is the live network with actual data while networks
          like "testnet", "ropsten", "rinkeby" are test networks.
        example: testnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          enum:
          - mainnet
          - testnet
          - ropsten
          - rinkeby
          - mordor
          - kotti
          example: testnet
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateAddressRequestBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateAddressResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: Invalid data
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Validate Address
      tags:
      - Validating
  /market-data/assets/supported:
    get:
      description: This endpoint will return a list of supported assets. The asset
        could be a cryptocurrency or FIAT assets that we support. Each asset has a
        unique identifier - `assetId` and a unique symbol in the form of a string,
        e.g. "BTC".
      operationId: List Supported Assets
      parameters:
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines the type of the supported asset. This could be either
          "crypto" or "fiat".
        example: crypto
        explode: true
        in: query
        name: assetType
        required: false
        schema:
          description: Defines the type of the supported asset. This could be either
            "crypto" or "fiat".
          enum:
          - fiat
          - crypto
          example: crypto
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSupportedAssetsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Supported Assets
      tags:
      - Metadata
  /market-data/exchange-rates/by-symbols/{fromAssetSymbol}/{toAssetSymbol}:
    get:
      description: Through this endpoint customers can obtain exchange rates by asset
        symbols. The process represents the exchange rate value of a single unit of
        one asset versus another one. Data is provided per unique asset symbol.
      operationId: Get Exchange Rate By Asset Symbols
      parameters:
      - description: Defines the base asset symbol to get a rate for.
        example: btc
        explode: false
        in: path
        name: fromAssetSymbol
        required: true
        schema:
          description: Defines the base asset symbol to get a rate for.
          example: btc
          type: string
        style: simple
      - description: Defines the relation asset symbol in which the base asset rate
          will be displayed.
        example: usd
        explode: false
        in: path
        name: toAssetSymbol
        required: true
        schema:
          description: Defines the relation asset symbol in which the base asset rate
            will be displayed.
          example: usd
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExchangeRateByAssetSymbolsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouldNotCalculateRateForPair'
          description: Rate could not be calculated due to not enough pair trades
            data.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Exchange Rate By Asset Symbols
      tags:
      - Exchange Rates
  /market-data/exchange-rates/by-asset-ids/{fromAssetId}/{toAssetId}:
    get:
      description: Through this endpoint customers can obtain exchange rates by asset
        IDs. The process represents the exchange rate value of a single unit of one
        asset versus another one. Data is provided per unique asset Reference ID.
      operationId: Get Exchange Rate By Assets IDs
      parameters:
      - description: Defines the base asset Reference ID to get a rate for.
        example: 5b1ea92e584bf50020130612
        explode: false
        in: path
        name: fromAssetId
        required: true
        schema:
          description: Defines the base asset Reference ID to get a rate for.
          example: 5b1ea92e584bf50020130612
          type: string
        style: simple
      - description: Defines the relation asset Reference ID in which the base asset
          rate will be displayed.
        example: 5b1ea92e584bf50020130615
        explode: false
        in: path
        name: toAssetId
        required: true
        schema:
          description: Defines the relation asset Reference ID in which the base asset
            rate will be displayed.
          example: 5b1ea92e584bf50020130615
          type: string
        style: simple
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExchangeRateByAssetsIDsResponse'
          description: The request has been successfull.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouldNotCalculateRateForPair'
          description: Rate could not be calculated due to not enough pair trades
            data.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: Get Exchange Rate By Assets IDs
      tags:
      - Exchange Rates
  /market-data/assets/details:
    get:
      description: "This endpoint will return details on a requested asset. The asset\
        \ could be a cryptocurrency or FIAT asset that we support. Each asset has\
        \ a unique identifier - `assetId` and a unique symbol in the form of a string,\
        \ e.g. \"BTC\".\r\n\r\nThe details returned could include information on the\
        \ latest rate and rate fluctuation of different periods of time - 24 hours,\
        \ a week, one hour, the encoding of the logo, and more."
      operationId: List Assets Details
      parameters:
      - description: In batch situations the user can use the context to correlate
          responses with requests. This property is present regardless of whether
          the response was successful or returned as an error. `context` is specified
          by the user.
        explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Defines the type of the supported asset. This could be either
          "crypto" or "fiat".
        example: crypto
        explode: true
        in: query
        name: assetType
        required: false
        schema:
          description: Defines the type of the supported asset. This could be either
            "crypto" or "fiat".
          enum:
          - fiat
          - crypto
          example: crypto
          type: string
        style: form
      - description: Defines how many items should be returned in the response per
          page basis.
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        style: form
      - description: The starting index of the response items, i.e. where the response
          should start listing the returned items.
        example: 10
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssetsDetailsResponse'
          description: The request has been successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPagination'
          description: The pagination attributes that have been used are invalid.
            Please check the Documentation to see details on pagination.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApiKey'
          description: The provided API key is invalid. Please, generate a new one
            from your Dashboard.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCredits'
          description: You have insufficient credits. Please upgrade your plan from
            your Dashboard or contact our team via email.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan'
          description: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
          description: The data provided seems to be invalid.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
          description: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestBodyStructure'
          description: 'Your request body for POST requests must have a structure
            of { data: { item: [...properties] } }'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitReached'
          description: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServerError'
          description: An unexpected server error has occurred, we are working to
            fix this. Please try again later and in case it occurs again please report
            it to our team via email.
      summary: List Assets Details
      tags:
      - Assets
components:
  schemas:
    SyncHDWalletxPubYPubZPubRequestBody:
      example:
        data:
          item:
            extendedPublicKey: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/SyncHDWalletxPubYPubZPubRequestBody_data'
      required:
      - data
      type: object
    NewUnconfirmedCoinsTransactionsRequestBody:
      example:
        data:
          item:
            address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
            callbackSecretKey: yourSecretKey
            callbackUrl: http://example.com
            allowDuplicates: true
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/NewUnconfirmedCoinsTransactionsRequestBody_data'
      required:
      - data
      type: object
    NewUnconfirmedTokensTransactionsRequestBody:
      example:
        data:
          item:
            address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
            callbackSecretKey: yourSecretKey
            callbackUrl: http://example.com
            allowDuplicates: true
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/NewUnconfirmedTokensTransactionsRequestBody_data'
      required:
      - data
      type: object
    NewConfirmedCoinsTransactionsRequestBody:
      example:
        data:
          item:
            address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
            callbackSecretKey: yourSecretKey
            callbackURL: http://example.com
            allowDuplicates: true
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/NewConfirmedCoinsTransactionsRequestBody_data'
      required:
      - data
      type: object
    NewConfirmedTokensTransactionsRequestBody:
      example:
        data:
          item:
            address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
            callbackSecretKey: yourSecretKey
            callbackUrl: http://example.com
            allowDuplicates: true
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/NewUnconfirmedTokensTransactionsRequestBody_data'
      required:
      - data
      type: object
    NewConfirmedTokensTransactionsAndEachConfirmationRequestBody:
      example:
        data:
          item:
            confirmationsCount: 3
            address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
            callbackSecretKey: yourSecretKey
            callbackUrl: http://example.com
            allowDuplicates: true
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/NewConfirmedTokensTransactionsAndEachConfirmationRequestBody_data'
      required:
      - data
      type: object
    NewConfirmedCoinsTransactionsAndEachConfirmationRequestBody:
      example:
        data:
          item:
            confirmationsCount: 3
            address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
            callbackSecretKey: yourSecretKey
            callbackUrl: http://example.com
            allowDuplicates: true
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/NewConfirmedCoinsTransactionsAndEachConfirmationRequestBody_data'
      required:
      - data
      type: object
    MinedTransactionRequestBody:
      example:
        data:
          item:
            callbackSecretKey: yourSecretKey
            callbackUrl: http://example.com
            allowDuplicates: false
            transactionId: df2690ff97e72c1f8b0f2102a8cb5c1d0fa8fb8754d543c9bc0edc4d4bc34bfc
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/MinedTransactionRequestBody_data'
      required:
      - data
      type: object
    NewBlockRequestBody:
      example:
        data:
          item:
            callbackSecretKey: yourSecretKey
            callbackUrl: http://example.com
            allowDuplicates: true
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/NewBlockRequestBody_data'
      required:
      - data
      type: object
    CreateAutomaticCoinsForwardingRequestBody:
      example:
        data:
          item:
            confirmationsCount: 3
            feePriority: slow
            minimumTransferAmount: "0.0002"
            callbackSecretKey: yourSecretString
            callbackUrl: https://example.com
            toAddress: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/CreateAutomaticCoinsForwardingRequestBody_data'
      required:
      - data
      type: object
    AddTokensToExistingFromAddressRequestBodyTokenDataBitcoinOmniToken:
      description: Bitcoin Omni Token
      properties:
        propertyId:
          description: Represents the specific `propertyId` of the token data that
            will be forwarded.
          example: 2
          type: integer
      required:
      - propertyId
      type: object
    AddTokensToExistingFromAddressRequestBodyTokenDataEthereumErc-20Token:
      description: Ethereum erc-20 token
      properties:
        contractAddress:
          description: Represents the specific `contractAddress` of the Token that
            will be forwarded.
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
      required:
      - contractAddress
      type: object
    AddTokensToExistingFromAddressRequestBodyTokenData:
      oneOf:
      - $ref: '#/components/schemas/AddTokensToExistingFromAddressRequestBodyTokenDataBitcoinOmniToken'
      - $ref: '#/components/schemas/AddTokensToExistingFromAddressRequestBodyTokenDataEthereumErc-20Token'
      type: object
    AddTokensToExistingFromAddressRequestBody:
      example:
        data:
          item:
            confirmationsCount: 3
            feePriority: standard
            minimumTransferAmount: "0.00001"
            callbackSecretKey: yourSecretString
            callbackUrl: https://example.com
            fromAddress: mizRduUBKEbJ6uzYJUegPh78gEGgM3WjAr
            toAddress: mnumE76iEKN47bUsdni85oped5D1fRwKWi
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/AddTokensToExistingFromAddressRequestBody_data'
      required:
      - data
      type: object
    CreateAutomaticTokensForwardingRequestBodyTokenDataBitcoinOmniToken:
      description: Bitcoin Omni Token
      properties:
        propertyId:
          description: Represents the specific `propertyId` of the token data that
            will be forwarded.
          example: 31
          type: integer
      required:
      - propertyId
      type: object
    CreateAutomaticTokensForwardingRequestBodyTokenDataEthereumToken:
      description: Ethereum Token
      properties:
        contractAddress:
          description: Represents the specific `contractAddress` of the Token that
            will be forwarded.
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
      required:
      - contractAddress
      type: object
    CreateAutomaticTokensForwardingRequestBodyTokenData:
      oneOf:
      - $ref: '#/components/schemas/CreateAutomaticTokensForwardingRequestBodyTokenDataBitcoinOmniToken'
      - $ref: '#/components/schemas/CreateAutomaticTokensForwardingRequestBodyTokenDataEthereumToken'
      type: object
    CreateAutomaticTokensForwardingRequestBody:
      example:
        data:
          item:
            confirmationsCount: "3"
            feePriority: slow
            minimumTransferAmount: "0.00002"
            callbackSecretKey: yourSecretString
            callbackUrl: https://example.com
            toAddress: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/CreateAutomaticTokensForwardingRequestBody_data'
      required:
      - data
      type: object
    ValidateAddressRequestBody:
      example:
        data:
          item:
            address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
        context: context
      properties:
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          type: string
        data:
          $ref: '#/components/schemas/ValidateAddressRequestBody_data'
      required:
      - data
      type: object
    ListAssetsDetailsResponseItemSpecificDataCryptoTypeData:
      description: Crypto Type Data
      properties:
        "1HourPriceChangeInPercentage":
          description: Represents the percentage of the asset's current price against
            the its price from 1 hour ago.
          example: -2.52
          type: string
        "1WeekPriceChangeInPercentage":
          description: Represents the percentage of the asset's current price against
            the its price from 1 week ago.
          example: -10.18
          type: string
        "24HoursPriceChangeInPercentage":
          description: Represents the percentage of the asset's current price against
            the its price from 24 hours ago.
          example: -3.37
          type: string
        "24HoursTradingVolume":
          description: Represents the trading volume of the asset for the time frame
            of 24 hours.
          example: "2871630447"
          type: string
        circulatingSupply:
          description: Represents the amount of the asset that is circulating on the
            market and in public hands.
          example: "123564.25"
          type: string
        marketCapInUSD:
          description: Defines the total market value of the asset's circulating supply
            in USD.
          example: 1,056,050,713,184
          type: string
        maxSupply:
          description: Represents the maximum amount of all coins of a specific asset
            that will ever exist in its lifetime.
          example: 18,562,881
          type: string
      required:
      - 1HourPriceChangeInPercentage
      - 1WeekPriceChangeInPercentage
      - 24HoursPriceChangeInPercentage
      - 24HoursTradingVolume
      - circulatingSupply
      - marketCapInUSD
      - maxSupply
      type: object
    ListAssetsDetailsResponseItemSpecificData:
      description: Represents a specific asset's data depending on its type (whether
        it is "crypto" or "fiat").
      oneOf:
      - $ref: '#/components/schemas/ListAssetsDetailsResponseItemSpecificDataCryptoTypeData'
      type: object
    GetAddressDetailsResponseItem:
      example:
        confirmedBalance:
          amount: "3.5"
          unit: BTC
        totalSpent:
          amount: "2.1"
          unit: BTC
        incomingTransactionsCount: 2
        totalReceived:
          amount: "5.6"
          unit: BTC
        outgoingTransactionsCount: 1
        transactionsCount: 3
      properties:
        transactionsCount:
          description: Represents the total number of confirmed coins transactions
            for this address, both incoming and outgoing. Applies for coins only **and
            not** tokens transfers e.g. for Ethereum. `transactionsCount` could result
            as less than incoming and outgoing transactions put together (e.g. in
            Bitcoin), due to the fact that one and the same address could be in senders
            and receivers addresses.
          example: 3
          type: integer
        confirmedBalance:
          $ref: '#/components/schemas/GetAddressDetailsResponseItem_confirmedBalance'
        totalReceived:
          $ref: '#/components/schemas/GetAddressDetailsResponseItem_totalReceived'
        totalSpent:
          $ref: '#/components/schemas/GetAddressDetailsResponseItem_totalSpent'
        incomingTransactionsCount:
          description: Defines the count of all confirmed incoming transactions from
            the address for coins. This applies to **coins** only, **not** to tokens
            transfers e.g. for Ethereum.
          example: 2
          type: integer
        outgoingTransactionsCount:
          description: Defines the count of all confirmed outgoing transactions from
            the address for coins. This applies to **coins** only, **not** to tokens
            transfers e.g. for Ethereum.
          example: 1
          type: integer
      required:
      - confirmedBalance
      - incomingTransactionsCount
      - outgoingTransactionsCount
      - totalReceived
      - totalSpent
      - transactionsCount
      type: object
    GetAddressDetailsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmedBalance:
              amount: "3.5"
              unit: BTC
            totalSpent:
              amount: "2.1"
              unit: BTC
            incomingTransactionsCount: 2
            totalReceived:
              amount: "5.6"
              unit: BTC
            outgoingTransactionsCount: 1
            transactionsCount: 3
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetAddressDetailsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    BannedIpAddress:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/BannedIpAddress_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    UriNotFound:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/UriNotFound_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    UnexpectedServerError:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/UnexpectedServerError_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    MissingApiKey:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/MissingApiKey_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    UnsupportedMediaType:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/UnsupportedMediaType_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    RequestLimitReached:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/RequestLimitReached_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    InvalidApiKey:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/InvalidApiKey_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    InsufficientCredits:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/InsufficientCredits_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    InvalidData:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/InvalidData_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    LimitGreaterThanAllowed:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/LimitGreaterThanAllowed_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    InvalidPagination:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/InvalidPagination_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    EndpointNotAllowedForPlan:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/EndpointNotAllowedForPlan_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    EndpointNotAllowedForApiKey:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/EndpointNotAllowedForApiKey_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    FeatureMainnetsNotAllowedForPlan:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/FeatureMainnetsNotAllowedForPlan_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    InvalidRequestBodyStructure:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/InvalidRequestBodyStructure_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    ListOmniTokensByAddressResponseItem:
      properties:
        balance:
          description: Defines the balance of the Omni tokens to send in the address.
          example: "29"
          type: string
        frozen:
          description: Defines the amount frozen by the issuer (applies to managed
            properties only).
          example: "0"
          type: string
        name:
          description: Defines the name of the Omni tokens to send.
          example: Omni tokens
          type: string
        propertyId:
          description: Represents the identifier of the tokens to send.
          example: 1
          type: integer
        reserved:
          description: Represents the amount reserved by sell offers and accepts.
          example: "0"
          type: string
      required:
      - balance
      - frozen
      - name
      - propertyId
      - reserved
      type: object
    ListOmniTokensByAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListOmniTokensByAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetXRPRippleAddressDetailsResponseItem:
      example:
        sequence: 25648975
        incomingTransactionsCount: 1
        balance:
          amount: "22.0000"
          unit: XRP
        outgoingTransactionsCount: 1
        transactionsCount: 2
      properties:
        balance:
          $ref: '#/components/schemas/GetXRPRippleAddressDetailsResponseItem_balance'
        incomingTransactionsCount:
          description: Defines the count of all confirmed incoming transactions from
            the address for coins. This applies to coins only, not to tokens transfers
          example: 1
          type: integer
        outgoingTransactionsCount:
          description: Defines the count of all confirmed outgoing transactions for
            coins. This applies to coins only, not to tokens transfers
          example: 1
          type: integer
        sequence:
          description: Defines the transaction input's sequence as an integer, which
            is is used when transactions are replaced with newer versions before LockTime.
          example: 25648975
          type: integer
        transactionsCount:
          description: Represents the total number of all transactions as part of
            this block.
          example: 2
          type: integer
      required:
      - balance
      - incomingTransactionsCount
      - outgoingTransactionsCount
      - sequence
      - transactionsCount
      type: object
    GetXRPRippleAddressDetailsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            sequence: 25648975
            incomingTransactionsCount: 1
            balance:
              amount: "22.0000"
              unit: XRP
            outgoingTransactionsCount: 1
            transactionsCount: 2
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetXRPRippleAddressDetailsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin:
      description: Bitcoin
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 1781965
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 248
          type: integer
        vSize:
          description: Represents the virtual size of this transaction.
          example: 166
          type: integer
        version:
          description: Represents the transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_vout'
          type: array
      required:
      - locktime
      - size
      - vSize
      - version
      - vin
      - vout
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash:
      description: Bitcoin Cash
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 1781965
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 248
          type: integer
        version:
          description: Represents transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin:
      description: Litecoin
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 2
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 223
          type: integer
        version:
          description: Represents transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_vout'
          type: array
        vsize:
          description: Represents the virtual size of this transaction.
          example: 141
          type: integer
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      - vsize
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin:
      description: Dogecoin
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 0
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 266
          type: integer
        version:
          description: Represents transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash:
      description: Dash
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 0
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 125
          type: integer
        version:
          description: Represents transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum:
      description: Ethereum
      properties:
        contract:
          description: Represents the specific transaction contract.
          type: string
        gasLimit:
          description: Represents the amount of gas used by this specific transaction
            alone.
          example: "552020"
          type: string
        gasPrice:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum_gasPrice'
        gasUsed:
          description: Represents the exact unit of gas that was used for the transaction.
          example: "24673"
          type: string
        inputData:
          description: Represents additional information that is required for the
            transaction.
          example: 0x67a5cd0600000000000000000000000031f42841c2db5173425b5223809cf3a38fede360
          type: string
        nonce:
          description: Represents the sequential running number for an address, starting
            from 0 for the first transaction. E.g., if the nonce of a transaction
            is 10, it would be the 11th transaction sent from the sender's address.
          example: 16
          type: integer
        transactionStatus:
          description: Represents the status of this transaction.
          type: string
      required:
      - contract
      - gasLimit
      - gasPrice
      - gasUsed
      - inputData
      - nonce
      - transactionStatus
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic:
      description: Ethereum Classic
      properties:
        contract:
          description: Represents the specific transaction contract.
          type: string
        gasLimit:
          description: Represents the amount of gas used by this specific transaction
            alone.
          example: "552020"
          type: string
        gasPrice:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic_gasPrice'
        gasUsed:
          description: Represents the exact unit of gas that was used for the transaction.
          example: "24673"
          type: string
        inputData:
          description: Represents additional information that is required for the
            transaction.
          example: 0xa9059cbb000000000000000000000000acc59ec2f7119dc7a9e69dcd124cff75caae05bf0000000000000000000000000000000000000000000000000000000000989680
          type: string
        nonce:
          description: Represents the sequential running number for an address, starting
            from 0 for the first transaction. E.g., if the nonce of a transaction
            is 10, it would be the 11th transaction sent from the sender's address.
          example: "16"
          type: string
      required:
      - contract
      - gasLimit
      - gasPrice
      - gasUsed
      - inputData
      - nonce
      type: object
    GetTransactionDetailsByTransactionIDResponseItem:
      example:
        recipients:
        - amount: "0.000144"
          address: 2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV
        - amount: "0.000144"
          address: 2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV
        fee:
          amount: "0.00016932"
          unit: BTC
        minedInBlockHeight: 1939750
        index: 1
        minedInBlockHash: 00000000407f119ecb74b44229228910400aaeb9f4e3b9869955b85a53e9b7db
        isConfirmed: false
        senders:
        - amount: "0.00873472"
          address: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
        - amount: "0.00873472"
          address: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
        transactionHash: 1ec73b0f61359927d02376b35993b756b1097cb9a857bec23da4c98c4977d2b2
        transactionId: 4b66461bf88b61e1e4326356534c135129defb504c7acb2fd6c92697d79eb250
        timestamp: 1582202940
      properties:
        index:
          description: Represents the index position of the transaction in the specific
            block.
          example: 1
          type: integer
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 00000000407f119ecb74b44229228910400aaeb9f4e3b9869955b85a53e9b7db
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 1939750
          type: integer
        recipients:
          description: Represents a list of recipient addresses with the respective
            amounts. In account-based protocols like Ethereum there is only one address
            in this list.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItem_recipients'
          type: array
        senders:
          description: Represents a list of sender addresses with the respective amounts.
            In account-based protocols like Ethereum there is only one address in
            this list.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItem_senders'
          type: array
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1582202940
          type: integer
        transactionHash:
          description: Represents the same as `transactionId` for account-based protocols
            like Ethereum, while it could be different in UTXO-based protocols like
            Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId`
            for SegWit transactions.
          example: 1ec73b0f61359927d02376b35993b756b1097cb9a857bec23da4c98c4977d2b2
          type: string
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 4b66461bf88b61e1e4326356534c135129defb504c7acb2fd6c92697d79eb250
          type: string
        fee:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItem_fee'
        isConfirmed:
          description: Defines whether the transaction is mined/confirmed or not.
            If it is "false", it means the transaction is still in the Mempool waiting
            to be included in a block. Value "true" means that this transaction is
            already confirmed and included in a block.
          example: false
          type: boolean
        blockchainSpecific:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific'
      required:
      - blockchainSpecific
      - fee
      - index
      - isConfirmed
      - recipients
      - senders
      - timestamp
      - transactionHash
      - transactionId
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecific:
      oneOf:
      - $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin'
      - $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash'
      - $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin'
      - $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin'
      - $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash'
      - $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum'
      - $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic'
      type: object
    GetTransactionDetailsByTransactionIDResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            recipients:
            - amount: "0.000144"
              address: 2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV
            - amount: "0.000144"
              address: 2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV
            fee:
              amount: "0.00016932"
              unit: BTC
            minedInBlockHeight: 1939750
            index: 1
            minedInBlockHash: 00000000407f119ecb74b44229228910400aaeb9f4e3b9869955b85a53e9b7db
            isConfirmed: false
            senders:
            - amount: "0.00873472"
              address: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
            - amount: "0.00873472"
              address: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
            transactionHash: 1ec73b0f61359927d02376b35993b756b1097cb9a857bec23da4c98c4977d2b2
            transactionId: 4b66461bf88b61e1e4326356534c135129defb504c7acb2fd6c92697d79eb250
            timestamp: 1582202940
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    BlockchainDataTransactionNotFound:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/BlockchainDataTransactionNotFound_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    ListOmniTransactionsByAddressResponseItem:
      properties:
        amount:
          description: Defines the amount of the sent tokens.
          example: "0.01788569"
          type: string
        divisible:
          description: Defines whether the attribute can be divisible or not, as boolean.
            E.g., if it is "true", the attribute is divisible.
          example: true
          type: boolean
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 00000000eafa33741ed67c863930df2af8c236568c4437c395543b5684f4f1ca
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 1939884
          type: integer
        propertyId:
          description: Represents the identifier of the tokens to send.
          example: 2
          type: integer
        recipients:
          description: Represents an object of addresses that receive the transactions.
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByAddressResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByAddressResponseItem_senders'
          type: array
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1616420363
          type: integer
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 409adab785707784361f5e528e5fa21dc0453670f811069f88b0bb725929d945
          type: string
        type:
          description: Defines the type of the transaction as a string.
          example: Simple Send
          type: string
        typeInt:
          description: Defines the type of the transaction as a number.
          example: 0
          type: integer
        valid:
          description: Defines whether the transaction is valid or not, as boolean.
            E.g. if set to "true", it means the transaction is valid.
          example: true
          type: boolean
        version:
          description: Defines the specific version.
          example: 0
          type: integer
        fee:
          $ref: '#/components/schemas/ListOmniTransactionsByAddressResponseItem_fee'
      required:
      - amount
      - divisible
      - fee
      - minedInBlockHash
      - minedInBlockHeight
      - propertyId
      - recipients
      - senders
      - timestamp
      - transactionId
      - type
      - typeInt
      - valid
      - version
      type: object
    ListOmniTransactionsByAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListOmniTransactionsByAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetXRPRippleTransactionDetailsByTransactionIDResponseItem:
      example:
        receive:
          amount: "2.1256"
          unit: XRP
        fee:
          amount: "0.0021"
          unit: XRP
        index: "2"
        minedInBlockHash: 3f7af58d6cf1cd9020fb285d8e3e215131800d5109e42647ffd9b3aeae59df33
        type: Payment
        transactionHash: 36a1737481edec87bacc3101dfb752ae2c76f9171e7edebe587e330c1ea77c8d
        offer:
          amount: "3.0154"
          unit: XRP
        sequence: 4294967295
        recipients:
        - amount: "0.00001"
          address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
        - amount: "0.00001"
          address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
        minedInBlockHeight: "15973802"
        additionalData: rPmPErQe4g9725pcNxJpuvKkdqTESTQ6Tu
        senders:
        - amount: "0.00001"
          address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
        - amount: "0.00001"
          address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
        value:
          amount: "3.0254"
          unit: XRP
        status: status
        timestamp: 1582202940
      properties:
        additionalData:
          description: Represents additional data that may be needed.
          example: rPmPErQe4g9725pcNxJpuvKkdqTESTQ6Tu
          type: string
        index:
          description: Defines the index of the transaction, i.e. the consecutive
            place it takes in the blockchain.
          example: "2"
          type: string
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 3f7af58d6cf1cd9020fb285d8e3e215131800d5109e42647ffd9b3aeae59df33
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: "15973802"
          type: string
        offer:
          $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponseItem_offer'
        receive:
          $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponseItem_receive'
        recipients:
          description: Represents an object of addresses that receive the transactions.
          items:
            $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponseItem_senders'
          type: array
        sequence:
          description: Defines the transaction input's sequence as an integer, which
            is is used when transactions are replaced with newer versions before LockTime.
          example: 4294967295
          type: integer
        status:
          description: Defines the status of the transaction.
          type: string
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1582202940
          type: integer
        transactionHash:
          description: Represents the same as `transactionId` for account-based protocols
            like Ethereum, while it could be different in UTXO-based protocols like
            Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId`
            for SegWit transactions.
          example: 36a1737481edec87bacc3101dfb752ae2c76f9171e7edebe587e330c1ea77c8d
          type: string
        type:
          description: Defines the type of the transaction.
          example: Payment
          type: string
        fee:
          $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponseItem_fee'
        value:
          $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponseItem_value'
      required:
      - additionalData
      - fee
      - index
      - minedInBlockHash
      - minedInBlockHeight
      - offer
      - receive
      - recipients
      - senders
      - sequence
      - timestamp
      - transactionHash
      - type
      - value
      type: object
    GetXRPRippleTransactionDetailsByTransactionIDResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            receive:
              amount: "2.1256"
              unit: XRP
            fee:
              amount: "0.0021"
              unit: XRP
            index: "2"
            minedInBlockHash: 3f7af58d6cf1cd9020fb285d8e3e215131800d5109e42647ffd9b3aeae59df33
            type: Payment
            transactionHash: 36a1737481edec87bacc3101dfb752ae2c76f9171e7edebe587e330c1ea77c8d
            offer:
              amount: "3.0154"
              unit: XRP
            sequence: 4294967295
            recipients:
            - amount: "0.00001"
              address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
            - amount: "0.00001"
              address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
            minedInBlockHeight: "15973802"
            additionalData: rPmPErQe4g9725pcNxJpuvKkdqTESTQ6Tu
            senders:
            - amount: "0.00001"
              address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
            - amount: "0.00001"
              address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
            value:
              amount: "3.0254"
              unit: XRP
            status: status
            timestamp: 1582202940
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ResourceNotFound:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/ResourceNotFound_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin:
      description: Bitcoin
      properties:
        locktime:
          description: Represents the locktime on the transaction on the specific
            blockchain, i.e. the blockheight at which the transaction is valid.
          example: 1781965
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 125
          type: integer
        vSize:
          description: Defines the transaction's virtual size.
          example: 166
          type: integer
        version:
          description: Defines the version of the transaction.
          example: 2
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin_vout'
          type: array
      required:
      - locktime
      - size
      - vSize
      - version
      - vin
      - vout
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash:
      description: Bitcoin Cash
      properties:
        locktime:
          description: Represents the locktime on the transaction on the specific
            blockchain, i.e. the blockheight at which the transaction is valid.
          example: 1781965
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 248
          type: integer
        version:
          description: Represents the transaction's version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin:
      description: Litecoin
      properties:
        locktime:
          description: Represents the locktime on the transaction on the specific
            blockchain, i.e. the blockheight at which the transaction is valid.
          example: 2
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 223
          type: integer
        vSize:
          description: Represents the virtual size of this transaction.
          example: 141
          type: integer
        version:
          description: Represents the transaction's version number.
          example: 2
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_vout'
          type: array
      required:
      - locktime
      - size
      - vSize
      - version
      - vin
      - vout
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin:
      description: Dogecoin
      properties:
        locktime:
          description: Represents the locktime on the transaction on the specific
            blockchain, i.e. the blockheight at which the transaction is valid.
          example: 0
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 266
          type: integer
        version:
          description: Represents the transaction's version number.
          example: 3
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificDash:
      description: Dash
      properties:
        locktime:
          description: Represents the locktime on the transaction on the specific
            blockchain, i.e. the blockheight at which the transaction is valid.
          example: 0
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 196
          type: integer
        version:
          description: Represents the transaction's version number.
          example: 3
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificDash_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificDash_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic:
      description: Ethereum Classic
      properties:
        contract:
          description: Represents the specific transaction contract.
          type: string
        gasLimit:
          description: Represents the amount of gas used by this specific transaction
            alone.
          example: "21000"
          type: string
        gasPrice:
          $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic_gasPrice'
        gasUsed:
          description: Represents the exact unit of gas that was used for the transaction.
          example: "21000"
          type: string
        inputData:
          description: Represents additional information that is required for the
            transaction.
          example: 0xa9059cbb000000000000000000000000acc59ec2f7119dc7a9e69dcd124cff75caae05bf0000000000000000000000000000000000000000000000000000000000989680
          type: string
        nonce:
          description: Represents the sequential running number for an address, starting
            from 0 for the first transaction. E.g., if the nonce of a transaction
            is 10, it would be the 11th transaction sent from the sender's address.
          example: 16
          type: integer
        transactionStatus:
          description: String representation of the transaction status
          type: string
      required:
      - contract
      - gasLimit
      - gasPrice
      - gasUsed
      - inputData
      - nonce
      - transactionStatus
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificEthereum:
      description: Ethereum
      properties:
        contract:
          description: Represents the specific transaction contract.
          type: string
        gasLimit:
          description: Represents the amount of gas used by this specific transaction
            alone.
          example: "552020"
          type: string
        gasPrice:
          $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificEthereum_gasPrice'
        gasUsed:
          description: Represents the exact unit of gas that was used for the transaction.
          example: "24673"
          type: string
        inputData:
          description: Represents additional information that is required for the
            transaction.
          example: 0x67a5cd0600000000000000000000000031f42841c2db5173425b5223809cf3a38fede360
          type: string
        nonce:
          description: Represents the sequential running number for an address, starting
            from 0 for the first transaction. E.g., if the nonce of a transaction
            is 10, it would be the 11th transaction sent from the sender's address.
          example: 13
          type: integer
      required:
      - contract
      - gasLimit
      - gasPrice
      - gasUsed
      - inputData
      - nonce
      type: object
    ListTransactionsByAddressResponseItem:
      properties:
        index:
          description: Represents the index position of the transaction in the block.
          example: 1
          type: integer
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 00000000407f119ecb74b44229228910400aaeb9f4e3b9869955b85a53e9b7db
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 1903849
          type: integer
        recipients:
          description: Represents a list of recipient addresses with the respective
            amounts. In account-based protocols like Ethereum there is only one address
            in this list.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItem_recipients'
          type: array
        senders:
          description: Represents a list of sender addresses with the respective amounts.
            In account-based protocols like Ethereum there is only one address in
            this list.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItem_senders'
          type: array
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1582202940
          type: integer
        transactionHash:
          description: Represents the same as `transactionId` for account-based protocols
            like Ethereum, while it could be different in UTXO-based protocols like
            Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId`
            for SegWit transactions.
          example: 1ec73b0f61359927d02376b35993b756b1097cb9a857bec23da4c98c4977d2b2
          type: string
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 4b66461bf88b61e1e4326356534c135129defb504c7acb2fd6c92697d79eb250
          type: string
        fee:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItem_fee'
        blockchainSpecific:
          $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecific'
      required:
      - blockchainSpecific
      - fee
      - index
      - recipients
      - senders
      - timestamp
      - transactionHash
      - transactionId
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecific:
      oneOf:
      - $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin'
      - $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash'
      - $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin'
      - $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin'
      - $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificDash'
      - $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic'
      - $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificEthereum'
      type: object
    ListTransactionsByAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListTransactionsByAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListXRPRippleTransactionsByAddressResponseItem:
      properties:
        additionalData:
          description: Represents any additional data that may be needed.
          type: string
        index:
          description: Represents the index position of the transaction in the block.
          example: 3
          type: integer
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 3dff3ab3697a0a3116062a92a499dc7b5c9c777b2035f79bb906894972d4573d
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 15949067
          type: integer
        recipients:
          description: Represents an object of addresses that receive the transactions.
          items:
            $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponseItem_senders'
          type: array
        sequence:
          description: Defines the transaction input's sequence as an integer, which
            is is used when transactions are replaced with newer versions before LockTime.
          example: 39673
          type: integer
        status:
          description: Defines the status of the transaction.
          type: string
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 4256894
          type: integer
        transactionHash:
          description: Represents the hash of the XRP transaction.
          example: 33684d38ccf56f5b10a25e60b11b251abe6288f41aadd03c7596dced895b282a
          type: string
        type:
          description: Specifies the type of the transaction.
          type: string
        fee:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByAddressResponseItem_fee'
        offer:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByAddressResponseItem_offer'
        receive:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByAddressResponseItem_receive'
        value:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByAddressResponseItem_value'
      required:
      - additionalData
      - fee
      - index
      - minedInBlockHash
      - minedInBlockHeight
      - offer
      - receive
      - recipients
      - senders
      - sequence
      - status
      - timestamp
      - transactionHash
      - type
      - value
      type: object
    ListXRPRippleTransactionsByAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListUnconfirmedOmniTransactionsByAddressResponseItem:
      properties:
        amount:
          description: Defines the amount of the sent tokens.
          example: "14.915785"
          type: string
        divisible:
          description: Defines whether the attribute can be divisible or not, as boolean.
            E.g., if it is "true", the attribute is divisible.
          example: true
          type: boolean
        mined:
          description: Defines whether the transaction has been mined or not, as boolean.
            E.g. if set to "true", it means the transaction is mined.
          example: true
          type: boolean
        propertyId:
          description: Represents the identifier of the tokens to send.
          example: 2
          type: integer
        recipients:
          description: Represents an object of addresses that receive the transactions.
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByAddressResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByAddressResponseItem_senders'
          type: array
        sent:
          description: Defines whether the transaction has been sent or not, as boolean.
            E.g. if set to "true", it means the transaction is sent.
          example: false
          type: boolean
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1616429665
          type: integer
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: b3e76370a1ccdf5549a3654f1d14be27bebb4a834a81b489fcc99d057ada3dd1
          type: string
        type:
          description: Defines the type of the transaction as a string.
          example: Simple Send
          type: string
        typeInt:
          description: Defines the type of the transaction as a number.
          example: 0
          type: integer
        version:
          description: Defines the specific version.
          example: 0
          type: integer
        fee:
          $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByAddressResponseItem_fee'
      required:
      - amount
      - divisible
      - fee
      - mined
      - propertyId
      - recipients
      - senders
      - sent
      - timestamp
      - transactionId
      - type
      - typeInt
      - version
      type: object
    ListUnconfirmedOmniTransactionsByAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin:
      description: Bitcoin
      properties:
        locktime:
          description: Represents the locktime on the transaction on the specific
            blockchain, i.e. the blockheight at which the transaction is valid.
          example: 1781965
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 373
          type: integer
        vSize:
          description: Represents the virtual size of this transaction.
          example: 208
          type: integer
        version:
          description: Represents the transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_vout'
          type: array
      required:
      - locktime
      - size
      - vSize
      - version
      - vin
      - vout
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash:
      description: Bitcoin Cash
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 1781965
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 248
          type: integer
        version:
          description: Represents transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin:
      description: Litecoin
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 2
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 223
          type: integer
        version:
          description: Represents transaction version number.
          example: 2
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin_vout'
          type: array
        vsize:
          description: Represents the virtual size of this transaction.
          example: 141
          type: integer
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      - vsize
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin:
      description: Dogecoin
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 1
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 266
          type: integer
        version:
          description: Represents transaction version number.
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificDash:
      description: Dash
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 0
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 125
          type: integer
        version:
          description: Represents transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDash_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDash_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum:
      description: Ethereum
      properties:
        contract:
          description: Represents the specific transaction contract.
          type: string
        gasLimit:
          description: String representation of the transaction Represents the amount
            of gas used by this specific transaction alone.
          example: "21000"
          type: string
        gasPrice:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum_gasPrice'
        gasUsed:
          description: Represents the exact unit of gas that was used for the transaction.
          example: "21000"
          type: string
        inputData:
          description: Represents additional information that is required for the
            transaction.
          example: 0xa9059cbb000000000000000000000000acc59ec2f7119dc7a9e69dcd124cff75caae05bf0000000000000000000000000000000000000000000000000000000000989680
          type: string
        nonce:
          description: Represents the sequential running number for an address, starting
            from 0 for the first transaction. E.g., if the nonce of a transaction
            is 10, it would be the 11th transaction sent from the sender's address.
          example: 16
          type: integer
        transactionStatus:
          description: Represents the status of this transaction.
          type: string
      required:
      - contract
      - gasLimit
      - gasPrice
      - gasUsed
      - inputData
      - nonce
      - transactionStatus
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic:
      description: Ethereum Classic
      properties:
        contract:
          description: Represents the specific transaction contract.
          type: string
        gasLimit:
          description: Represents the amount of gas used by this specific transaction
            alone.
          example: "21000"
          type: string
        gasPrice:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum_gasPrice'
        gasUsed:
          description: Represents the exact unit of gas that was used for the transaction.
          example: "21000"
          type: string
        inputData:
          description: Represents additional information that is required for the
            transaction.
          example: 0xa9059cbb000000000000000000000000acc59ec2f7119dc7a9e69dcd124cff75caae05bf0000000000000000000000000000000000000000000000000000000000989680
          type: string
        nonce:
          description: Represents the sequential running number for an address, starting
            from 0 for the first transaction. E.g., if the nonce of a transaction
            is 10, it would be the 11th transaction sent from the sender's address.
          example: "16"
          type: string
        transactionStatus:
          description: String representation of the transaction status
          type: string
      required:
      - contract
      - gasLimit
      - gasPrice
      - gasUsed
      - inputData
      - nonce
      - transactionStatus
      type: object
    ListTransactionsByBlockHashResponseItem:
      properties:
        index:
          description: Represents the index position of the transaction in the specific
            block.
          example: 1
          type: integer
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 00000000000000127080d8bcf84f4ad830a71ea0aadce3632579b6b2f26cd94b
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 1971147
          type: integer
        recipients:
          description: Represents a list of recipient addresses with the respective
            amounts. In account-based protocols like Ethereum there is only one address
            in this list.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItem_recipients'
          type: array
        senders:
          description: Represents a list of sender addresses with the respective amounts.
            In account-based protocols like Ethereum there is only one address in
            this list.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItem_senders'
          type: array
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1618208236
          type: integer
        transactionHash:
          description: Represents the same as `transactionId` for account-based protocols
            like Ethereum, while it could be different in UTXO-based protocols like
            Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId`
            for SegWit transactions.
          example: 273eac351a2b76bb98196f3b310eabc787758cf157e8abe726250447185956ed
          type: string
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 4340d9463f0a5e3b3bc5844c17af78e20fa141f976f20732de630b0e6e4cd571
          type: string
        fee:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItem_fee'
        blockchainSpecific:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecific'
      required:
      - blockchainSpecific
      - fee
      - index
      - minedInBlockHash
      - minedInBlockHeight
      - recipients
      - senders
      - timestamp
      - transactionHash
      - transactionId
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecific:
      oneOf:
      - $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin'
      - $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash'
      - $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin'
      - $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin'
      - $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDash'
      - $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum'
      - $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereumClassic'
      type: object
    ListTransactionsByBlockHashResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListXRPRippleTransactionsByBlockHashResponseItem:
      properties:
        additionalData:
          description: Represents any additional data that may be needed.
          example: r4CmvbkDWGt9AZmkfuubmiSdsxGZFxAKBY
          type: string
        index:
          description: Represents the index position of the transaction in the specific
            block.
          example: 3
          type: integer
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: e8f6c4cfef0895ac6f8268cc6ecf0eb159eee4a249d78c344d1a832d4bdd645d
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 15971358
          type: integer
        recipients:
          description: Represents an object of addresses that receive the transactions.
          items:
            $ref: '#/components/schemas/ListXRPRippleTransactionsByBlockHashResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/ListXRPRippleTransactionsByBlockHashResponseItem_senders'
          type: array
        sequence:
          description: Defines the transaction input's sequence as an integer, which
            is is used when transactions are replaced with newer versions before LockTime.
          example: 32568
          type: integer
        status:
          description: Defines the status of the transaction.
          type: string
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 236589
          type: integer
        transactionHash:
          description: Represents the same as `transactionId` for account-based protocols
            like Ethereum, while it could be different in UTXO-based protocols like
            Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId`
            for SegWit transactions.
          example: ba3bc1337071c8e73b441fe12a1911f4365d7ea82cace7c8ecba3ee9f364978b
          type: string
        type:
          description: Defines the type of the transaction.
          example: Payment
          type: string
        fee:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByBlockHashResponseItem_fee'
        offer:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByBlockHashResponseItem_offer'
        receive:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByBlockHashResponseItem_receive'
        value:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByBlockHashResponseItem_value'
      required:
      - fee
      - index
      - minedInBlockHash
      - minedInBlockHeight
      - offer
      - receive
      - recipients
      - senders
      - sequence
      - status
      - timestamp
      - transactionHash
      - type
      - value
      type: object
    ListXRPRippleTransactionsByBlockHashResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListXRPRippleTransactionsByBlockHashResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetUnconfirmedOmniTransactionByTransactionIDTxidResponseItem:
      example:
        mined: true
        amount: "14.915785"
        divisible: true
        fee:
          amount: "0.0001"
          unit: BTC
        type: Simple Send
        sent: false
        version: 0
        transactionId: 92f17d3d16a1baf7de570a86179cc263cb9866c66778feec2dce111430f41c08
        typeInt: 0
        recipients:
        - amount: "0.1"
          address: mpBjRU6F2YrgWwxtMw4Fp1hikqPdrx6spB
        - amount: "0.1"
          address: mpBjRU6F2YrgWwxtMw4Fp1hikqPdrx6spB
        propertyId: 2
        senders:
        - amount: "0.1"
          address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        - amount: "0.1"
          address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        timestamp: 1616431490
      properties:
        amount:
          description: Defines the amount of the sent tokens.
          example: "14.915785"
          type: string
        divisible:
          description: Defines whether the attribute can be divisible or not, as boolean.
            E.g., if it is "true", the attribute is divisible.
          example: true
          type: boolean
        mined:
          description: Defines whether the transaction has been mined or not, as boolean.
            E.g. if set to "true", it means the transaction is mined.
          example: true
          type: boolean
        propertyId:
          description: Represents the identifier of the tokens to send.
          example: 2
          type: integer
        recipients:
          description: Represents an object of addresses that receive the transactions.
          items:
            $ref: '#/components/schemas/GetUnconfirmedOmniTransactionByTransactionIDTxidResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/GetUnconfirmedOmniTransactionByTransactionIDTxidResponseItem_senders'
          type: array
        sent:
          description: Defines whether the transaction has been sent or not, as boolean.
            E.g. if set to "true", it means the transaction is sent.
          example: false
          type: boolean
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1616431490
          type: integer
        transactionId:
          description: String representation of the transaction identifier (txid)
          example: 92f17d3d16a1baf7de570a86179cc263cb9866c66778feec2dce111430f41c08
          type: string
        type:
          description: Defines the type of the transaction as a string.
          example: Simple Send
          type: string
        typeInt:
          description: Defines the type of the transaction as a number.
          example: 0
          type: integer
        version:
          description: Defines the specific version.
          example: 0
          type: integer
        fee:
          $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByAddressResponseItem_fee'
      required:
      - amount
      - divisible
      - fee
      - mined
      - propertyId
      - recipients
      - senders
      - sent
      - timestamp
      - transactionId
      - type
      - typeInt
      - version
      type: object
    GetUnconfirmedOmniTransactionByTransactionIDTxidResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            mined: true
            amount: "14.915785"
            divisible: true
            fee:
              amount: "0.0001"
              unit: BTC
            type: Simple Send
            sent: false
            version: 0
            transactionId: 92f17d3d16a1baf7de570a86179cc263cb9866c66778feec2dce111430f41c08
            typeInt: 0
            recipients:
            - amount: "0.1"
              address: mpBjRU6F2YrgWwxtMw4Fp1hikqPdrx6spB
            - amount: "0.1"
              address: mpBjRU6F2YrgWwxtMw4Fp1hikqPdrx6spB
            propertyId: 2
            senders:
            - amount: "0.1"
              address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            - amount: "0.1"
              address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            timestamp: 1616431490
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetUnconfirmedOmniTransactionByTransactionIDTxidResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin:
      description: Bitcoin
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 1781965
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 248
          type: integer
        vSize:
          description: Represents the virtual size of this transaction.
          example: 166
          type: integer
        version:
          description: Represents the transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin_vout'
          type: array
      required:
      - locktime
      - size
      - vSize
      - version
      - vin
      - vout
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum:
      description: Ethereum
      properties:
        contract:
          description: Represents the specific transaction contract.
          example: 0x67a5cd06000000000000000000000000516de3a7a567d81737e3a46ec4ff9cfd1fcb0136
          type: string
        gasLimit:
          description: Represents the amount of gas used by this specific transaction
            alone.
          example: "552020"
          type: string
        gasPrice:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum_gasPrice'
        gasUsed:
          description: Represents the exact unit of gas that was used for the transaction.
          example: "24673"
          type: string
        inputData:
          description: Represents additional information that is required for the
            transaction.
          type: string
        nonce:
          description: Represents the sequential running number for an address, starting
            from 0 for the first transaction. E.g., if the nonce of a transaction
            is 10, it would be the 11th transaction sent from the sender's address.
          example: 16
          type: integer
        transactionStatus:
          description: Represents the status of this transaction.
          type: string
      required:
      - contract
      - gasLimit
      - gasPrice
      - gasUsed
      - inputData
      - nonce
      - transactionStatus
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash:
      description: Dash
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 0
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 125
          type: integer
        version:
          description: Represents transaction version number.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin:
      description: Dogecoin
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 1
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 266
          type: integer
        version:
          description: Represents transaction version number.
          example: 2
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin:
      description: Litecoin
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 2
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 223
          type: integer
        version:
          description: Represents transaction version number.
          example: 2
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin_vout'
          type: array
        vsize:
          description: Represents the virtual size of this transaction.
          example: 141
          type: integer
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      - vsize
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash:
      description: Bitcoin Cash
      properties:
        locktime:
          description: Represents the time at which a particular transaction can be
            added to the blockchain.
          example: 1781965
          type: integer
        size:
          description: Represents the total size of this transaction.
          example: 248
          type: integer
        version:
          description: Represents the total size of this transaction.
          example: 1
          type: integer
        vin:
          description: Represents the transaction inputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash_vin'
          type: array
        vout:
          description: Represents the transaction outputs.
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash_vout'
          type: array
      required:
      - locktime
      - size
      - version
      - vin
      - vout
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic:
      description: Ethereum Classic
      properties:
        contract:
          description: Represents the specific transaction contract.
          type: string
        gasLimit:
          description: Represents the amount of gas used by this specific transaction
            alone.
          example: "21000"
          type: string
        gasPrice:
          $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic_gasPrice'
        gasUsed:
          description: Represents the exact unit of gas that was used for the transaction.
          example: "21000"
          type: string
        inputData:
          description: Represents additional information that is required for the
            transaction.
          example: 0x67a5cd0600000000000000000000000031f42841c2db5173425b5223809cf3a38fede360
          type: string
        nonce:
          description: Represents the sequential running number for an address, starting
            from 0 for the first transaction. E.g., if the nonce of a transaction
            is 10, it would be the 11th transaction sent from the sender's address.
          example: "15"
          type: string
      required:
      - contract
      - gasLimit
      - gasPrice
      - gasUsed
      - inputData
      - nonce
      type: object
    ListTransactionsByBlockHeightResponseItem:
      properties:
        index:
          description: Represents the index position of the transaction in the specific
            block.
          example: 2
          type: integer
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 00000000407f119ecb74b44229228910400aaeb9f4e3b9869955b85a53e9b7db
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 1939750
          type: integer
        recipients:
          description: Represents a list of recipient addresses with the respective
            amounts. In account-based protocols like Ethereum there is only one address
            in this list.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItem_recipients'
          type: array
        senders:
          description: Represents a list of sender addresses with the respective amounts.
            In account-based protocols like Ethereum there is only one address in
            this list.
          items:
            $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItem_senders'
          type: array
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1582202940
          type: integer
        transactionHash:
          description: Represents the same as `transactionId` for account-based protocols
            like Ethereum, while it could be different in UTXO-based protocols like
            Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId`
            for SegWit transactions.
          example: 1ec73b0f61359927d02376b35993b756b1097cb9a857bec23da4c98c4977d2b2
          type: string
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 4b66461bf88b61e1e4326356534c135129defb504c7acb2fd6c92697d79eb250
          type: string
        fee:
          $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItem_fee'
        blockchainSpecific:
          $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecific'
      required:
      - blockchainSpecific
      - fee
      - index
      - minedInBlockHash
      - minedInBlockHeight
      - recipients
      - senders
      - timestamp
      - transactionHash
      - transactionId
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecific:
      oneOf:
      - $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin'
      - $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum'
      - $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash'
      - $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin'
      - $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin'
      - $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash'
      - $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic'
      type: object
    ListTransactionsByBlockHeightResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListTransactionsByBlockHeightResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    BlockchainDataBlockNotFound:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/BlockchainDataBlockNotFound_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificBitcoin:
      description: Bitcoin
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 3892
          type: integer
        bits:
          description: A sub-unit of BTC equal to 0.000001 BTC, or 100 Satoshi, and
            is the same as microbitcoin (μBTC). Bits have two-decimal precision.
          example: "420773839"
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 0000000000000000000000000000000000000000000003ddecb747af741625d6
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 7b52cc9ce137b92365eb4d0f8a708da9e3ba199aa422f96352a0c0c87221251b
          type: string
        strippedSize:
          description: Defines the numeric representation of the block size excluding
            the witness data.
          example: 2840
          type: integer
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 545259520
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000"
          type: string
        weight:
          description: Represents a measurement to compare the size of different transactions
            to each other in proportion to the block size limit.
          example: 12412
          type: integer
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - strippedSize
      - version
      - versionHex
      - weight
      type: object
    GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificEthereum:
      description: Ethereum
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 3892
          type: integer
        extraData:
          description: Represents any data that can be included by the miner in the
            block.
          example: 0xd983010203844765746887676f312e342e328777696e646f7773
          type: string
        gasLimit:
          description: Defines the total gas limit of all transactions in the block.
          example: "3141592"
          type: string
        gasUsed:
          description: Represents the total amount of gas used by all transactions
            in this block.
          example: "21000"
          type: string
        minedInSeconds:
          description: Specifies the amount of time required for the block to be mined
            in seconds.
          example: 8
          type: integer
        sha3Uncles:
          description: Defines the combined hash of all uncles for a given parent.
          example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          type: string
        totalDifficulty:
          description: Defines the total difficulty of the chain until this block,
            i.e. how difficult it is for a specific miner to mine a new block.
          example: "20104747399762079739558"
          type: string
      required:
      - difficulty
      - extraData
      - gasLimit
      - gasUsed
      - minedInSeconds
      - nonce
      - sha3Uncles
      - size
      - totalDifficulty
      type: object
    GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificEthereumClassic:
      description: Ethereum Classic
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 3892
          type: integer
        extraData:
          description: Represents any data that can be included by the miner in the
            block.
          example: 0x307834383639373636353666366532303530366636663663
          type: string
        gasLimit:
          description: Defines the total gas limit of all transactions in the block.
          example: "3141592"
          type: string
        gasUsed:
          description: Represents the total amount of gas used by all transactions
            in this block.
          example: "21000"
          type: string
        minedInSeconds:
          description: Specifies the amount of time required for the block to be mined
            in seconds.
          example: 8
          type: integer
        sha3Uncles:
          description: Defines the combined hash of all uncles for a given parent.
          example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          type: string
        totalDifficulty:
          description: Defines the total difficulty of the chain until this block,
            i.e. how difficult it is for a specific miner to mine a new block.
          example: "20104747399762079739558"
          type: string
      required:
      - difficulty
      - extraData
      - gasLimit
      - gasUsed
      - minedInSeconds
      - nonce
      - sha3Uncles
      - size
      - totalDifficulty
      type: object
    GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificBitcoinCash:
      description: Bitcoin Cash
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 3892
          type: integer
        bits:
          description: A sub-unit of BTC equal to 0.000001 BTC, or 100 Satoshi, and
            is the same as microbitcoin (μBTC). Bits have two-decimal precision.
          example: 1917ffc5
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 0000047a031ea2dedc1db49eee2ca6d6ac39c9362f59b25899538d43c6c68bc7
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 263a9121b0e8aaf6a3df5f77f7658b358def7642ed8d674b97dc4e207b7f6937
          type: string
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000"
          type: string
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - version
      - versionHex
      type: object
    GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificLitecoin:
      description: Litecoin
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 3892
          type: integer
        bits:
          description: Represents a specific sub-unit of Litecoin. Bits have two-decimal
            precision.
          example: 1917ffc5
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 0000047a031ea2dedc1db49eee2ca6d6ac39c9362f59b25899538d43c6c68bc7
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 0000047a031ea2dedc1db49eee2ca6d6ac39c9362f59b25899538d43c6c68bc7
          type: string
        strippedSize:
          description: Defines the numeric representation of the block size excluding
            the witness data.
          example: 930838
          type: integer
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000"
          type: string
        weight:
          description: Represents a measurement to compare the size of different transactions
            to each other in proportion to the block size limit.
          example: 2238302
          type: integer
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - strippedSize
      - version
      - versionHex
      - weight
      type: object
    GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificDogecoin:
      description: Dogecoin
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 3892
          type: integer
        bits:
          description: Represents a specific sub-unit of Doge. Bits have two-decimal
            precision.
          example: 1917ffc5
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 0000047a031ea2dedc1db49eee2ca6d6ac39c9362f59b25899538d43c6c68bc7
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 0000047a031ea2dedc1db49eee2ca6d6ac39c9362f59b25899538d43c6c68bc7
          type: string
        strippedSize:
          description: Defines the numeric representation of the block size excluding
            the witness data.
          example: 930838
          type: integer
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        weight:
          description: Represents a measurement to compare the size of different transactions
            to each other in proportion to the block size limit.
          example: 2238302
          type: integer
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - strippedSize
      - version
      - weight
      type: object
    GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificDash:
      description: Dash
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 3892
          type: integer
        bits:
          description: Represents a specific sub-unit of Dash. Bits have two-decimal
            precision.
          example: 1917ffc5
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 0000000000000000000000000000000000000000000016abcea319c908148ad0
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 0348f785f8779822c9f81d60684f320e9a230fbfe6241a0502edfe257feff3b6
          type: string
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "30000000"
          type: string
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - version
      - versionHex
      type: object
    GetBlockDetailsByBlockHeightResponseItem:
      example:
        previousBlockHash: 00000000b8c2337ed1221d1861105ad227dfff93b0a1798e78fb6edff58925f5
        nextBlockHash: 000000000000000e2f2e4fab8eaaa6bb39632a79a825d34169d451a86959fe04
        hash: 000000000000000cf507214c4f86a5048449230bc5c5dbbed59aa74421553f26
        transactionsCount: 12
        height: 1939743
        timestamp: 1615378134
      properties:
        hash:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 000000000000000cf507214c4f86a5048449230bc5c5dbbed59aa74421553f26
          type: string
        height:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: 1939743
          type: integer
        nextBlockHash:
          description: Represents the hash of the next block. When this is the last
            block of the blockchain this value will be an empty string.
          example: 000000000000000e2f2e4fab8eaaa6bb39632a79a825d34169d451a86959fe04
          type: string
        previousBlockHash:
          description: Represents the hash of the previous block, also known as the
            parent block.
          example: 00000000b8c2337ed1221d1861105ad227dfff93b0a1798e78fb6edff58925f5
          type: string
        timestamp:
          description: Defines the exact date/time when this block was mined in Unix
            Timestamp.
          example: 1615378134
          type: integer
        transactionsCount:
          description: Represents the total number of all transactions as part of
            this block.
          example: 12
          type: integer
        blockchainSpecific:
          $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponseItemBlockchainSpecific'
      required:
      - blockchainSpecific
      - hash
      - height
      - nextBlockHash
      - previousBlockHash
      - timestamp
      - transactionsCount
      type: object
    GetBlockDetailsByBlockHeightResponseItemBlockchainSpecific:
      oneOf:
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificBitcoin'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificEthereum'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificEthereumClassic'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificBitcoinCash'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificLitecoin'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificDogecoin'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponseItemBlockchainSpecificDash'
      type: object
    GetBlockDetailsByBlockHeightResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            previousBlockHash: 00000000b8c2337ed1221d1861105ad227dfff93b0a1798e78fb6edff58925f5
            nextBlockHash: 000000000000000e2f2e4fab8eaaa6bb39632a79a825d34169d451a86959fe04
            hash: 000000000000000cf507214c4f86a5048449230bc5c5dbbed59aa74421553f26
            transactionsCount: 12
            height: 1939743
            timestamp: 1615378134
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetXRPRippleBlockDetailsByBlockHeightResponseItem:
      example:
        blockHash: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
        totalFees:
          amount: "0.004487"
          unit: XRP
        previousBlockHash: dcf6ade36e1d5f30b3e52605692ff47123f290f4c8915cbf5a6b7c3541f2354e
        nextBlockHash: 738cf04b9e32826395a8445aa44ec6bbb83f2cc296d94201625f3a3d6ff85a5a
        blockHeight: 15886156
        totalCoins:
          amount: "22.0012"
          unit: Drops
        transactionsCount: 0
        timestamp: 1616069434
      properties:
        blockHash:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
          type: string
        blockHeight:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: 15886156
          type: integer
        nextBlockHash:
          description: Represents the hash of the next block. When this is the last
            block of the blockchain this value will be an empty string.
          example: 738cf04b9e32826395a8445aa44ec6bbb83f2cc296d94201625f3a3d6ff85a5a
          type: string
        previousBlockHash:
          description: Represents the hash of the previous block, also known as the
            parent block.
          example: dcf6ade36e1d5f30b3e52605692ff47123f290f4c8915cbf5a6b7c3541f2354e
          type: string
        timestamp:
          description: Defines the exact date/time when this block was mined in Unix
            Timestamp.
          example: 1616069434
          type: integer
        totalCoins:
          $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHeightResponseItem_totalCoins'
        totalFees:
          $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHeightResponseItem_totalFees'
        transactionsCount:
          description: Represents the total number of all transactions as part of
            this block.
          example: 0
          type: integer
      required:
      - blockHash
      - blockHeight
      - nextBlockHash
      - previousBlockHash
      - timestamp
      - totalCoins
      - totalFees
      - transactionsCount
      type: object
    GetXRPRippleBlockDetailsByBlockHeightResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            blockHash: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
            totalFees:
              amount: "0.004487"
              unit: XRP
            previousBlockHash: dcf6ade36e1d5f30b3e52605692ff47123f290f4c8915cbf5a6b7c3541f2354e
            nextBlockHash: 738cf04b9e32826395a8445aa44ec6bbb83f2cc296d94201625f3a3d6ff85a5a
            blockHeight: 15886156
            totalCoins:
              amount: "22.0012"
              unit: Drops
            transactionsCount: 0
            timestamp: 1616069434
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHeightResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListUnconfirmedOmniTransactionsByPropertyIDResponseItem:
      properties:
        amount:
          description: Defines the amount of the sent tokens.
          example: "9.146383"
          type: string
        divisible:
          description: Defines whether the attribute can be divisible or not, as boolean.
            E.g., if it is "true", the attribute is divisible.
          example: true
          type: boolean
        mined:
          description: Defines whether the transaction has been mined or not, as boolean.
            E.g. if set to "true", it means the transaction is mined.
          example: true
          type: boolean
        propertyId:
          description: Represents the identifier of the tokens to send.
          example: 2
          type: integer
        recipients:
          description: Represents an object of addresses that receive the transactions.
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByAddressResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/GetUnconfirmedOmniTransactionByTransactionIDTxidResponseItem_senders'
          type: array
        sent:
          description: Defines whether the transaction has been sent or not, as boolean.
            E.g. if set to "true", it means the transaction is sent.
          example: false
          type: boolean
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1616487033
          type: integer
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 37ed9145565ffc8c51df7370bd82d546d892973f15cb6c974e7b6b52f1bf5aa9
          type: string
        type:
          description: Defines the type of the transaction as a string.
          example: Simple Send
          type: string
        typeIint:
          description: Defines the type of the transaction as a number.
          example: 0
          type: integer
        version:
          description: Defines the specific version.
          example: 0
          type: integer
        fee:
          $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByAddressResponseItem_fee'
      required:
      - amount
      - divisible
      - fee
      - mined
      - propertyId
      - recipients
      - senders
      - sent
      - timestamp
      - transactionId
      - type
      - typeIint
      - version
      type: object
    ListUnconfirmedOmniTransactionsByPropertyIDResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByPropertyIDResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin:
      description: Bitcoin
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work.
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 53598
          type: integer
        bits:
          description: A sub-unit of BTC equal to 0.000001 BTC, or 100 Satoshi, and
            is the same as microbitcoin (μBTC). Bits have two-decimal precision.
          example: "420773839"
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 0000000000000000000000000000000000000000000003ddecb747af741625d6
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 7b52cc9ce137b92365eb4d0f8a708da9e3ba199aa422f96352a0c0c87221251b
          type: string
        strippedSize:
          description: Defines the numeric representation of the block size excluding
            the witness data.
          example: 2840
          type: integer
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 545259520
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000000"
          type: string
        weight:
          description: Represents a measurement to compare the size of different transactions
            to each other in proportion to the block size limit.
          example: 12412
          type: integer
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - strippedSize
      - version
      - versionHex
      - weight
      type: object
    GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum:
      description: Ethereum
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work.
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 53598
          type: integer
        extraData:
          description: Represents any data that can be included by the miner in the
            block.
          example: 0xd983010203844765746887676f312e342e328777696e646f7773
          type: string
        gasLimit:
          description: Defines the total gas limit of all transactions in the block.
          example: "7999992"
          type: string
        gasUsed:
          description: Represents the total amount of gas used by all transactions
            in this block.
          example: "21000"
          type: string
        minedInSeconds:
          description: Specifies the amount of time required for the block to be mined
            in seconds.
          example: 12
          type: integer
        sha3Uncles:
          description: Defines the combined hash of all uncles for a given parent.
          example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          type: string
        totalDifficulty:
          description: Defines the total difficulty of the chain until this block,
            i.e. how difficult it is for a specific miner to mine a new block.
          example: "1088214928417257646845"
          type: string
        uncles:
          items:
            description: Represents the uncles of the blocks, which occur when more
              than one child block is created from a parent block.
            type: string
          type: array
      required:
      - difficulty
      - extraData
      - gasLimit
      - gasUsed
      - minedInSeconds
      - nonce
      - sha3Uncles
      - size
      - totalDifficulty
      - uncles
      type: object
    GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic:
      description: Ethereum Classic
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work.
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 53598
          type: integer
        extraData:
          description: Represents any data that can be included by the miner in the
            block.
          type: string
        gasLimit:
          description: Defines the total gas limit of all transactions in the block.
          example: "7999992"
          type: string
        gasUsed:
          description: Represents the total amount of gas used by all transactions
            in this block.
          example: "21000"
          type: string
        minedInSeconds:
          description: Specifies the amount of time required for the block to be mined
            in seconds.
          example: 12
          type: integer
        sha3Uncles:
          description: Defines the combined hash of all uncles for a given parent.
          example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          type: string
        totalDifficulty:
          description: Defines the total difficulty of the chain until this block,
            i.e. how difficult it is for a specific miner to mine a new block.
          example: "1088214928417257646845"
          type: string
        uncles:
          items:
            description: Represents the uncles of the blocks, which occur when more
              than one child block is created from a parent block.
            type: string
          type: array
      required:
      - difficulty
      - extraData
      - gasLimit
      - gasUsed
      - minedInSeconds
      - nonce
      - sha3Uncles
      - size
      - totalDifficulty
      - uncles
      type: object
    GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash:
      description: Bitcoin Cash
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work.
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 53598
          type: integer
        bits:
          description: A sub-unit of BTC equal to 0.000001 BTC, or 100 Satoshi, and
            is the same as microbitcoin (μBTC). Bits have two-decimal precision.
          example: 1c011c75
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 000000000000000000000000000000000000000000000044d6888a7ec8caf0ce
          type: string
        merkleroot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 14add5ff6fb9dfc58767228b658a48f85d988a1cc49151238f9cef85b53e54d2
          type: string
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000000"
          type: string
      required:
      - bits
      - chainwork
      - difficulty
      - merkleroot
      - nonce
      - size
      - version
      - versionHex
      type: object
    GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin:
      description: Litecoin
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work.
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 53598
          type: integer
        bits:
          description: Represents a specific sub-unit of Litecoin. Bits have two-decimal
            precision.
          example: 191670a9
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 000000000000000000000000000000000000000000004f7606f3d619a200dc2d
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 95439d11e918c9fd9a901dcf22203d60f538d660ae74efb7cb566825420fd3b7
          type: string
        strippedSize:
          description: Defines the numeric representation of the block size excluding
            the witness data.
          example: 895429
          type: integer
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000000"
          type: string
        weight:
          description: Represents a measurement to compare the size of different transactions
            to each other in proportion to the block size limit.
          example: 37248
          type: integer
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - strippedSize
      - version
      - versionHex
      - weight
      type: object
    GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin:
      description: Dogecoin
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work.
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 53598
          type: integer
        bits:
          description: Represents a specific sub-unit of Doge. Bits have two-decimal
            precision.
          example: 191670a9
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 000000000000000000000000000000000000000000004f7606f3d619a200dc2d
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 95439d11e918c9fd9a901dcf22203d60f538d660ae74efb7cb566825420fd3b7
          type: string
        strippedSize:
          description: Defines the numeric representation of the block size excluding
            the witness data.
          example: 895429
          type: integer
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        weight:
          description: Represents a measurement to compare the size of different transactions
            to each other in proportion to the block size limit.
          example: 37248
          type: integer
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - strippedSize
      - version
      - weight
      type: object
    GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash:
      description: Dash
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "209515044.4071968"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            Proof of Work.
          example: "1535290446"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 53598
          type: integer
        bits:
          description: Represents a specific sub-unit of Dash. Bits have two-decimal
            precision.
          example: 191b7fd9
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 0000000000000000000000000000000000000000000016b0ef9202fae046555d
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 14add5ff6fb9dfc58767228b658a48f85d988a1cc49151238f9cef85b53e54d2
          type: string
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000000"
          type: string
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - version
      - versionHex
      type: object
    GetBlockDetailsByBlockHashResponseItem:
      example:
        previousBlockHash: 00000000844434fd86a630ba8e29503d5396a2b6c4003d69bf0a08d96169d4cd
        nextBlockHash: 0000000000000003b08ca90b701da447fb3e7c5c6b43acd33a5e4062fe98dea5
        hash: 0000000006b3f483bec16b8a85c632bdd30a14a202c83a9148002c9ee441dd0c
        transactionsCount: 145
        height: 1941208
        timestamp: 1615378134
      properties:
        hash:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 0000000006b3f483bec16b8a85c632bdd30a14a202c83a9148002c9ee441dd0c
          type: string
        height:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: 1941208
          type: integer
        nextBlockHash:
          description: Represents the hash of the next block. When this is the last
            block of the blockchain this value will be an empty string.
          example: 0000000000000003b08ca90b701da447fb3e7c5c6b43acd33a5e4062fe98dea5
          type: string
        previousBlockHash:
          description: Represents the hash of the previous block, also known as the
            parent block.
          example: 00000000844434fd86a630ba8e29503d5396a2b6c4003d69bf0a08d96169d4cd
          type: string
        timestamp:
          description: Defines the exact date/time when this block was mined in Unix
            Timestamp.
          example: 1615378134
          type: integer
        transactionsCount:
          description: Represents the total number of all transactions as part of
            this block.
          example: 145
          type: integer
        blockchainSpecific:
          $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponseItemBlockchainSpecific'
      required:
      - blockchainSpecific
      - hash
      - height
      - nextBlockHash
      - previousBlockHash
      - timestamp
      - transactionsCount
      type: object
    GetBlockDetailsByBlockHashResponseItemBlockchainSpecific:
      oneOf:
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoin'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereum'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponseItemBlockchainSpecificEthereumClassic'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponseItemBlockchainSpecificBitcoinCash'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponseItemBlockchainSpecificLitecoin'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDogecoin'
      - $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponseItemBlockchainSpecificDash'
      type: object
    GetBlockDetailsByBlockHashResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            previousBlockHash: 00000000844434fd86a630ba8e29503d5396a2b6c4003d69bf0a08d96169d4cd
            nextBlockHash: 0000000000000003b08ca90b701da447fb3e7c5c6b43acd33a5e4062fe98dea5
            hash: 0000000006b3f483bec16b8a85c632bdd30a14a202c83a9148002c9ee441dd0c
            transactionsCount: 145
            height: 1941208
            timestamp: 1615378134
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetXRPRippleBlockDetailsByBlockHashResponseItem:
      example:
        blockHash: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
        totalFees:
          amount: "0.004487"
          unit: XRP
        previousBlockHash: dcf6ade36e1d5f30b3e52605692ff47123f290f4c8915cbf5a6b7c3541f2354e
        nextBlockHash: 738cf04b9e32826395a8445aa44ec6bbb83f2cc296d94201625f3a3d6ff85a5a
        blockHeight: 15886156
        totalCoins:
          amount: "22.0012"
          unit: Drops
        transactionsCount: 0
        timestamp: 1616069434
      properties:
        blockHash:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
          type: string
        blockHeight:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: 15886156
          type: integer
        nextBlockHash:
          description: Represents the hash of the next block. When this is the last
            block of the blockchain this value will be an empty string.
          example: 738cf04b9e32826395a8445aa44ec6bbb83f2cc296d94201625f3a3d6ff85a5a
          type: string
        previousBlockHash:
          description: Represents the hash of the previous block, also known as the
            parent block.
          example: dcf6ade36e1d5f30b3e52605692ff47123f290f4c8915cbf5a6b7c3541f2354e
          type: string
        timestamp:
          description: Defines the exact date/time when this block was mined in Unix
            Timestamp.
          example: 1616069434
          type: integer
        totalCoins:
          $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHashResponseItem_totalCoins'
        totalFees:
          $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHeightResponseItem_totalFees'
        transactionsCount:
          description: Represents the total number of all transactions as part of
            this block.
          example: 0
          type: integer
      required:
      - blockHash
      - blockHeight
      - nextBlockHash
      - previousBlockHash
      - timestamp
      - totalCoins
      - totalFees
      - transactionsCount
      type: object
    GetXRPRippleBlockDetailsByBlockHashResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            blockHash: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
            totalFees:
              amount: "0.004487"
              unit: XRP
            previousBlockHash: dcf6ade36e1d5f30b3e52605692ff47123f290f4c8915cbf5a6b7c3541f2354e
            nextBlockHash: 738cf04b9e32826395a8445aa44ec6bbb83f2cc296d94201625f3a3d6ff85a5a
            blockHeight: 15886156
            totalCoins:
              amount: "22.0012"
              unit: Drops
            transactionsCount: 0
            timestamp: 1616069434
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHashResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetOmniTransactionDetailsByTransactionIDTxidResponseItem:
      example:
        amount: "14.915785"
        divisible: true
        fee:
          amount: "0.0001"
          unit: BTC
        minedInBlockHash: 0000000049696aca62d2ea7db9e71aa4f1116ede1eb55f9932e758cc586eb8b6
        type: Simple Send
        version: 0
        transactionId: d237ff4a681617b767bf22c4e1e8f5115b95c8c168d6cf53bbdec68529f91ecb
        valid: true
        typeInt: 0
        recipients:
        - amount: "0.1"
          address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        - amount: "0.1"
          address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        minedInBlockHeight: 1941239
        propertyId: 2
        senders:
        - amount: "0.00000546"
          address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        - amount: "0.00000546"
          address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        timestamp: 1616423278
      properties:
        amount:
          description: Defines the amount of the sent tokens.
          example: "14.915785"
          type: string
        divisible:
          description: Defines whether the attribute can be divisible or not, as boolean.
            E.g., if it is "true", the attribute is divisible.
          example: true
          type: boolean
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 0000000049696aca62d2ea7db9e71aa4f1116ede1eb55f9932e758cc586eb8b6
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 1941239
          type: integer
        propertyId:
          description: Represents the identifier of the tokens to send.
          example: 2
          type: integer
        recipients:
          description: Represents an object of addresses that receive the transactions.
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByAddressResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/GetOmniTransactionDetailsByTransactionIDTxidResponseItem_senders'
          type: array
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1616423278
          type: integer
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: d237ff4a681617b767bf22c4e1e8f5115b95c8c168d6cf53bbdec68529f91ecb
          type: string
        type:
          description: Defines the type of the transaction as a string.
          example: Simple Send
          type: string
        typeInt:
          description: Defines the type of the transaction as a number.
          example: 0
          type: integer
        valid:
          description: Defines whether the transaction is valid or not, as boolean.
            E.g. if set to "true", it means the transaction is valid.
          example: true
          type: boolean
        version:
          description: Defines the specific version.
          example: 0
          type: integer
        fee:
          $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByAddressResponseItem_fee'
      required:
      - amount
      - divisible
      - fee
      - minedInBlockHash
      - minedInBlockHeight
      - propertyId
      - recipients
      - senders
      - timestamp
      - transactionId
      - type
      - typeInt
      - valid
      - version
      type: object
    GetOmniTransactionDetailsByTransactionIDTxidResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            amount: "14.915785"
            divisible: true
            fee:
              amount: "0.0001"
              unit: BTC
            minedInBlockHash: 0000000049696aca62d2ea7db9e71aa4f1116ede1eb55f9932e758cc586eb8b6
            type: Simple Send
            version: 0
            transactionId: d237ff4a681617b767bf22c4e1e8f5115b95c8c168d6cf53bbdec68529f91ecb
            valid: true
            typeInt: 0
            recipients:
            - amount: "0.1"
              address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            - amount: "0.1"
              address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            minedInBlockHeight: 1941239
            propertyId: 2
            senders:
            - amount: "0.00000546"
              address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            - amount: "0.00000546"
              address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            timestamp: 1616423278
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetOmniTransactionDetailsByTransactionIDTxidResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin:
      description: Bitcoin
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "21448277761059.71"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            proof of work
          example: "2113101077"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 1408113
          type: integer
        bits:
          description: A sub-unit of BTC equal to 0.000001 BTC, or 100 Satoshi, and
            is the same as microbitcoin (μBTC). Bits have two-decimal precision.
          example: 170d21b9
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 00000000000000000000000000000000000000001932c1bc515b0c0e0dee2040
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 02754414626473fa39a0cfbf8d1960fc17ba932ab586340f61f039114053e851
          type: string
        strippedSize:
          description: Defines the numeric representation of the block size excluding
            the witness data.
          example: 925958
          type: integer
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536928256
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "2000000"
          type: string
        weight:
          description: Represents a measurement to compare the size of different transactions
            to each other in proportion to the block size limit.
          example: 3999412
          type: integer
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - strippedSize
      - version
      - versionHex
      - weight
      type: object
    GetLatestMinedBlockResponseItemBlockchainSpecificEthereum:
      description: Ethereum
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "21448277761059.71"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            proof of work
          example: "2113101077"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 1408113
          type: integer
        extraData:
          description: Represents any data that can be included by the miner in the
            block.
          example: 0x7070796520e4b883e5bda9e7a59ee4bb99e9b1bc080c
          type: string
        gasLimit:
          description: Defines the total gas limit of all transactions in the block.
          example: "12499653"
          type: string
        gasUsed:
          description: Represents the total amount of gas used by all transactions
            in this block.
          example: "12488144"
          type: string
        minedInSeconds:
          description: Specifies the amount of time required for the block to be mined
            in seconds.
          example: 17
          type: integer
        sha3Uncles:
          description: Defines the combined hash of all uncles for a given parent.
          example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          type: string
        totalDifficulty:
          description: Defines the total difficulty of the chain until this block,
            i.e. how difficult it is for a specific miner to mine a new block.
          example: "4794080996481072"
          type: string
      required:
      - difficulty
      - extraData
      - gasLimit
      - gasUsed
      - minedInSeconds
      - nonce
      - sha3Uncles
      - size
      - totalDifficulty
      type: object
    GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic:
      description: Ethereum Classic
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "21448277761059.71"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            proof of work
          example: "2113101077"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 1408113
          type: integer
        extraData:
          description: Represents any data that can be included by the miner in the
            block.
          example: 0xd983010203844765746887676f312e342e328777696e646f7773
          type: string
        gasLimit:
          description: Defines the total gas limit of all transactions in the block.
          example: "7999992"
          type: string
        gasUsed:
          description: Represents the total amount of gas used by all transactions
            in this block.
          example: "6494"
          type: string
        minedInSeconds:
          description: Specifies the amount of time required for the block to be mined
            in seconds.
          example: 6
          type: integer
        sha3Uncles:
          description: Defines the combined hash of all uncles for a given parent.
          example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          type: string
        totalDifficulty:
          description: Defines the total difficulty of the chain until this block,
            i.e. how difficult it is for a specific miner to mine a new block.
          example: "1086033282060494457577"
          type: string
      required:
      - difficulty
      - extraData
      - gasLimit
      - gasUsed
      - minedInSeconds
      - nonce
      - sha3Uncles
      - size
      - totalDifficulty
      type: object
    GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash:
      description: Bitcoin Cash
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "21448277761059.71"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            proof of work
          example: "2113101077"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 1408113
          type: integer
        bits:
          description: A sub-unit of BCH equal to 0.000001 BCH, or 100 Satoshi, and
            is the same as microbitcoincash (μBCH). Bits have two-decimal precision.
          example: 1805839a
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 0000000000000000000000000000000000000000015dc8754d8bfaedfffbb3bd
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 543872ba53c13183f951d76dd5933f98900a1bf9b3eef716857dfcc3c0534dfb
          type: string
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 545259520
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000000"
          type: string
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - version
      - versionHex
      type: object
    GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin:
      description: Litecoin
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "21448277761059.71"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            proof of work
          example: "2113101077"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 1408113
          type: integer
        bits:
          description: Represents a specific sub-unit of Litecoin. Bits have two-decimal
            precision.
          example: 1a01a4ae
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 00000000000000000000000000000000000000000000052f02c48d14c5b35ccc
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: a7d45c761cbea0c31ce55b1f2f04d98005980489470ebcc7c29b7b317f01f96b
          type: string
        strippedSize:
          description: Defines the numeric representation of the block size excluding
            the witness data.
          example: 131447
          type: integer
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000000"
          type: string
        weight:
          description: Represents a measurement to compare the size of different transactions
            to each other in proportion to the block size limit.
          example: 585599
          type: integer
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - strippedSize
      - version
      - versionHex
      - weight
      type: object
    GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin:
      description: Dogecoin
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "21448277761059.71"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            proof of work
          example: "2113101077"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 1408113
          type: integer
        bits:
          description: Represents a specific sub-unit of Doge. Bits have two-decimal
            precision.
          example: 1a031996
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 00000000000000000000000000000000000000000000048ea6f3be405ae0a819
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: bfeb2ed090f955ec07c51be25bbddc91ea73cafbe8c3d6f1a76b288e70b19df6
          type: string
        strippedSize:
          description: Defines the numeric representation of the block size excluding
            the witness data.
          example: 4322
          type: integer
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 6422788
          type: integer
        weight:
          description: Represents a measurement to compare the size of different transactions
            to each other in proportion to the block size limit.
          example: 17288
          type: integer
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - strippedSize
      - version
      - weight
      type: object
    GetLatestMinedBlockResponseItemBlockchainSpecificDash:
      description: Dash
      properties:
        difficulty:
          description: Represents a mathematical value of how hard it is to find a
            valid hash for this block.
          example: "21448277761059.71"
          type: string
        nonce:
          description: Represents a random value that can be adjusted to satisfy the
            proof of work
          example: "2113101077"
          type: string
        size:
          description: Represents the total size of the block in Bytes.
          example: 1408113
          type: integer
        bits:
          description: Represents a specific sub-unit of Dash. Bits have two-decimal
            precision.
          example: 1c0b6b81
          type: string
        chainwork:
          description: Represents a hexadecimal number of all the hashes necessary
            to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd
            to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
          example: 000000000000000000000000000000000000000000004f2b087db88ad29f2da6
          type: string
        merkleRoot:
          description: Defines the single and final (root) node of a Merkle tree.
            It is the combined hash of all transactions' hashes that are part of a
            blockchain block.
          example: 67eab41d993576c37ee9ce89054641660e9e61de98fa2b701d19c25cfb4ce037
          type: string
        version:
          description: Represents the version of the specific block on the blockchain.
          example: 536870912
          type: integer
        versionHex:
          description: Is the hexadecimal string representation of the block's version.
          example: "20000010"
          type: string
      required:
      - bits
      - chainwork
      - difficulty
      - merkleRoot
      - nonce
      - size
      - version
      - versionHex
      type: object
    GetLatestMinedBlockResponseItem:
      example:
        previousBlockHash: 00000000000000000008953625613e60b56194ea31f07aad43c7505fbddce77f
        hash: 00000000000000000002ad6f9c74faf503bb055c54e0d0746ef34f888f95890f
        transactionsCount: 2755
        height: 673852
        timestamp: 1610365615
      properties:
        hash:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: 00000000000000000002ad6f9c74faf503bb055c54e0d0746ef34f888f95890f
          type: string
        height:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: 673852
          type: integer
        previousBlockHash:
          description: Represents the hash of the previous block, also known as the
            parent block.
          example: 00000000000000000008953625613e60b56194ea31f07aad43c7505fbddce77f
          type: string
        timestamp:
          description: Defines the exact date/time when this block was mined in Unix
            Timestamp.
          example: 1610365615
          type: integer
        transactionsCount:
          description: Represents the total number of all transactions as part of
            this block.
          example: 2755
          type: integer
        blockchainSpecific:
          $ref: '#/components/schemas/GetLatestMinedBlockResponseItemBlockchainSpecific'
      required:
      - blockchainSpecific
      - hash
      - height
      - previousBlockHash
      - timestamp
      - transactionsCount
      type: object
    GetLatestMinedBlockResponseItemBlockchainSpecific:
      oneOf:
      - $ref: '#/components/schemas/GetLatestMinedBlockResponseItemBlockchainSpecificBitcoin'
      - $ref: '#/components/schemas/GetLatestMinedBlockResponseItemBlockchainSpecificEthereum'
      - $ref: '#/components/schemas/GetLatestMinedBlockResponseItemBlockchainSpecificEthereumClassic'
      - $ref: '#/components/schemas/GetLatestMinedBlockResponseItemBlockchainSpecificBitcoinCash'
      - $ref: '#/components/schemas/GetLatestMinedBlockResponseItemBlockchainSpecificLitecoin'
      - $ref: '#/components/schemas/GetLatestMinedBlockResponseItemBlockchainSpecificDogecoin'
      - $ref: '#/components/schemas/GetLatestMinedBlockResponseItemBlockchainSpecificDash'
      type: object
    GetLatestMinedBlockResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            previousBlockHash: 00000000000000000008953625613e60b56194ea31f07aad43c7505fbddce77f
            hash: 00000000000000000002ad6f9c74faf503bb055c54e0d0746ef34f888f95890f
            transactionsCount: 2755
            height: 673852
            timestamp: 1610365615
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetLatestMinedBlockResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListOmniTransactionsByBlockHeightResponseItem:
      properties:
        amount:
          description: Defines the amount of the sent tokens.
          example: "798.483157"
          type: string
        divisible:
          description: Defines whether the attribute can be divisible or not, as boolean.
            E.g., if it is "true", the attribute is divisible.
          example: true
          type: boolean
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 000000000000000000061610767eaa0394cab83c70ff1c09dd6b2a2bdad5d1d1
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 59000
          type: integer
        positionInBlock:
          description: Represents the index position of the transaction in the specific
            block.
          example: 18
          type: integer
        propertyId:
          description: Represents the identifier of the tokens to send.
          example: 2
          type: integer
        recipients:
          description: Represents an object of addresses that receive the transactions.
          example: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByBlockHeightResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByBlockHeightResponseItem_senders'
          type: array
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1565743888
          type: integer
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: f43ecd605d8d733d02684c17c3a61d66aed7a9ec4c627fb060b763c348696259
          type: string
        type:
          description: Defines the type of the transaction as a string.
          example: Simple Send
          type: string
        typeInt:
          description: Defines the type of the transaction as a number.
          example: 0
          type: integer
        valid:
          description: Defines whether the transaction is valid or not, as boolean.
            E.g., if it is "true", the transaction is valid.
          example: true
          type: boolean
        version:
          description: Defines the specific version.
          example: 0
          type: integer
        fee:
          $ref: '#/components/schemas/ListOmniTransactionsByBlockHeightResponseItem_fee'
      required:
      - amount
      - divisible
      - fee
      - minedInBlockHash
      - minedInBlockHeight
      - positionInBlock
      - propertyId
      - recipients
      - senders
      - timestamp
      - transactionId
      - type
      - typeInt
      - valid
      - version
      type: object
    ListOmniTransactionsByBlockHeightResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListOmniTransactionsByBlockHeightResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetLatestMinedXRPRippleBlockResponseItem:
      example:
        blockHash: f9b304b7933ef298142fdd58ad2dec414a5267dcbbd8a4fe9fc2c0a5f9dde050
        totalFees:
          amount: "0.00001"
          unit: XRP
        previousBlockHash: de9f9e5b68a1322a16f0d1217cf31765e9101764e6e2f3c7aa058b8c641da37a
        blockHeight: 15975748
        totalCoins:
          amount: "22.0012"
          unit: XRP
        transactionsCount: 1
        timestamp: 1616430182
      properties:
        blockHash:
          description: Represents the hash of the block, which is its unique identifier.
            It represents a cryptographic digital fingerprint made by hashing the
            block header twice through the SHA256 algorithm.
          example: f9b304b7933ef298142fdd58ad2dec414a5267dcbbd8a4fe9fc2c0a5f9dde050
          type: string
        blockHeight:
          description: Represents the number of blocks in the blockchain preceding
            this specific block. Block numbers have no gaps. A blockchain usually
            starts with block 0 called the "Genesis block".
          example: 15975748
          type: integer
        previousBlockHash:
          description: Represents the hash of the previous block, also known as the
            parent block.
          example: de9f9e5b68a1322a16f0d1217cf31765e9101764e6e2f3c7aa058b8c641da37a
          type: string
        timestamp:
          description: Defines the exact date/time when this block was mined in Unix
            Timestamp.
          example: 1616430182
          type: integer
        transactionsCount:
          description: Represents the total number of all transactions as part of
            this block.
          example: 1
          type: integer
        totalCoins:
          $ref: '#/components/schemas/GetLatestMinedXRPRippleBlockResponseItem_totalCoins'
        totalFees:
          $ref: '#/components/schemas/GetLatestMinedXRPRippleBlockResponseItem_totalFees'
      required:
      - blockHash
      - blockHeight
      - previousBlockHash
      - timestamp
      - totalCoins
      - totalFees
      - transactionsCount
      type: object
    GetLatestMinedXRPRippleBlockResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            blockHash: f9b304b7933ef298142fdd58ad2dec414a5267dcbbd8a4fe9fc2c0a5f9dde050
            totalFees:
              amount: "0.00001"
              unit: XRP
            previousBlockHash: de9f9e5b68a1322a16f0d1217cf31765e9101764e6e2f3c7aa058b8c641da37a
            blockHeight: 15975748
            totalCoins:
              amount: "22.0012"
              unit: XRP
            transactionsCount: 1
            timestamp: 1616430182
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetLatestMinedXRPRippleBlockResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    SyncHDWalletxPubYPubZPubResponseItem:
      example:
        extendedPublicKey: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
      properties:
        extendedPublicKey:
          description: Defines the account extended publicly known key which is used
            to derive all child public keys.
          example: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
          type: string
      required:
      - extendedPublicKey
      type: object
    SyncHDWalletxPubYPubZPubResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            extendedPublicKey: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/SyncHDWalletxPubYPubZPubResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    InvalidBlockchain:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/InvalidBlockchain_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    InvalidNetwork:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/InvalidNetwork_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    XpubNotSynced:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/XpubNotSynced_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    XpubSyncInProgress:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/XpubSyncInProgress_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    AlreadyExists:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/AlreadyExists_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    InvalidXpub:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/InvalidXpub_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    ListOmniTransactionsByBlockHashResponseItem:
      properties:
        amount:
          description: Defines the amount of the sent tokens.
          example: "9.146383"
          type: string
        divisible:
          description: Defines whether the attribute can be divisible or not, as boolean.
            E.g., if it is "true", the attribute is divisible.
          example: true
          type: boolean
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 000000000000000000061610767eaa0394cab83c70ff1c09dd6b2a2bdad5d1d1
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 590000
          type: integer
        positionInBlock:
          description: Represents the index position of the transaction in the specific
            block.
          example: 7
          type: integer
        propertyId:
          description: Represents the identifier of the tokens to send.
          example: 1
          type: integer
        recipients:
          description: Represents an object of addresses that receive the transactions.
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByAddressResponseItem_recipients'
          type: array
        senders:
          description: Represents an object of addresses that provide the funds.
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByAddressResponseItem_senders'
          type: array
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1565743888
          type: integer
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 00000000000000e899a439e6b898af0f7f17a10212d31bf8760bf9dd170c4a76
          type: string
        type:
          description: Defines the type of the transaction as a string.
          example: Simple Send
          type: string
        typeInt:
          description: Defines the type of the transaction as a number.
          example: 0
          type: integer
        valid:
          description: Defines whether the transaction is valid or not, as boolean.
            E.g., if it is "true", the transaction is valid.
          example: true
          type: boolean
        version:
          description: Defines the specific version.
          example: 0
          type: integer
        fee:
          $ref: '#/components/schemas/ListOmniTransactionsByBlockHashResponseItem_fee'
      required:
      - amount
      - divisible
      - fee
      - minedInBlockHash
      - minedInBlockHeight
      - positionInBlock
      - propertyId
      - recipients
      - senders
      - timestamp
      - transactionId
      - type
      - typeInt
      - valid
      - version
      type: object
    ListOmniTransactionsByBlockHashResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListOmniTransactionsByBlockHashResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetHDWalletxPubYPubZPubDetailsResponseItem:
      example:
        confirmedBalance: "0.0021"
        totalSpent: "0.0001"
        totalReceived: "0.0002"
      properties:
        confirmedBalance:
          description: Specifies the confirmed coins balance of the Wallet.
          example: "0.0021"
          type: string
        totalReceived:
          description: Defines the total currency received to the Wallet.
          example: "0.0002"
          type: string
        totalSpent:
          description: Defines the total currency spent from the Wallet.
          example: "0.0001"
          type: string
      required:
      - confirmedBalance
      - totalReceived
      - totalSpent
      type: object
    GetHDWalletxPubYPubZPubDetailsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmedBalance: "0.0021"
            totalSpent: "0.0001"
            totalReceived: "0.0002"
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetHDWalletxPubYPubZPubDetailsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListHDWalletxPubYPubZPubTransactionsResponseItem:
      properties:
        index:
          description: Represents the index position of the transaction in the block.
          example: 1
          type: integer
        minedInBlockHash:
          description: Represents the hash of the block where this transaction was
            mined/confirmed for first time. The hash is defined as a cryptographic
            digital fingerprint made by hashing the block header twice through the
            SHA256 algorithm.
          example: 00000000407f119ecb74b44229228910400aaeb9f4e3b9869955b85a53e9b7db
          type: string
        minedInBlockHeight:
          description: Represents the hight of the block where this transaction was
            mined/confirmed for first time. The height is defined as the number of
            blocks in the blockchain preceding this specific block.
          example: 1903849
          type: integer
        recipients:
          description: Represents a list of recipient addresses with the respective
            amounts. In account-based protocols like Ethereum there is only one address
            in this list.
          items:
            $ref: '#/components/schemas/ListHDWalletxPubYPubZPubTransactionsResponseItem_recipients'
          type: array
        senders:
          description: Represents a list of sender addresses with the respective amounts.
            In account-based protocols like Ethereum there is only one address in
            this list.
          items:
            $ref: '#/components/schemas/ListHDWalletxPubYPubZPubTransactionsResponseItem_senders'
          type: array
        timestamp:
          description: Defines the exact date/time in Unix Timestamp when this transaction
            was mined, confirmed or first seen in Mempool, if it is unconfirmed.
          example: 1582202940
          type: integer
        transactionHash:
          description: Represents the same as `transactionId` for account-based protocols
            like Ethereum, while it could be different in UTXO-based protocols like
            Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId`
            for SegWit transactions.
          example: 1ec73b0f61359927d02376b35993b756b1097cb9a857bec23da4c98c4977d2b2
          type: string
        transactionId:
          description: Represents the unique identifier of a transaction, i.e. it
            could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction
            `hash` in Ethereum blockchain.
          example: 4b66461bf88b61e1e4326356534c135129defb504c7acb2fd6c92697d79eb250
          type: string
        fee:
          $ref: '#/components/schemas/ListHDWalletxPubYPubZPubTransactionsResponseItem_fee'
      required:
      - fee
      - index
      - minedInBlockHash
      - minedInBlockHeight
      - recipients
      - senders
      - timestamp
      - transactionHash
      - transactionId
      type: object
    ListHDWalletxPubYPubZPubTransactionsResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListHDWalletxPubYPubZPubTransactionsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetFeeRecommendationsResponseItem:
      example:
        standard: "0.00000178"
        unit: BTC
        fast: "0.00000476"
        slow: "0.00000049"
      properties:
        unit:
          description: Defines the unit of the fee, e.g. BTC.
          example: BTC
          type: string
        fast:
          description: Defines the fee priority as "FAST". It works per byte, for
            UTXO-based protocols like Bitcoin, or per gas price, for account-based
            protocols like Ethereum. These are calculated based on Mempool.
          example: "0.00000476"
          type: string
        slow:
          description: Defines the fee priority as "SLOW". It works per byte, for
            UTXO-based protocols like Bitcoin, or per gas price, for account-based
            protocols like Ethereum. These are calculated based on Mempool.
          example: "0.00000049"
          type: string
        standard:
          description: Defines the fee priority as "STANDARD". It works per byte,
            for UTXO-based protocols like Bitcoin, or per gas price, for account-based
            protocols like Ethereum. These are calculated based on Mempool.
          example: "0.00000178"
          type: string
      required:
      - fast
      - slow
      - standard
      - unit
      type: object
    GetFeeRecommendationsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            standard: "0.00000178"
            unit: BTC
            fast: "0.00000476"
            slow: "0.00000049"
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetFeeRecommendationsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetContractDetailsByAddressResponseItem:
      example:
        confirmedBalance: confirmedBalance
        tokenSymbol: tokenSymbol
        tokenDecimals: tokenDecimals
        totalSupply: totalSupply
        tokensBalance: tokensBalance
        tokenName: tokenName
        tokenType: tokenType
        creatorAddress: creatorAddress
      properties:
        confirmedBalance:
          description: Token balance
          type: string
        creatorAddress:
          description: Token creator
          type: string
        tokenDecimals:
          description: Number of decimals
          type: string
        tokenName:
          description: Token name
          type: string
        tokenSymbol:
          description: Token symbol
          type: string
        tokenType:
          description: Token type
          type: string
        tokensBalance:
          description: Token balance
          type: string
        totalSupply:
          description: Token total supply
          type: string
      required:
      - confirmedBalance
      - creatorAddress
      - tokensBalance
      - totalSupply
      type: object
    GetContractDetailsByAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmedBalance: confirmedBalance
            tokenSymbol: tokenSymbol
            tokenDecimals: tokenDecimals
            totalSupply: totalSupply
            tokensBalance: tokensBalance
            tokenName: tokenName
            tokenType: tokenType
            creatorAddress: creatorAddress
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetContractDetailsByAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListTokensTransfersByTransactionHashResponseItem:
      properties:
        contractAddress:
          description: Represents the contract address of the token, which controls
            its logic. It is not the address that holds the tokens.
          example: 0x7495fede000c8a3b77eeae09cf70fa94cd2d53f5
          type: string
        minedInBlockHeight:
          description: Defines the block height in which this transaction was confirmed/mined.
          example: 9841271
          type: integer
        recipientAddress:
          description: Defines the address to which the recipient receives the transferred
            tokens.
          example: 0x9e91eb3a35b96f0f0fe71f3c17fe8d29eb406b16
          type: string
        senderAddress:
          description: Defines the address from which the sender transfers tokens.
          example: 0x9df8a6441e8a3dda75019595d431f9aa0dec475c
          type: string
        tokenDecimals:
          description: Defines the decimals of the token, i.e. the number of digits
            that come after the decimal coma of the token.
          example: 18
          type: integer
        tokenName:
          description: Defines the token's name as a string.
          example: Band Protocol
          type: string
        tokenSymbol:
          description: Defines the token symbol by which the token contract is known.
            It is usually 3-4 characters in length.
          example: BAND
          type: string
        tokenType:
          description: Defines the specific token type.
          example: ERC-20
          type: string
        tokensAmount:
          description: Defines the token amount of the transfer.
          example: "0.001"
          type: string
        transactionHash:
          description: Represents the hash of the transaction, which is its unique
            identifier. It represents a cryptographic digital fingerprint made by
            hashing the block header twice through the SHA256 algorithm.
          example: 0x60ba3dded833e61f63b6b6d62afe5c7526c5ca09c6744749f13eef11afde2cb4
          type: string
        transactionTimestamp:
          description: Defines the specific time/date when the transaction was created
            in Unix Timestamp.
          example: 1615818368
          type: integer
      required:
      - contractAddress
      - minedInBlockHeight
      - recipientAddress
      - senderAddress
      - tokenDecimals
      - tokenName
      - tokenSymbol
      - tokenType
      - tokensAmount
      - transactionHash
      - transactionTimestamp
      type: object
    ListTokensTransfersByTransactionHashResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListTokensTransfersByTransactionHashResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListTokensTransfersByAddressResponseItem:
      properties:
        contractAddress:
          description: Represents the contract address of the token, which controls
            its logic. It is not the address that holds the tokens.
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
        minedInBlockHeight:
          description: Defines the block height in which this transaction was confirmed/mined.
          example: 12046964
          type: integer
        recipientAddress:
          description: Defines the address to which the recipient receives the transferred
            tokens.
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
        senderAddress:
          description: Defines the address from which the sender transfers tokens.
          example: 0x65b895f400dae5541d70cbbec07527210158f6e2
          type: string
        tokenDecimals:
          description: Defines the decimals of the token, i.e. the number of digits
            that come after the decimal coma of the token.
          example: 6
          type: integer
        tokenName:
          description: Defines the token's name as a string.
          example: Tether USD
          type: string
        tokenSymbol:
          description: Defines the token symbol by which the token contract is known.
            It is usually 3-4 characters in length.
          example: USDT
          type: string
        tokenType:
          description: Defines the specific token type.
          example: ERC-20
          type: string
        tokensAmount:
          description: Defines the token amount of the transfer.
          example: "9.146383"
          type: string
        transactionHash:
          description: Represents the hash of the transaction, which is its unique
            identifier. It represents a cryptographic digital fingerprint made by
            hashing the block header twice through the SHA256 algorithm.
          example: 0x32de09d747bcbed41e8162681a72b2a6c760cf2116ce372fcd357c260909838a
          type: string
        transactionTimestamp:
          description: Defines the specific time/date when the transaction was created
            in Unix Timestamp.
          example: 1615861410
          type: integer
      required:
      - contractAddress
      - minedInBlockHeight
      - recipientAddress
      - senderAddress
      - tokenDecimals
      - tokenName
      - tokenSymbol
      - tokenType
      - tokensAmount
      - transactionHash
      - transactionTimestamp
      type: object
    ListTokensTransfersByAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListTokensTransfersByAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListTokensByAddressResponseItem:
      properties:
        confirmedBalance:
          description: Defines the token balance that has been confirmed.
          example: "287090.926632"
          type: string
        contractAddress:
          description: Represents the contract address of the token, which controls
            its logic. It is not the address that holds the tokens.
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
        name:
          description: Defines the token's name as a string.
          example: Tether USD
          type: string
        symbol:
          description: Defines the token symbol by which the token contract is known.
            It is usually 3-4 characters in length.
          example: USDT
          type: string
        type:
          description: Defines the specific token type.
          example: ERC-20
          type: string
      required:
      - confirmedBalance
      - contractAddress
      - name
      - symbol
      - type
      type: object
    ListTokensByAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListTokensByAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    NewUnconfirmedCoinsTransactionsResponseItem:
      example:
        confirmationsCount: 4
        createdTimestamp: 1611238648
        callbackSecretKey: yourSecretKey
        callbackUrl: https://example.com
        eventType: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
        isActive: true
        referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
        transactionId: 96b4ea92dcca3a046c0ca2738ed9400f3c04f6c5f497cce4f3a148b1c948a1b3
      properties:
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 4
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1611238648
          type: integer
        eventType:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
          type: string
        isActive:
          description: Defines whether the subscription is active or not. Set as boolean.
          example: true
          type: boolean
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: bc243c86-0902-4386-b30d-e6b30fa1f2aa
          type: string
        transactionId:
          description: Represents the unique identification string that defines the
            transaction.
          example: 96b4ea92dcca3a046c0ca2738ed9400f3c04f6c5f497cce4f3a148b1c948a1b3
          type: string
      required:
      - callbackSecretKey
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - eventType
      - isActive
      - referenceId
      - transactionId
      type: object
    NewUnconfirmedCoinsTransactionsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: 4
            createdTimestamp: 1611238648
            callbackSecretKey: yourSecretKey
            callbackUrl: https://example.com
            eventType: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
            isActive: true
            referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
            transactionId: 96b4ea92dcca3a046c0ca2738ed9400f3c04f6c5f497cce4f3a148b1c948a1b3
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/NewUnconfirmedCoinsTransactionsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    BlockchainEventsCallbacksLimitReached:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/BlockchainEventsCallbacksLimitReached_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    NewUnconfirmedTokensTransactionsResponseItem:
      example:
        address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
        createdTimestamp: 1611238648
        callbackSecretKey: yourSecretKey
        callbackUrl: https://example.com
        eventType: ADDRESS_TOKENS_TRANSACTION_UNCONFIRMED
        isActive: true
        referenceId: c748624f-1843-4738-a7de-8258ada0f524
        transactionId: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
      properties:
        address:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
          type: string
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1611238648
          type: integer
        eventType:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: ADDRESS_TOKENS_TRANSACTION_UNCONFIRMED
          type: string
        isActive:
          description: Defines whether the subscription is active or not. Set as boolean.
          example: true
          type: boolean
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: c748624f-1843-4738-a7de-8258ada0f524
          type: string
        transactionId:
          description: Represents the unique identification string that defines the
            transaction.
          example: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
          type: string
      required:
      - address
      - callbackSecretKey
      - callbackUrl
      - createdTimestamp
      - eventType
      - isActive
      - referenceId
      - transactionId
      type: object
    NewUnconfirmedTokensTransactionsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
            createdTimestamp: 1611238648
            callbackSecretKey: yourSecretKey
            callbackUrl: https://example.com
            eventType: ADDRESS_TOKENS_TRANSACTION_UNCONFIRMED
            isActive: true
            referenceId: c748624f-1843-4738-a7de-8258ada0f524
            transactionId: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/NewUnconfirmedTokensTransactionsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    NewConfirmedCoinsTransactionsResponseItem:
      example:
        confirmationsCount: 2
        address: mfo7jkvcoSNxpRBM7XfcseZGQf9PmmU8TZ
        createdTimestamp: 1236238648
        callbackSecretKey: yourSecretKey
        callbackUrl: https://example.com
        eventType: ADDRESS_COINS_TRANSACTION_CONFIRMED
        isActive: true
        referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
        transactionId: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
      properties:
        address:
          description: Represents the address of the transaction, per which the result
            is returned.
          example: mfo7jkvcoSNxpRBM7XfcseZGQf9PmmU8TZ
          type: string
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs 2.0.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 2
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1236238648
          type: integer
        eventType:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: ADDRESS_COINS_TRANSACTION_CONFIRMED
          type: string
        isActive:
          description: Defines whether the subscription is active or not. Set as boolean.
          example: true
          type: boolean
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: bc243c86-0902-4386-b30d-e6b30fa1f2aa
          type: string
        transactionId:
          description: Represents the unique identification string that defines the
            transaction.
          example: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
          type: string
      required:
      - address
      - callbackSecretKey
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - eventType
      - isActive
      - referenceId
      - transactionId
      type: object
    NewConfirmedCoinsTransactionsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: 2
            address: mfo7jkvcoSNxpRBM7XfcseZGQf9PmmU8TZ
            createdTimestamp: 1236238648
            callbackSecretKey: yourSecretKey
            callbackUrl: https://example.com
            eventType: ADDRESS_COINS_TRANSACTION_CONFIRMED
            isActive: true
            referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
            transactionId: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/NewConfirmedCoinsTransactionsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    NewConfirmedTokensTransactionsResponseItem:
      example:
        confirmationsCount: "2"
        address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
        createdTimestamp: 1611238648
        callbackSecretKey: yourSecretKey
        callbackUrl: https://example.com
        eventType: ADDRESS_TOKENS_TRANSACTION_CONFIRMED
        isActive: true
        referenceId: c748624f-1843-4738-a7de-8258ada0f524
        transactionId: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
      properties:
        address:
          description: Represents the address of the transaction, per which the result
            is returned.
          example: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
          type: string
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: "2"
          type: string
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1611238648
          type: integer
        eventType:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: ADDRESS_TOKENS_TRANSACTION_CONFIRMED
          type: string
        isActive:
          description: Defines whether the subscription is active or not. Set as boolean.
          example: true
          type: boolean
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: c748624f-1843-4738-a7de-8258ada0f524
          type: string
        transactionId:
          description: Represents the unique identification string that defines the
            transaction.
          example: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
          type: string
      required:
      - address
      - callbackSecretKey
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - eventType
      - isActive
      - referenceId
      - transactionId
      type: object
    NewConfirmedTokensTransactionsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: "2"
            address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
            createdTimestamp: 1611238648
            callbackSecretKey: yourSecretKey
            callbackUrl: https://example.com
            eventType: ADDRESS_TOKENS_TRANSACTION_CONFIRMED
            isActive: true
            referenceId: c748624f-1843-4738-a7de-8258ada0f524
            transactionId: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/NewConfirmedTokensTransactionsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    NewConfirmedTokensTransactionsAndEachConfirmationResponseItem:
      example:
        address: mwDuExdjRewYKYoR454sZGvd15LnJVsmoR
        createdTimestamp: 1236238648
        callbackUrl: https://example.com
        eventType: ADDRESS_TOKENS_TRANSACTION_CONFIRMED_EACH_CONFIRAMTION
        referenceId: c748624f-1843-4738-a7de-8258ada0f524
      properties:
        address:
          description: Represents the address of the transaction, per which the result
            is returned.
          example: mwDuExdjRewYKYoR454sZGvd15LnJVsmoR
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1236238648
          type: integer
        eventType:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: ADDRESS_TOKENS_TRANSACTION_CONFIRMED_EACH_CONFIRAMTION
          type: string
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: c748624f-1843-4738-a7de-8258ada0f524
          type: string
      required:
      - address
      - callbackUrl
      - createdTimestamp
      - eventType
      - referenceId
      type: object
    NewConfirmedTokensTransactionsAndEachConfirmationResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            address: mwDuExdjRewYKYoR454sZGvd15LnJVsmoR
            createdTimestamp: 1236238648
            callbackUrl: https://example.com
            eventType: ADDRESS_TOKENS_TRANSACTION_CONFIRMED_EACH_CONFIRAMTION
            referenceId: c748624f-1843-4738-a7de-8258ada0f524
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/NewConfirmedTokensTransactionsAndEachConfirmationResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    NewConfirmedCoinsTransactionsAndEachConfirmationResponseItem:
      example:
        confirmationsCount: 2
        address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
        createdTimestamp: 1611238648
        callbackSecretKey: yourSecretKey
        callbackUrl: https://example.com
        eventType: ADDRESS_COINS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
        isActive: true
        referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
        transactionId: 96b4ea92dcca3a046c0ca2738ed9400f3c04f6c5f497cce4f3a148b1c948a1b3
      properties:
        address:
          description: Represents the address of the transaction, per which the result
            is returned.
          example: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
          type: string
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 2
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1611238648
          type: integer
        eventType:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: ADDRESS_COINS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
          type: string
        isActive:
          description: Defines whether the subscription is active or not. Set as boolean.
          example: true
          type: boolean
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: bc243c86-0902-4386-b30d-e6b30fa1f2aa
          type: string
        transactionId:
          description: Represents the unique identification string that defines the
            transaction.
          example: 96b4ea92dcca3a046c0ca2738ed9400f3c04f6c5f497cce4f3a148b1c948a1b3
          type: string
      required:
      - address
      - callbackSecretKey
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - eventType
      - isActive
      - referenceId
      - transactionId
      type: object
    NewConfirmedCoinsTransactionsAndEachConfirmationResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: 2
            address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
            createdTimestamp: 1611238648
            callbackSecretKey: yourSecretKey
            callbackUrl: https://example.com
            eventType: ADDRESS_COINS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
            isActive: true
            referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
            transactionId: 96b4ea92dcca3a046c0ca2738ed9400f3c04f6c5f497cce4f3a148b1c948a1b3
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/NewConfirmedCoinsTransactionsAndEachConfirmationResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    MinedTransactionResponseItem:
      example:
        confirmationsCount: 2
        address: 2NCQH4pN7nf6Jb8iGoh69dgVLcVPQXBYHHk
        createdTimestamp: 1611238648
        callbackSecretKey: yourSecretKey
        callbackUrl: https://example.com
        eventType: TRANSACTION_MINED
        isActive: true
        referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
        transactionId: 742b4a8d54a663d372fa16abf74093595ae6fc950f2fa2bb7388c7f4d061d7b8
      properties:
        address:
          description: Represents the address of the transaction.
          example: 2NCQH4pN7nf6Jb8iGoh69dgVLcVPQXBYHHk
          type: string
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 2
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1611238648
          type: integer
        eventType:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: TRANSACTION_MINED
          type: string
        isActive:
          description: Defines whether the subscription is active or not. Set as boolean.
          example: true
          type: boolean
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: bc243c86-0902-4386-b30d-e6b30fa1f2aa
          type: string
        transactionId:
          description: Represents the unique identification string that defines the
            transaction.
          example: 742b4a8d54a663d372fa16abf74093595ae6fc950f2fa2bb7388c7f4d061d7b8
          type: string
      required:
      - address
      - callbackSecretKey
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - eventType
      - isActive
      - referenceId
      - transactionId
      type: object
    MinedTransactionResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: 2
            address: 2NCQH4pN7nf6Jb8iGoh69dgVLcVPQXBYHHk
            createdTimestamp: 1611238648
            callbackSecretKey: yourSecretKey
            callbackUrl: https://example.com
            eventType: TRANSACTION_MINED
            isActive: true
            referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
            transactionId: 742b4a8d54a663d372fa16abf74093595ae6fc950f2fa2bb7388c7f4d061d7b8
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/MinedTransactionResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    NewBlockResponseItem:
      example:
        createdTimestamp: 1611238648
        callbackSecretKey: yourSecretKey
        callbackUrl: http://yourURL.com
        isActive: true
        referenceId: 4c530a43-5602-41d9-bc69-156a0372f9aa
      properties:
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: http://yourURL.com
          type: string
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1611238648
          type: integer
        isActive:
          description: Defines whether the subscription is active or not. Set as boolean.
          example: true
          type: boolean
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 4c530a43-5602-41d9-bc69-156a0372f9aa
          type: string
      required:
      - callbackSecretKey
      - callbackUrl
      - createdTimestamp
      - isActive
      - referenceId
      type: object
    NewBlockResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            createdTimestamp: 1611238648
            callbackSecretKey: yourSecretKey
            callbackUrl: http://yourURL.com
            isActive: true
            referenceId: 4c530a43-5602-41d9-bc69-156a0372f9aa
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/NewBlockResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListBlockchainEventsSubscriptionsResponseItem:
      properties:
        address:
          description: Represents the address of the transaction.
          example: tb1qtm44m6xmuasy4sc7nl7thvuxcerau2dfvkkgsc
          type: string
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 5
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1966238648
          type: integer
        eventType:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: BLOCK_MINED
          type: string
        isActive:
          description: Defines whether the subscription is active or not. Set as boolean.
          example: true
          type: boolean
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: bc243c86-0902-4386-b30d-e6b30fa1f2aa
          type: string
        transactionId:
          description: Represents the unique identification string that defines the
            transaction.
          example: 742b4a8d54a663d372fa16abf74093595ae6fc950f2fa2bb7388c7f4d061d7b8
          type: string
      required:
      - address
      - callbackSecretKey
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - eventType
      - isActive
      - referenceId
      - transactionId
      type: object
    ListBlockchainEventsSubscriptionsResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListBlockchainEventsSubscriptionsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    DeleteBlockchainEventSubscriptionResponseItem:
      example:
        createdTimestamp: 1611238648
        callbackSecretKey: yourSecretKey
        callbackUrl: http://example.com
        eventType: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
        referenceId: 6de9a6ae-1463-458c-81a5-16d68d108012
      properties:
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: http://example.com
          type: string
        createdTimestamp:
          description: Defines the specific time/date when the subscription was created
            in Unix Timestamp.
          example: 1611238648
          type: integer
        eventType:
          description: Defines the type of the specific event available for the customer
            to subscribe to for callback notification.
          example: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
          type: string
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 6de9a6ae-1463-458c-81a5-16d68d108012
          type: string
      required:
      - callbackSecretKey
      - callbackUrl
      - createdTimestamp
      - eventType
      - referenceId
      type: object
    DeleteBlockchainEventSubscriptionResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            createdTimestamp: 1611238648
            callbackSecretKey: yourSecretKey
            callbackUrl: http://example.com
            eventType: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
            referenceId: 6de9a6ae-1463-458c-81a5-16d68d108012
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/DeleteBlockchainEventSubscriptionResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    CreateAutomaticCoinsForwardingResponseItem:
      example:
        confirmationsCount: 3
        feePriority: slow
        createdTimestamp: 1611238648
        minimumTransferAmount: "0.0002"
        callbackUrl: https://example.com
        fromAddress: mzAsK3csTnozLnYVdca4gaoH1btBZBC6QB
        toAddress: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
        referenceId: 6017c964973cdcf4d4f69e29
      properties:
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 3
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the automatic forwarding
            was created in Unix Timestamp.
          example: 1611238648
          type: integer
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "SLOW", "STANDARD" OR "FAST".
          enum:
          - slow
          - standard
          - fast
          type: string
        fromAddress:
          description: Represents the hash of the address that forwards the currency.
          example: mzAsK3csTnozLnYVdca4gaoH1btBZBC6QB
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the currency in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.0002"
          type: string
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 6017c964973cdcf4d4f69e29
          type: string
        toAddress:
          description: Represents the hash of the address the currency is forwarded
            to.
          example: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
          type: string
      required:
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - feePriority
      - fromAddress
      - minimumTransferAmount
      - referenceId
      - toAddress
      type: object
    CreateAutomaticCoinsForwardingResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: 3
            feePriority: slow
            createdTimestamp: 1611238648
            minimumTransferAmount: "0.0002"
            callbackUrl: https://example.com
            fromAddress: mzAsK3csTnozLnYVdca4gaoH1btBZBC6QB
            toAddress: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
            referenceId: 6017c964973cdcf4d4f69e29
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/CreateAutomaticCoinsForwardingResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    CoinsForwardingAutomationsLimitReached:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/CoinsForwardingAutomationsLimitReached_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    ListCoinsForwardingAutomationsResponseItem:
      properties:
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCountTrigger:
          description: Represents the total count of the transaction confirmations
            before triggering the event.
          example: 3
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the automatic forwarding
            was created in Unix Timestamp.
          example: 1611238648
          type: integer
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "SLOW", "STANDARD" OR "FAST".
          enum:
          - slow
          - standard
          - fast
          type: string
        fromAddress:
          description: Represents the hash of the address that forwards the currency.
          example: mzAsK3csTnozLnYVdca4gaoH1btBZBC6QB
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the currency in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.0002"
          type: string
        referenceId:
          description: Represents a unique ID used to reference the specific forwarding
            automation.
          example: 6017dd02a309213863be9e55
          type: string
        toAddress:
          description: Represents the hash of the address the currency is forwarded
            to.
          example: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
          type: string
      required:
      - callbackUrl
      - confirmationsCountTrigger
      - createdTimestamp
      - feePriority
      - fromAddress
      - minimumTransferAmount
      - referenceId
      - toAddress
      type: object
    ListCoinsForwardingAutomationsResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListCoinsForwardingAutomationsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    DeleteAutomaticCoinsForwardingResponseItem:
      example:
        confirmationsCount: "3"
        feePriority: slow
        createdTimestamp: "1611238648"
        minimumTransferAmount: "0.00002"
        callbackUrl: https://example.com
        fromAddress: mzAsK3csTnozLnYVdca4gaoH1btBZBC6QB
        toAddress: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
        referenceId: 601c1f23ec4b80f51245e617
      properties:
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: "3"
          type: string
        createdTimestamp:
          description: Defines the specific time/date when the automatic forwarding
            was created in Unix Timestamp.
          example: "1611238648"
          type: string
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "SLOW", "STANDARD" or "FAST".
          enum:
          - slow
          - standard
          - fast
          type: string
        fromAddress:
          description: Represents the hash of the address that forwards the currency.
          example: mzAsK3csTnozLnYVdca4gaoH1btBZBC6QB
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the currency in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.00002"
          type: string
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 601c1f23ec4b80f51245e617
          type: string
        toAddress:
          description: Represents the hash of the address the currency is forwarded
            to.
          example: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
          type: string
      required:
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - feePriority
      - fromAddress
      - minimumTransferAmount
      - referenceId
      - toAddress
      type: object
    DeleteAutomaticCoinsForwardingResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: "3"
            feePriority: slow
            createdTimestamp: "1611238648"
            minimumTransferAmount: "0.00002"
            callbackUrl: https://example.com
            fromAddress: mzAsK3csTnozLnYVdca4gaoH1btBZBC6QB
            toAddress: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
            referenceId: 601c1f23ec4b80f51245e617
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/DeleteAutomaticCoinsForwardingResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    AddTokensToExistingFromAddressResponseItemTokenDataBitcoinOmniToken:
      description: Bitcoin Omni Token
      properties:
        propertyId:
          description: Defines the `propertyId` of the Omni Layer token.
          example: 2
          type: integer
      required:
      - propertyId
      type: object
    AddTokensToExistingFromAddressResponseItemTokenDataEthereumErc-20Token:
      description: Ethereum erc-20 token
      properties:
        contractAddress:
          description: Token contract address to be transferred
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
      required:
      - contractAddress
      type: object
    AddTokensToExistingFromAddressResponseItem:
      example:
        confirmationsCount: 3
        feePriority: standard
        createdTimestamp: 1611238648
        feeAddress: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
        minimumTransferAmount: "0.0001"
        callbackUrl: https://example.com
        fromAddress: mizRduUBKEbJ6uzYJUegPh78gEGgM3WjAr
        toAddress: mnumE76iEKN47bUsdni85oped5D1fRwKWi
        referenceId: 6017dd02a309213863be9e55
      properties:
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 3
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the automatic forwarding
            was created in Unix Timestamp.
          example: 1611238648
          type: integer
        feeAddress:
          description: Represents the specific fee address, which is always automatically
            generated. Users must fund it.
          example: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
          type: string
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "SLOW", "STANDARD" or "FAST".
          enum:
          - slow
          - standard
          - fast
          example: standard
          type: string
        fromAddress:
          description: Represents the hash of the address that forwards the tokens.
          example: mizRduUBKEbJ6uzYJUegPh78gEGgM3WjAr
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the tokens in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.0001"
          type: string
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 6017dd02a309213863be9e55
          type: string
        toAddress:
          description: Represents the hash of the address the tokens are forwarded
            to.
          example: mnumE76iEKN47bUsdni85oped5D1fRwKWi
          type: string
        tokenData:
          $ref: '#/components/schemas/AddTokensToExistingFromAddressResponseItemTokenData'
      required:
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - feeAddress
      - feePriority
      - fromAddress
      - minimumTransferAmount
      - referenceId
      - toAddress
      - tokenData
      type: object
    AddTokensToExistingFromAddressResponseItemTokenData:
      oneOf:
      - $ref: '#/components/schemas/AddTokensToExistingFromAddressResponseItemTokenDataBitcoinOmniToken'
      - $ref: '#/components/schemas/AddTokensToExistingFromAddressResponseItemTokenDataEthereumErc-20Token'
      type: object
    AddTokensToExistingFromAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: 3
            feePriority: standard
            createdTimestamp: 1611238648
            feeAddress: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
            minimumTransferAmount: "0.0001"
            callbackUrl: https://example.com
            fromAddress: mizRduUBKEbJ6uzYJUegPh78gEGgM3WjAr
            toAddress: mnumE76iEKN47bUsdni85oped5D1fRwKWi
            referenceId: 6017dd02a309213863be9e55
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/AddTokensToExistingFromAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    TokensForwardingAutomationsLimitReached:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/TokensForwardingAutomationsLimitReached_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken:
      description: Bitcoin Omni Token
      properties:
        propertyId:
          description: Defines the `propertyId` of the Omni Layer token.
          example: 31
          type: integer
      required:
      - propertyId
      type: object
    CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken:
      description: Ethereum Token
      properties:
        contractAddress:
          description: Represents the specific `contractAddress` of the Token that
            will be forwarded.
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
      required:
      - contractAddress
      type: object
    CreateAutomaticTokensForwardingResponseItem:
      example:
        confirmationsCount: 2
        feePriority: slow
        createdTimestamp: 1611238648
        feeAddress: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
        minimumTransferAmount: "0.5"
        callbackUrl: https://example.com
        fromAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        toAddress: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
        referenceId: 6017dd02a309213863be9e55
      properties:
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 2
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the automatic forwarding
            was created in Unix Timestamp.
          example: 1611238648
          type: integer
        feeAddress:
          description: Represents the specific fee address, which is always automatically
            generated. Users must fund it.
          example: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
          type: string
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "SLOW", "STANDARD" or "FAST".
          enum:
          - slow
          - standard
          - fast
          type: string
        fromAddress:
          description: Represents the hash of the address that forwards the tokens.
          example: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the tokens in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.5"
          type: string
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 6017dd02a309213863be9e55
          type: string
        toAddress:
          description: Represents the hash of the address the tokens are forwarded
            to.
          example: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
          type: string
        tokenData:
          $ref: '#/components/schemas/CreateAutomaticTokensForwardingResponseItemTokenData'
      required:
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - feeAddress
      - feePriority
      - fromAddress
      - minimumTransferAmount
      - referenceId
      - toAddress
      - tokenData
      type: object
    CreateAutomaticTokensForwardingResponseItemTokenData:
      oneOf:
      - $ref: '#/components/schemas/CreateAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken'
      - $ref: '#/components/schemas/CreateAutomaticTokensForwardingResponseItemTokenDataEthereumToken'
      type: object
    CreateAutomaticTokensForwardingResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: 2
            feePriority: slow
            createdTimestamp: 1611238648
            feeAddress: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
            minimumTransferAmount: "0.5"
            callbackUrl: https://example.com
            fromAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            toAddress: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
            referenceId: 6017dd02a309213863be9e55
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/CreateAutomaticTokensForwardingResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListTokensForwardingAutomationsResponseItemTokenDataBitcoinOmniToken:
      description: Bitcoin Omni Token
      properties:
        propertyId:
          description: Defines the Property ID of the Omni Layer token.
          example: 31
          type: integer
      required:
      - propertyId
      type: object
    ListTokensForwardingAutomationsResponseItemTokenDataEthereumToken:
      description: Ethereum Token
      properties:
        contractAddress:
          description: Defines the token contract address.
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
      required:
      - contractAddress
      type: object
    ListTokensForwardingAutomationsResponseItem:
      properties:
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 2
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the automatic forwarding
            was created in Unix Timestamp.
          example: 1611238648
          type: integer
        feeAddress:
          description: Represents the specific fee address, which is always automatically
            generated. Users must fund it.
          example: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
          type: string
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "SLOW", "STANDARD" or "FAST".
          enum:
          - slow
          - standard
          - fast
          type: string
        fromAddress:
          description: Represents the hash of the address that forwards the tokens.
          example: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the tokens in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.5"
          type: string
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 6038ad04c22fba4680361105
          type: string
        toAddress:
          description: Represents the hash of the address the tokens are forwarded
            to.
          example: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
          type: string
        tokenData:
          $ref: '#/components/schemas/ListTokensForwardingAutomationsResponseItemTokenData'
      required:
      - callbackUrl
      - createdTimestamp
      - feeAddress
      - feePriority
      - fromAddress
      - minimumTransferAmount
      - referenceId
      - toAddress
      - tokenData
      type: object
    ListTokensForwardingAutomationsResponseItemTokenData:
      oneOf:
      - $ref: '#/components/schemas/ListTokensForwardingAutomationsResponseItemTokenDataBitcoinOmniToken'
      - $ref: '#/components/schemas/ListTokensForwardingAutomationsResponseItemTokenDataEthereumToken'
      type: object
    ListTokensForwardingAutomationsResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListTokensForwardingAutomationsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetFeeAddressDetailsResponseItem:
      example:
        address: 0xe2b5f5e885a268e4b6faae53f99a663f3bb3e036
        balance:
          amount: "0.01"
          unit: ETH
        minimumTransferAmount: "0.0002"
      properties:
        address:
          description: Represents the specific fee address, which is always automatically
            generated. Users must fund it.
          example: 0xe2b5f5e885a268e4b6faae53f99a663f3bb3e036
          type: string
        balance:
          $ref: '#/components/schemas/GetFeeAddressDetailsResponseItem_balance'
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the currency in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.0002"
          type: string
      required:
      - address
      - balance
      - minimumTransferAmount
      type: object
    GetFeeAddressDetailsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            address: 0xe2b5f5e885a268e4b6faae53f99a663f3bb3e036
            balance:
              amount: "0.01"
              unit: ETH
            minimumTransferAmount: "0.0002"
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetFeeAddressDetailsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    DeleteAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken:
      description: Bitcoin Omni Token
      properties:
        propertyId:
          description: Defines the `propertyId` of the Omni Layer token.
          example: 31
          type: integer
      required:
      - propertyId
      type: object
    DeleteAutomaticTokensForwardingResponseItemTokenDataEthereumToken:
      description: Ethereum Token
      properties:
        contractAddress:
          description: Represents the specific `contractAddress` of the Token that
            will be forwarded.
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
      required:
      - contractAddress
      type: object
    DeleteAutomaticTokensForwardingResponseItem:
      example:
        confirmationsCount: 2
        feePriority: slow
        createdTimestamp: 1611238648
        feeAddress: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
        minimumTransferAmount: "0.5"
        callbackUrl: https://example.com
        fromAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        toAddress: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
        referenceId: 6017dd02a309213863be9e55
      properties:
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 2
          type: integer
        createdTimestamp:
          description: Defines the specific time/date when the automatic forwarding
            was created in Unix Timestamp.
          example: 1611238648
          type: integer
        feeAddress:
          description: Represents the specific fee address, which is always automatically
            generated. Users must fund it.
          example: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
          type: string
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "SLOW", "STANDARD" or "FAST".
          enum:
          - slow
          - standard
          - fast
          type: string
        fromAddress:
          description: Represents the hash of the address that forwards the tokens.
          example: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the tokens in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.5"
          type: string
        referenceId:
          description: Represents a unique ID used to reference the specific callback
            subscription.
          example: 6017dd02a309213863be9e55
          type: string
        toAddress:
          description: Represents the hash of the address the tokens are forwarded
            to.
          example: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
          type: string
        tokenData:
          $ref: '#/components/schemas/DeleteAutomaticTokensForwardingResponseItemTokenData'
      required:
      - callbackUrl
      - confirmationsCount
      - createdTimestamp
      - feeAddress
      - feePriority
      - fromAddress
      - minimumTransferAmount
      - referenceId
      - toAddress
      - tokenData
      type: object
    DeleteAutomaticTokensForwardingResponseItemTokenData:
      oneOf:
      - $ref: '#/components/schemas/DeleteAutomaticTokensForwardingResponseItemTokenDataBitcoinOmniToken'
      - $ref: '#/components/schemas/DeleteAutomaticTokensForwardingResponseItemTokenDataEthereumToken'
      type: object
    DeleteAutomaticTokensForwardingResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            confirmationsCount: 2
            feePriority: slow
            createdTimestamp: 1611238648
            feeAddress: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
            minimumTransferAmount: "0.5"
            callbackUrl: https://example.com
            fromAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            toAddress: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
            referenceId: 6017dd02a309213863be9e55
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/DeleteAutomaticTokensForwardingResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ValidateAddressResponseItem:
      example:
        address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
        isValid: true
      properties:
        address:
          description: Represents the specific address that will be checked if it's
            valid or not.
          example: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
          type: string
        isValid:
          description: Defines whether the address is valid or not. Set as boolean.
          example: true
          type: boolean
      required:
      - address
      - isValid
      type: object
    ValidateAddressResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
            isValid: true
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ValidateAddressResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListSupportedAssetsResponseItem:
      properties:
        assetId:
          description: Defines the unique ID of the specific asset.
          example: 5b1ea92e584bf50020130615
          type: string
        assetName:
          description: Specifies the name of the asset in question.
          example: Bitcoin
          type: string
        assetSymbol:
          description: Specifies the asset's unique symbol in the Crypto APIs listings.
          example: BTC
          type: string
        assetType:
          description: Defines the type of the supported asset. This could be either
            "crypto" or "fiat".
          enum:
          - fiat
          - crypto
          example: crypto
          type: string
        originalSymbol:
          description: Specifies the asset's original symbol as introduced by its
            founders.
          example: BTC
          type: string
      required:
      - assetId
      - assetName
      - assetSymbol
      - assetType
      - originalSymbol
      type: object
    ListSupportedAssetsResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListSupportedAssetsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    GetExchangeRateByAssetSymbolsResponseItem:
      example:
        rate: "54768.26745499848"
        fromAssetSymbol: BTC
        fromAssetId: 5b1ea92e584bf50020130612
        toAssetSymbol: USD
        calculationTimestamp: 1618577849
        toAssetId: 5b1ea92e584bf50020130615
      properties:
        calculationTimestamp:
          description: Defines the time of the market data used to calculate the exchange
            rate in UNIX Timestamp.
          example: 1618577849
          type: integer
        fromAssetId:
          description: Defines the base asset Reference ID to get a rate for.
          example: 5b1ea92e584bf50020130612
          type: string
        fromAssetSymbol:
          description: Defines the base asset symbol to get a rate for.
          example: BTC
          type: string
        rate:
          description: Defines the exchange rate between assets calculated by weighted
            average of the last trades in every exchange for the last 24 hours by
            giving more weight to exchanges with higher volume.
          example: "54768.26745499848"
          type: string
        toAssetId:
          description: Defines the relation asset Reference ID in which the base asset
            rate will be displayed.
          example: 5b1ea92e584bf50020130615
          type: string
        toAssetSymbol:
          description: Defines the relation asset symbol in which the base asset rate
            will be displayed.
          example: USD
          type: string
      required:
      - calculationTimestamp
      - fromAssetId
      - fromAssetSymbol
      - rate
      - toAssetId
      - toAssetSymbol
      type: object
    GetExchangeRateByAssetSymbolsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            rate: "54768.26745499848"
            fromAssetSymbol: BTC
            fromAssetId: 5b1ea92e584bf50020130612
            toAssetSymbol: USD
            calculationTimestamp: 1618577849
            toAssetId: 5b1ea92e584bf50020130615
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetExchangeRateByAssetSymbolsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    CouldNotCalculateRateForPair:
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        error:
          $ref: '#/components/schemas/CouldNotCalculateRateForPair_error'
      required:
      - apiVersion
      - error
      - requestId
      type: object
    GetExchangeRateByAssetsIDsResponseItem:
      example:
        rate: "54691.40481689715"
        fromAssetSymbol: BTC
        fromAssetId: 5b1ea92e584bf50020130612
        toAssetSymbol: USD
        calculationTimestamp: 1618577849
        toAssetId: 5b1ea92e584bf50020130615
      properties:
        calculationTimestamp:
          description: Defines the time of the market data used to calculate the exchange
            rate in UNIX Timestamp.
          example: 1618577849
          type: integer
        fromAssetId:
          description: Defines the base asset Reference ID to get a rate for.
          example: 5b1ea92e584bf50020130612
          type: string
        fromAssetSymbol:
          description: Defines the base asset symbol to get a rate for.
          example: BTC
          type: string
        rate:
          description: Defines the exchange rate between assets calculated by weighted
            average of the last trades in every exchange for the last 24 hours by
            giving more weight to exchanges with higher volume.
          example: "54691.40481689715"
          type: string
        toAssetId:
          description: Defines the relation asset Reference ID in which the base asset
            rate will be displayed.
          example: 5b1ea92e584bf50020130615
          type: string
        toAssetSymbol:
          description: Defines the relation asset symbol in which the base asset rate
            will be displayed.
          example: USD
          type: string
      required:
      - calculationTimestamp
      - fromAssetId
      - fromAssetSymbol
      - rate
      - toAssetId
      - toAssetSymbol
      type: object
    GetExchangeRateByAssetsIDsResponse:
      example:
        apiVersion: "2.0"
        data:
          item:
            rate: "54691.40481689715"
            fromAssetSymbol: BTC
            fromAssetId: 5b1ea92e584bf50020130612
            toAssetSymbol: USD
            calculationTimestamp: 1618577849
            toAssetId: 5b1ea92e584bf50020130615
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/GetExchangeRateByAssetsIDsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    ListAssetsDetailsResponseItem:
      properties:
        assetId:
          description: Defines the unique ID of the specific asset.
          example: 5b1ea92e584bf50020130615
          type: string
        assetLogo:
          $ref: '#/components/schemas/ListAssetsDetailsResponseItem_assetLogo'
        assetName:
          description: Specifies the name of the asset in question.
          example: Bitcoin
          type: string
        assetOriginalSymbol:
          description: Specifies the asset's original symbol as introduced by its
            founders.
          example: BTC
          type: string
        assetSymbol:
          description: Specifies the asset's unique symbol in the Crypto APIs listings.
          example: BTC
          type: string
        assetType:
          description: Defines the type of the supported asset. This could be either
            "crypto" or "fiat".
          enum:
          - fiat
          - crypto
          example: crypto
          type: string
        latestRate:
          $ref: '#/components/schemas/ListAssetsDetailsResponseItem_latestRate'
        specificData:
          $ref: '#/components/schemas/ListAssetsDetailsResponseItemSpecificData'
      required:
      - assetId
      - assetLogo
      - assetName
      - assetOriginalSymbol
      - assetSymbol
      - assetType
      - latestRate
      - specificData
      type: object
    ListAssetsDetailsResponse:
      example:
        apiVersion: "2.0"
        data:
          total: 100
          offset: 0
          limit: 50
          items: []
        requestId: 601c1710034ed6d407996b30
        context: You can add any text here
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        requestId:
          description: Defines the ID of the request. The `requestId` is generated
            by Crypto APIs and it's unique for every request.
          example: 601c1710034ed6d407996b30
          type: string
        context:
          description: In batch situations the user can use the context to correlate
            responses with requests. This property is present regardless of whether
            the response was successful or returned as an error. `context` is specified
            by the user.
          example: You can add any text here
          type: string
        data:
          $ref: '#/components/schemas/ListAssetsDetailsResponse_data'
      required:
      - apiVersion
      - data
      - requestId
      type: object
    AddressCoinsTransactionUnconfirmed:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Events
          item:
            amount: "0.6508984"
            unit: BTC
            address: 3CzKAnCXt7ePb5NCp5qrAEimrxjY81oLoT
            blockchain: bitcoin
            firstSeenInMempoolTimestamp: 1610365615
            transactionId: 4b2159770f75a7200ea168eb56ebbf3303b025d838f743fb6e785bc32d5ac65b
            network: testnet
            direction: incoming
          event: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/AddressCoinsTransactionUnconfirmed_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    AddressTokensTransactionUnconfirmedEthereumerc20token:
      description: ethereumERC20Token
      properties:
        name:
          description: Specifies the name of the token.
          example: Tether USD
          type: string
        symbol:
          description: Specifies an identifier of the token, where up to five alphanumeric
            characters can be used for it.
          example: USDT
          type: string
        decimals:
          description: Defines how many decimals can be used to break the token.
          example: "6"
          type: string
        amount:
          description: Defines the amount of tokens sent with the transaction that
            is pending confirmation.
          example: "10.5"
          type: string
        contractAddress:
          description: Defines the address of the contract.
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          type: string
      required:
      - amount
      - contractAddress
      - name
      - symbol
      type: object
    AddressTokensTransactionUnconfirmedEthereumerc721token:
      description: ethereumERC721Token
      properties:
        name:
          description: Specifies the name of the token.
          example: CryptoKitties
          type: string
        symbol:
          description: Specifies an identifier of the token, where up to five alphanumeric
            characters can be used for it.
          example: CK
          type: string
        tokenId:
          description: Specifies the unique ID of the token.
          example: "1995580"
          type: string
        contractAddress:
          description: Specifies the address of the contract.
          example: 0x06012c8cf97bead5deae237070f9587f8e7a266d
          type: string
      required:
      - contractAddress
      - name
      - symbol
      - tokenId
      type: object
    AddressTokensTransactionUnconfirmedOmnilayertoken:
      description: omniLayerToken
      properties:
        name:
          description: Specifies the name of the token.
          example: TetherUS
          type: string
        propertyId:
          description: Defines the ID of the property for Omni Layer.
          example: '#31'
          type: string
        transactionType:
          description: Defines the type of the transaction made.
          example: Simple Send, DEx Purchase etc.
          type: string
        createdByTransactionId:
          description: The transaction ID used to create the token.
          example: 5ed3694e8a4fa8d3ec5c75eb6789492c69e65511522b220e94ab51da2b6dd53f
          type: string
        amount:
          description: Defines the amount of tokens sent with the transaction that
            is pending confirmation.
          example: "310.531725"
          type: string
      required:
      - amount
      - createdByTransactionId
      - name
      - propertyId
      - transactionType
      type: object
    AddressTokensTransactionUnconfirmedToken:
      oneOf:
      - $ref: '#/components/schemas/AddressTokensTransactionUnconfirmedEthereumerc20token'
      - $ref: '#/components/schemas/AddressTokensTransactionUnconfirmedEthereumerc721token'
      - $ref: '#/components/schemas/AddressTokensTransactionUnconfirmedOmnilayertoken'
      type: object
    AddressTokensTransactionUnconfirmed:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Events
          item:
            address: bc1qj9k6mryqfyl9dghdwnxx29660nws90mfarld46
            blockchain: bitcoin
            firstSeenInMempoolTimestamp: 1210363220
            tokenType: ethereumERC20Token
            transactionId: ade174e0ff264094bfcf4a83789d3aa3e7d7ab423ffa89e21871aad849f302db
            network: testnet
            direction: incoming
          event: ADDRESS_TOKENS_TRANSACTION_UNCONFIRMED
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/AddressTokensTransactionUnconfirmed_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    AddressCoinsTransactionConfirmed:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Events
          item:
            minedInBlock:
              hash: b00d27cccd5e4f4fa1b28824d9a1e5fef88e6c37cdeb09e37eb39aa1d3d63448
              height: 667861
              timestamp: 1610365213
            amount: "0.0315"
            unit: BTC
            address: bc1qmjhy4exylset37e6sfjdtfksm8kpcrxknj7cag
            blockchain: bitcoin
            transactionId: b00d27cccd5e4f4fa1b28824d9a1e5fef88e6c37cdeb09e37eb39aa1d3d63448
            network: testnet
            direction: incoming
          event: ADDRESS_COINS_TRANSACTION_CONFIRMED
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/AddressCoinsTransactionConfirmed_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    AddressTokensTransactionConfirmedEthereumerc20token:
      description: ethereumERC20Token
      properties:
        name:
          description: Specifies the name of the token.
          example: Tether USD
          type: string
        symbol:
          description: Specifies an identifier of the token, where up to five alphanumeric
            characters can be used for it.
          example: USDT
          type: string
        decimals:
          description: Defines how many decimals can be used to break the token.
          example: "5"
          type: string
        amount:
          description: Defines the amount of tokens sent with the confirmed transaction.
          example: "5.3"
          type: string
        contractAddress:
          description: Defines the address of the contract.
          example: 0x06012c8cf97bead5deae237070f9587f8e7a266d
          type: string
      required:
      - amount
      - contractAddress
      - name
      - symbol
      type: object
    AddressTokensTransactionConfirmedEthereumerc721token:
      description: ethereumERC721Token
      properties:
        name:
          description: Specifies the name of the token.
          example: CryptoKitties
          type: string
        symbol:
          description: Specifies an identifier of the token, where up to five alphanumeric
            characters can be used for it.
          example: CK
          type: string
        tokenId:
          description: Specifies the ID of the token.
          example: "1895557"
          type: string
        contractAddress:
          description: Specifies the address of the contract.
          example: 0x06012c8cf97bead5deae237070f9587f8e7a266d
          type: string
      required:
      - contractAddress
      - name
      - symbol
      - tokenId
      type: object
    AddressTokensTransactionConfirmedOmnilayertoken:
      description: omniLayerToken
      properties:
        name:
          description: Specifies the name of the token.
          example: TetherUS
          type: string
        propertyId:
          description: Defines the ID of the property for Omni Layer.
          type: string
        transactionType:
          description: Defines the type of the transaction.
          example: '#29'
          type: string
        createdByTransactionId:
          description: The transaction ID used to create the token.
          example: Simple Send, DEx Purchase etc.
          type: string
        amount:
          description: Defines the amount of tokens sent with the confirmed transaction.
          example: "250.531586"
          type: string
      required:
      - amount
      - createdByTransactionId
      - name
      - propertyId
      - transactionType
      type: object
    AddressTokensTransactionConfirmedToken:
      oneOf:
      - $ref: '#/components/schemas/AddressTokensTransactionConfirmedEthereumerc20token'
      - $ref: '#/components/schemas/AddressTokensTransactionConfirmedEthereumerc721token'
      - $ref: '#/components/schemas/AddressTokensTransactionConfirmedOmnilayertoken'
      type: object
    AddressTokensTransactionConfirmed:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Events
          item:
            minedInBlock:
              hash: 269b0de44db95beddb6aecc520b375ba8f91f3dc5558a24aa4c26979eb00c7e2
              height: 657915
              timestamp: 1586365500
            address: 16sAXi1jxhxKCfY84hubDdnFNaAhqd5t49
            blockchain: bitcoin
            tokenType: ethereumERC20Token
            transactionId: 269b0de44db95beddb6aecc520b375ba8f91f3dc5558a24aa4c26979eb00c7e2
            network: testnet
            direction: incoming
          event: ADDRESS_TOKENS_TRANSACTION_CONFIRMED
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/AddressTokensTransactionConfirmed_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    AddressTokensTransactionConfirmedEachConfirmationEthereumerc20token:
      description: ethereumERC20Token
      properties:
        name:
          description: Specifies the name of the token.
          example: Tether USD
          type: string
        symbol:
          description: Specifies an identifier of the token, where up to five alphanumeric
            characters can be used for it.
          example: USDT
          type: string
        decimals:
          description: Defines how many decimals can be used to break the token.
          example: "9"
          type: string
        amount:
          description: Defines the amount of tokens sent with the confirmed transaction.
          example: "11.9"
          type: string
        contractAddress:
          description: Defines the address of the contract.
          example: 0xdaF17f958d2ee523a2206206994597c13t831ec6
          type: string
      required:
      - amount
      - contractAddress
      - name
      - symbol
      type: object
    AddressTokensTransactionConfirmedEachConfirmationEthereumerc721token:
      description: ethereumERC721Token
      properties:
        name:
          description: Specifies the name of the token.
          example: CryptoKitties
          type: string
        symbol:
          description: Specifies an identifier of the token, where up to five alphanumeric
            characters can be used for it.
          example: CK
          type: string
        tokenId:
          description: Specifies the ID of the token.
          example: "1395571"
          type: string
        contractAddress:
          description: Specifies the address of the contract.
          example: 0x06012c8cf97bead5deae237070f9587f8e7a266d
          type: string
      required:
      - contractAddress
      - name
      - symbol
      - tokenId
      type: object
    AddressTokensTransactionConfirmedEachConfirmationOmnilayertoken:
      description: omniLayerToken
      properties:
        name:
          description: Specifies the name of the token.
          example: TetherUS
          type: string
        propertyId:
          description: Defines the ID of the property for Omni Layer.
          example: '#24'
          type: string
        transactionType:
          description: Defines the type of the transaction.
          example: Simple Send, DEx Purchase etc.
          type: string
        createdByTransactionId:
          description: The transaction ID used to create the token.
          example: 7ed3694e8a4fa8d3ec5c75eb6789492c69e65511522b220e94ab51da2b6dd53c
          type: string
        amount:
          description: Defines the amount of tokens sent with the confirmed transaction.
          example: "190.531725"
          type: string
      required:
      - amount
      - createdByTransactionId
      - name
      - propertyId
      - transactionType
      type: object
    AddressTokensTransactionConfirmedEachConfirmationToken:
      oneOf:
      - $ref: '#/components/schemas/AddressTokensTransactionConfirmedEachConfirmationEthereumerc20token'
      - $ref: '#/components/schemas/AddressTokensTransactionConfirmedEachConfirmationEthereumerc721token'
      - $ref: '#/components/schemas/AddressTokensTransactionConfirmedEachConfirmationOmnilayertoken'
      type: object
    AddressTokensTransactionConfirmedEachConfirmation:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Events
          item:
            currentConfirmations: 6
            minedInBlock:
              hash: 17b76ef496153888aafc661c00b9f8bd8e86fed5f7670dd17ce5be57be961089
              height: 668198
              timestamp: 1110365209
            address: 12dRugNcdxK39288NjcDV4GX7rMsKCGn6B
            blockchain: bitcoin
            tokenType: 'It could be one of: "ethereumERC20Token", "ethereumERC721Token",
              "omniLayerToken"'
            transactionId: c2163e3a0ac22a7256fd1e8b0391a27e3479723e72f5efed1676d0eea9ed6ef4
            network: testnet
            targetConfirmations: 15
            direction: incoming
          event: ADDRESS_TOKENS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/AddressTokensTransactionConfirmedEachConfirmation_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    AddressCoinsTransactionConfirmedEachConfirmation:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Events
          item:
            currentConfirmations: 8
            minedInBlock:
              hash: dfe45f6724b550c281107ffaa5880cb280878fb4dbaa742aa21449f3d2340c13
              height: 667754
              timestamp: 1610365314
            amount: "0.0611"
            unit: BTC
            address: 15282N4BYEwYh3j1dTgJu64Ey5qWn9Po9F
            blockchain: bitcoin
            transactionId: cbd3dea703bd2bc78bca69ee61ca14e6ffcdd809d07ebbc3b8fea3c30ea38f33
            network: testnet
            targetConfirmations: 12
            direction: incoming
          event: ADDRESS_COINS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/AddressCoinsTransactionConfirmedEachConfirmation_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    TransactionMined:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Events
          item:
            minedInBlock:
              hash: e9da0c8ce1861050c20f40fb660df4d13399f50b882e85bcd98126eb1173cc50
              height: 667900
              timestamp: 1610355613
            blockchain: bitcoin
            transactionId: e6439461e5bf8920e75740896d4b47730b844837295e8c3f2dbf441542aebcb6
            network: testnet
          event: TRANSACTION_MINED
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/TransactionMined_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    BlockMined:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Events
          item:
            blockchain: bitcoin
            hash: 00000000000000000006ddb5e854505f8b792122b0ac9469c07eb26db414f6fb
            network: testnet
            height: 570008
            timestamp: 1610365615
          event: BLOCK_MINED
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/BlockMined_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    CoinsForwardingSuccess:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Automations
          item:
            spentFeesUnit: BTC
            forwardedUnit: BTC
            spentFeesAmount: "0.00022827"
            blockchain: bitcoin
            forwardingTransactionId: 2241b5264fac8acb92e9fc597035b99cdd22f6578d63c6f52b099729f7c4f979
            fromAddress: mmd963W1fECjLyaDCHcioSCZYHkRwjkGST
            forwardedAmount: "00059441"
            toAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            network: testnet
            triggerTransactionId: 86a7546bde4ac28b34504909d138592a6d6fc1277ea1f8f2f9c75dc04bdf3b7b
          event: COINS_FORWARDING_SUCCESS
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/CoinsForwardingSuccess_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    CoinsForwardingFail:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Automations
          item:
            blockchain: bitcoin
            errorMessage: Address not found
            errorCode: blockchain_data_address_not_found
            fromAddress: 38RTQQ8915tEmKFMjpPJPfrh9yV5HbJCRb
            toAddress: 1PkLrGoEGiGdmqNXX8daYNFvVVTjmWjc7m
            network: testnet
            triggerTransactionId: 7e56c9cfaec36c77049ce5298bc153bb03b0b6b5dae760a62915617015f8e2a6
          event: COINS_FORWARDING_FAIL
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/CoinsForwardingFail_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    TokensForwardingSuccessEthereumerc20token:
      description: ethereumERC20Token
      properties:
        name:
          description: Specifies the name of the token.
          example: Tether USD
          type: string
        symbol:
          description: Specifies an identifier of the token, where up to five alphanumeric
            characters can be used for it.
          example: USDT
          type: string
        decimals:
          description: Defines how many decimals can be used to break the token.
          example: "7"
          type: string
        amount:
          description: Defines the amount of tokens sent with the confirmed transaction.
          example: "9.5"
          type: string
        contractAddress:
          description: Defines the address of the contract.
          example: 0xdaF17f958d2ee523a2206206994597c13t831ec6
          type: string
      required:
      - amount
      - contractAddress
      - name
      - symbol
      type: object
    TokensForwardingSuccessEthereumerc721token:
      description: ethereumERC721Token
      properties:
        name:
          description: Specifies the name of the token.
          example: CryptoKitties
          type: string
        symbol:
          description: Specifies an identifier of the token, where up to five alphanumeric
            characters can be used for it.
          example: CK
          type: string
        tokenId:
          description: Specifies the ID of the token.
          example: "1295570"
          type: string
        contractAddress:
          description: Specifies the address of the contract.
          example: 0x06012c8cf97bead5deae237070f9587f8e7a266d
          type: string
      required:
      - contractAddress
      - name
      - symbol
      - tokenId
      type: object
    TokensForwardingSuccessOmnilayertoken:
      description: omniLayerToken
      properties:
        name:
          description: Specifies the name of the token.
          example: TetherUS
          type: string
        propertyId:
          description: Defines the ID of the property for Omni Layer.
          example: "24"
          type: string
        transactionType:
          description: Defines the type of the transaction.
          example: Simple Send, DEx Purchase etc.
          type: string
        createdByTransactionId:
          description: The transaction ID used to create the token.
          example: 7ed3694e8a4fa8d3ec5c75eb6789492c69e65511522b220e94ab51da2b6dd53c
          type: string
        amount:
          description: Defines the amount of tokens sent with the confirmed transaction.
          example: "110.531723"
          type: string
      required:
      - amount
      - createdByTransactionId
      - name
      - propertyId
      - transactionType
      type: object
    TokensForwardingSuccessToken:
      oneOf:
      - $ref: '#/components/schemas/TokensForwardingSuccessEthereumerc20token'
      - $ref: '#/components/schemas/TokensForwardingSuccessEthereumerc721token'
      - $ref: '#/components/schemas/TokensForwardingSuccessOmnilayertoken'
      type: object
    TokensForwardingSuccess:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Automations
          item:
            spentFeesUnit: BTC
            spentFeesAmount: "0.00013601"
            blockchain: bitcoin
            forwardingTransactionId: b15ab5bbaf5107d551ae1b50181f4c55959205c4ff843e3c10d86d00e690fc72
            fromAddress: mh8E9c2YDQvn8uRf47Wy4zCv2zHQzcdgkk
            tokenType: omniLayerToken
            toAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
            network: testnet
            triggerTransactionId: 6ed1f1c8f2887a78ee8c45a975d928ca63eafc7b63def56324606ddd3cc9854f
          event: TOKENS_FORWARDING_SUCCESS
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/TokensForwardingSuccess_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    TokensForwardingFail:
      example:
        apiVersion: "2.0"
        data:
          product: Blockchain Automations
          item:
            blockchain: bitcoin
            errorMessage: The specified URI has not been found. Check the URI and
              try again.
            errorCode: FEE_ADDRESS_OUT_OF_FUNDS
            fromAddress: bc1qy4tncwfr6nw3rd8hcr6psxlrkufe6cq44tlfvv
            toAddress: 32Dv1CCNFagLcEdmC1uamj2k2jVDdokVQL
            network: testnet
            triggerTransactionId: 044681d8571cb55047d9425b7095272fbb8fe4f325b0cd822d374b6153af12a1
          event: TOKENS_FORWARDING_FAIL
        idempotencyKey: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
        referenceId: 6038d09050653d1f0e40584c
      properties:
        apiVersion:
          description: Specifies the version of the API that incorporates this endpoint.
          example: "2.0"
          type: string
        referenceId:
          description: Represents a unique identifier that serves as reference to
            the specific request which prompts a callback, e.g. Blockchain Events
            Subscription, Blockchain Automation, etc.
          example: 6038d09050653d1f0e40584c
          type: string
        idempotencyKey:
          description: Specifies a unique ID generated by the system and attached
            to each callback. It is used by the server to recognize consecutive requests
            with the same data with the purpose not to perform the same operation
            twice.
          example: e55bf7a4a7188855f1c27541a6c387d04cc3b22ee34d1304b0e6ecad61c9906c
          type: string
        data:
          $ref: '#/components/schemas/TokensForwardingFail_data'
      required:
      - apiVersion
      - data
      - idempotencyKey
      - referenceId
      type: object
    SyncHDWalletxPubYPubZPubRequestBody_data_item:
      example:
        extendedPublicKey: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
      properties:
        extendedPublicKey:
          description: Defines the account extended publicly known key which is used
            to derive all child public keys.
          example: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
          type: string
      required:
      - extendedPublicKey
      type: object
    SyncHDWalletxPubYPubZPubRequestBody_data:
      example:
        item:
          extendedPublicKey: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
      properties:
        item:
          $ref: '#/components/schemas/SyncHDWalletxPubYPubZPubRequestBody_data_item'
      required:
      - item
      type: object
    NewUnconfirmedCoinsTransactionsRequestBody_data_item:
      example:
        address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
        callbackSecretKey: yourSecretKey
        callbackUrl: http://example.com
        allowDuplicates: true
      properties:
        address:
          description: Represents the address of the transaction, per which the result
            is returned.
          example: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          type: string
        allowDuplicates:
          default: false
          description: Specifies a flag that permits or denies the creation of duplicate
            addresses.
          example: true
          type: boolean
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs 2.0.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: http://example.com
          type: string
      required:
      - address
      - callbackUrl
      type: object
    NewUnconfirmedCoinsTransactionsRequestBody_data:
      example:
        item:
          address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          callbackSecretKey: yourSecretKey
          callbackUrl: http://example.com
          allowDuplicates: true
      properties:
        item:
          $ref: '#/components/schemas/NewUnconfirmedCoinsTransactionsRequestBody_data_item'
      required:
      - item
      type: object
    NewUnconfirmedTokensTransactionsRequestBody_data_item:
      example:
        address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
        callbackSecretKey: yourSecretKey
        callbackUrl: http://example.com
        allowDuplicates: true
      properties:
        address:
          description: Represents the address of the transaction, per which the result
            is returned.
          example: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          type: string
        allowDuplicates:
          default: false
          description: Specifies a flag that permits or denies the creation of duplicate
            addresses.
          example: true
          type: boolean
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: http://example.com
          type: string
      required:
      - address
      - callbackUrl
      type: object
    NewUnconfirmedTokensTransactionsRequestBody_data:
      example:
        item:
          address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          callbackSecretKey: yourSecretKey
          callbackUrl: http://example.com
          allowDuplicates: true
      properties:
        item:
          $ref: '#/components/schemas/NewUnconfirmedTokensTransactionsRequestBody_data_item'
      required:
      - item
      type: object
    NewConfirmedCoinsTransactionsRequestBody_data_item:
      example:
        address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
        callbackSecretKey: yourSecretKey
        callbackURL: http://example.com
        allowDuplicates: true
      properties:
        address:
          description: Represents the address of the transaction, per which the result
            is returned.
          example: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          type: string
        allowDuplicates:
          default: false
          description: Specifies a flag that permits or denies the creation of duplicate
            addresses.
          example: true
          type: boolean
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackURL:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: http://example.com
          type: string
      required:
      - address
      - callbackURL
      type: object
    NewConfirmedCoinsTransactionsRequestBody_data:
      example:
        item:
          address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          callbackSecretKey: yourSecretKey
          callbackURL: http://example.com
          allowDuplicates: true
      properties:
        item:
          $ref: '#/components/schemas/NewConfirmedCoinsTransactionsRequestBody_data_item'
      required:
      - item
      type: object
    NewConfirmedTokensTransactionsAndEachConfirmationRequestBody_data_item:
      example:
        confirmationsCount: 3
        address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
        callbackSecretKey: yourSecretKey
        callbackUrl: http://example.com
        allowDuplicates: true
      properties:
        address:
          description: Represents the address of the transaction, per which the result
            is returned.
          example: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          type: string
        allowDuplicates:
          default: false
          description: Specifies a flag that permits or denies the creation of duplicate
            addresses.
          example: true
          type: boolean
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: http://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 3
          type: integer
      required:
      - address
      - callbackUrl
      type: object
    NewConfirmedTokensTransactionsAndEachConfirmationRequestBody_data:
      example:
        item:
          confirmationsCount: 3
          address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          callbackSecretKey: yourSecretKey
          callbackUrl: http://example.com
          allowDuplicates: true
      properties:
        item:
          $ref: '#/components/schemas/NewConfirmedTokensTransactionsAndEachConfirmationRequestBody_data_item'
      required:
      - item
      type: object
    NewConfirmedCoinsTransactionsAndEachConfirmationRequestBody_data_item:
      example:
        confirmationsCount: 3
        address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
        callbackSecretKey: yourSecretKey
        callbackUrl: http://example.com
        allowDuplicates: true
      properties:
        address:
          description: Represents the address of the transaction, per which the result
            is returned.
          example: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          type: string
        allowDuplicates:
          default: false
          description: Specifies a flag that permits or denies the creation of duplicate
            addresses.
          example: true
          type: boolean
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: http://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 3
          type: integer
      required:
      - address
      - callbackUrl
      - confirmationsCount
      type: object
    NewConfirmedCoinsTransactionsAndEachConfirmationRequestBody_data:
      example:
        item:
          confirmationsCount: 3
          address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          callbackSecretKey: yourSecretKey
          callbackUrl: http://example.com
          allowDuplicates: true
      properties:
        item:
          $ref: '#/components/schemas/NewConfirmedCoinsTransactionsAndEachConfirmationRequestBody_data_item'
      required:
      - item
      type: object
    MinedTransactionRequestBody_data_item:
      example:
        callbackSecretKey: yourSecretKey
        callbackUrl: http://example.com
        allowDuplicates: false
        transactionId: df2690ff97e72c1f8b0f2102a8cb5c1d0fa8fb8754d543c9bc0edc4d4bc34bfc
      properties:
        allowDuplicates:
          description: Specifies a flag that permits or denies the creation of duplicate
            addresses.
          example: false
          type: boolean
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: http://example.com
          type: string
        transactionId:
          description: Represents the unique identification string that defines the
            transaction.
          example: df2690ff97e72c1f8b0f2102a8cb5c1d0fa8fb8754d543c9bc0edc4d4bc34bfc
          type: string
      required:
      - callbackUrl
      - transactionId
      type: object
    MinedTransactionRequestBody_data:
      example:
        item:
          callbackSecretKey: yourSecretKey
          callbackUrl: http://example.com
          allowDuplicates: false
          transactionId: df2690ff97e72c1f8b0f2102a8cb5c1d0fa8fb8754d543c9bc0edc4d4bc34bfc
      properties:
        item:
          $ref: '#/components/schemas/MinedTransactionRequestBody_data_item'
      required:
      - item
      type: object
    NewBlockRequestBody_data_item:
      example:
        callbackSecretKey: yourSecretKey
        callbackUrl: http://example.com
        allowDuplicates: true
      properties:
        allowDuplicates:
          default: false
          description: Specifies a flag that permits or denies the creation of duplicate
            addresses.
          example: true
          type: boolean
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretKey
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: http://example.com
          type: string
      required:
      - callbackUrl
      type: object
    NewBlockRequestBody_data:
      example:
        item:
          callbackSecretKey: yourSecretKey
          callbackUrl: http://example.com
          allowDuplicates: true
      properties:
        item:
          $ref: '#/components/schemas/NewBlockRequestBody_data_item'
      required:
      - item
      type: object
    CreateAutomaticCoinsForwardingRequestBody_data_item:
      example:
        confirmationsCount: 3
        feePriority: slow
        minimumTransferAmount: "0.0002"
        callbackSecretKey: yourSecretString
        callbackUrl: https://example.com
        toAddress: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
      properties:
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretString
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 3
          type: integer
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "slow", "standard" or "fast".
          enum:
          - slow
          - standard
          - fast
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the currency in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.0002"
          type: string
        toAddress:
          description: Represents the hash of the address the currency is forwarded
            to.
          example: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
          type: string
      required:
      - callbackSecretKey
      - callbackUrl
      - confirmationsCount
      - feePriority
      - minimumTransferAmount
      - toAddress
      type: object
    CreateAutomaticCoinsForwardingRequestBody_data:
      example:
        item:
          confirmationsCount: 3
          feePriority: slow
          minimumTransferAmount: "0.0002"
          callbackSecretKey: yourSecretString
          callbackUrl: https://example.com
          toAddress: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
      properties:
        item:
          $ref: '#/components/schemas/CreateAutomaticCoinsForwardingRequestBody_data_item'
      required:
      - item
      type: object
    AddTokensToExistingFromAddressRequestBody_data_item:
      example:
        confirmationsCount: 3
        feePriority: standard
        minimumTransferAmount: "0.00001"
        callbackSecretKey: yourSecretString
        callbackUrl: https://example.com
        fromAddress: mizRduUBKEbJ6uzYJUegPh78gEGgM3WjAr
        toAddress: mnumE76iEKN47bUsdni85oped5D1fRwKWi
      properties:
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretString
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: 3
          type: integer
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "SLOW", "STANDARD" or "FAST".
          enum:
          - slow
          - standard
          - fast
          example: standard
          type: string
        fromAddress:
          description: Represents the hash of the address that forwards the tokens.
          example: mizRduUBKEbJ6uzYJUegPh78gEGgM3WjAr
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the currency in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.00001"
          type: string
        toAddress:
          description: Represents the hash of the address the currency is forwarded
            to.
          example: mnumE76iEKN47bUsdni85oped5D1fRwKWi
          type: string
        tokenData:
          $ref: '#/components/schemas/AddTokensToExistingFromAddressRequestBodyTokenData'
      required:
      - callbackUrl
      - confirmationsCount
      - feePriority
      - fromAddress
      - minimumTransferAmount
      - toAddress
      - tokenData
      type: object
    AddTokensToExistingFromAddressRequestBody_data:
      example:
        item:
          confirmationsCount: 3
          feePriority: standard
          minimumTransferAmount: "0.00001"
          callbackSecretKey: yourSecretString
          callbackUrl: https://example.com
          fromAddress: mizRduUBKEbJ6uzYJUegPh78gEGgM3WjAr
          toAddress: mnumE76iEKN47bUsdni85oped5D1fRwKWi
      properties:
        item:
          $ref: '#/components/schemas/AddTokensToExistingFromAddressRequestBody_data_item'
      required:
      - item
      type: object
    CreateAutomaticTokensForwardingRequestBody_data_item:
      example:
        confirmationsCount: "3"
        feePriority: slow
        minimumTransferAmount: "0.00002"
        callbackSecretKey: yourSecretString
        callbackUrl: https://example.com
        toAddress: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
      properties:
        callbackSecretKey:
          description: Represents the Secret Key value provided by the customer. This
            field is used for security purposes during the callback notification,
            in order to prove the sender of the callback as Crypto APIs.
          example: yourSecretString
          type: string
        callbackUrl:
          description: Represents the URL that is set by the customer where the callback
            will be received at. The callback notification will be received only if
            and when the event occurs.
          example: https://example.com
          type: string
        confirmationsCount:
          description: Represents the number of confirmations, i.e. the amount of
            blocks that have been built on top of this block.
          example: "3"
          type: string
        feePriority:
          description: Represents the fee priority of the automation, whether it is
            "SLOW", "STANDARD" or "FAST".
          enum:
          - slow
          - standard
          - fast
          type: string
        minimumTransferAmount:
          description: Represents the minimum transfer amount of the currency in the
            `fromAddress` that can be allowed for an automatic forwarding.
          example: "0.00002"
          type: string
        toAddress:
          description: Represents the hash of the address the currency is forwarded
            to.
          example: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
          type: string
        tokenData:
          $ref: '#/components/schemas/CreateAutomaticTokensForwardingRequestBodyTokenData'
      required:
      - callbackUrl
      - confirmationsCount
      - feePriority
      - minimumTransferAmount
      - toAddress
      - tokenData
      type: object
    CreateAutomaticTokensForwardingRequestBody_data:
      example:
        item:
          confirmationsCount: "3"
          feePriority: slow
          minimumTransferAmount: "0.00002"
          callbackSecretKey: yourSecretString
          callbackUrl: https://example.com
          toAddress: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
      properties:
        item:
          $ref: '#/components/schemas/CreateAutomaticTokensForwardingRequestBody_data_item'
      required:
      - item
      type: object
    ValidateAddressRequestBody_data_item:
      example:
        address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
      properties:
        address:
          description: Represents the specific address that will be checked if it's
            valid or not.
          example: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
          type: string
      required:
      - address
      type: object
    ValidateAddressRequestBody_data:
      example:
        item:
          address: mho4jHBcrNCncKt38trJahXakuaBnS7LK5
      properties:
        item:
          $ref: '#/components/schemas/ValidateAddressRequestBody_data_item'
      required:
      - item
      type: object
    GetAddressDetailsResponseItem_confirmedBalance:
      example:
        amount: "3.5"
        unit: BTC
      properties:
        amount:
          description: Defines the total balance of the address that is confirmed.
            It doesn't include unconfirmed transactions.
          example: "3.5"
          type: string
        unit:
          description: Defines the unit of the confirmed balance amount, e.g. BTC,
            ETH, XRP.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    GetAddressDetailsResponseItem_totalReceived:
      example:
        amount: "5.6"
        unit: BTC
      properties:
        amount:
          description: Defines the total amount of all coins received to the address,
            based on confirmed transactions.
          example: "5.6"
          type: string
        unit:
          description: Defines the unit of the received amount, e.g. BTC, ETH, XRP.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    GetAddressDetailsResponseItem_totalSpent:
      example:
        amount: "2.1"
        unit: BTC
      properties:
        amount:
          description: Defines the total amount of all spent by this address coins,
            based on confirmed transactions.
          example: "2.1"
          type: string
        unit:
          description: Defines the unit of the spent amount, e.g. BTC, ETH, XRP.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    GetAddressDetailsResponse_data:
      example:
        item:
          confirmedBalance:
            amount: "3.5"
            unit: BTC
          totalSpent:
            amount: "2.1"
            unit: BTC
          incomingTransactionsCount: 2
          totalReceived:
            amount: "5.6"
            unit: BTC
          outgoingTransactionsCount: 1
          transactionsCount: 3
      properties:
        item:
          $ref: '#/components/schemas/GetAddressDetailsResponseItem'
      required:
      - item
      type: object
    BannedIpAddress_error_details:
      properties:
        attribute:
          description: Specifies an attribute of the error by name.
          example: attribute which content caused the error
          type: string
        message:
          description: Specifies the details of an attribute as part from the error.
          example: message describing the error
          type: string
      required:
      - attribute
      - message
      type: object
    BannedIpAddress_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: banned_ip_address
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: This IP address has been banned. To check the reason for that,
            please contact our team via email.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    UriNotFound_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: uri_not_found
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The specified URI has not been found. Check the URI and try again.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    UnexpectedServerError_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: unexpected_server_error
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: An unexpected server error has occurred, we are working to fix
            this. Please try again later and in case it occurs again please report
            it to our team via email.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    MissingApiKey_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: missing_api_key
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The specific authorization header (API Key) is missing, please
            check our Authorization section in our Documentation.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    UnsupportedMediaType_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: unsupported_media_type
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The selected Media Type is unavailable. The Content-Type header
            should be 'application/json'.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    RequestLimitReached_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: request_limit_reached
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The request limit has been reached. There can be maximum {requests}
            requests per {seconds} second(s) made. Please contact our team via email
            if you need more or upgrade your plan.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    InvalidApiKey_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: invalid_api_key
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The provided API key is invalid. Please, generate a new one from
            your Dashboard.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    InsufficientCredits_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: insufficient_credits
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: You have insufficient credits. Please upgrade your plan from your
            Dashboard or contact our team via email.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    InvalidData_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: invalid_data
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The data provided seems to be invalid.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    LimitGreaterThanAllowed_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: limit_greater_than_allowed
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: You have reached the allowed limit. The maximum number of items
            for this endpoint is {limit}, please use the specific pagination attributes
            to get the items in portions.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    InvalidPagination_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: invalid_pagination
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The pagination attributes that have been used are invalid. Please
            check the Documentation to see details on pagination.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    EndpointNotAllowedForPlan_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: endpoint_not_allowed_for_plan
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: This endpoint is not available for your current subscription plan,
            please upgrade your plan to be able to use it.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    EndpointNotAllowedForApiKey_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: endpoint_not_allowed_for_api_key
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: This endpoint is not available for your API key.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    FeatureMainnetsNotAllowedForPlan_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: feature_mainnets_not_allowed_for_plan
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: Mainnets access is not available for your current subscription
            plan, please upgrade your plan to be able to use it.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    InvalidRequestBodyStructure_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: invalid_request_body_structure
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: 'Your request body for POST requests must have a structure of {
            data: { item: [...properties] } }'
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    ListOmniTokensByAddressResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListOmniTokensByAddressResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    GetXRPRippleAddressDetailsResponseItem_balance:
      description: Defines the balance of the account.
      example:
        amount: "22.0000"
        unit: XRP
      properties:
        amount:
          description: Represents the total amount of the balance.
          example: "22.0000"
          type: string
        unit:
          description: Represents the unit used for the balance.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    GetXRPRippleAddressDetailsResponse_data:
      example:
        item:
          sequence: 25648975
          incomingTransactionsCount: 1
          balance:
            amount: "22.0000"
            unit: XRP
          outgoingTransactionsCount: 1
          transactionsCount: 2
      properties:
        item:
          $ref: '#/components/schemas/GetXRPRippleAddressDetailsResponseItem'
      required:
      - item
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          example: 0014daaf6d5cb86befe42df851a4d1df052e663754c1
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          example: 160014daaf6d5cb86befe42df851a4d1df052e663754c1
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: scripthash
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 0399991d20706f6f6c2e656e6a6f79626f646965732e636f6d20393963336532346234374747a53e994c4a000001
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: caee978cae255bbe303ac86152679e46113a8b12925aa3afaa312d89d11ccbf8
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: '"3045022100c11ea5740bcd69f0f68a4914279838014d28923134d18e05c5a5486dfd06cc8c02200dadccec3f07bed0d1040f9e5a155efa5fdd40fc91f92342578d26848da4c6b901",
              "0287e995526aa6ccb96141bb598fc7f73323279e026c55039d15f0cfbda5dea841"'
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.00873472"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 1
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_HASH160 507a5bd8cac1d9efdf4c0a4bfacb3e0abb4f8d15 OP_EQUAL
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: a914507a5bd8cac1d9efdf4c0a4bfacb3e0abb4f8d1587
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 1
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: true
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "0.000144"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: bitcoincash:qq0adqyntn2zl9tsyjfagnyda9j2gfjkk574lxyrxd
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 0399991d20706f6f6c2e656e6a6f79626f646965732e636f6d20393963336532346234374747a53e994c4a000001
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: caee978cae255bbe303ac86152679e46113a8b12925aa3afaa312d89d11ccbf8
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: '"3045022100c11ea5740bcd69f0f68a4914279838014d28923134d18e05c5a5486dfd06cc8c02200dadccec3f07bed0d1040f9e5a155efa5fdd40fc91f92342578d26848da4c6b901",
              "0287e995526aa6ccb96141bb598fc7f73323279e026c55039d15f0cfbda5dea841"'
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.00873472"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 1
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: bchtest:qqux7gek8sg6r9qjkrdmrvz6t4xet3ax3gztt2drzk
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_DUP OP_HASH160 386f23363c11a19412b0dbb1b05a5d4d95c7a68a OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: a914507a5bd8cac1d9efdf4c0a4bfacb3e0abb4f8d1587
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 1
          type: integer
        type:
          description: Represents the script type.
          example: pubkeyhash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoinCash_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "0.000122"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: scripthash
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967294"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: 1db56e1e8dfab84f6f0e33f8ddb160c9b16286471a3b486d79ea85bcf4d076b2
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: 304402204e88dfe79e58b640908812c496ea74d2941c23e70ee3d93ebd469dbd136afe0c02203d7631427c0b5cb96e8a8b23b6c8c0c8112ecb5fb020ee2a7a70841564ed679b01,  03427a5dc74f302c76e31094755aef4c2ae9c2fcef70acf6c29285a40150ff33e3
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.0225"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 1
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: 3LAAY4fp88RsNHkVW5DZJgqUdbMD5rVoqZ
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_HASH160 ca94af32587de4e5006685ffffc65a818ccd3fbc OP_EQUAL
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: a914ca94af32587de4e5006685ffffc65a818ccd3fbc87
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 1
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "0.03505975"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          example: 030483ff6271580681f4f7828c01df56d5aebfe982cbaa2922594be9eb6cf40206
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          example: 21030483ff6271580681f4f7828c01df56d5aebfe982cbaa2922594be9eb6cf40206ac
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: scripthash
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: DPzdWPsKaGvRn3AH7WjBpnNVHhAPELDY4o
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 03dcf4150c0b2f454233322f414431322f04da88506004565cc01f0c3130fc5f4e050000000000000a626368706f6f6c172f20626974636f696e636173682e6e6574776f726b202f
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: qpq395ljesqakppupe3chd3n3jp60wd23ue00g66xx
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.0225"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 1
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      - value
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: yd5KMREs3GLMe6mTJYr3YrH1juwNwrFCfB
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_DUP OP_HASH160 430158211605af1f0fa26d90405199621bdae5cd OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: 76a914430158211605af1f0fa26d90405199621bdae5cd88ac
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 1
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "11.25"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          example: OP_DUP OP_HASH160 1fd680935cd42f95702493d44c8de964a42656b5 OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          example: 4197968cb34bfba488b4a2399f7959b823fefad79ca0b5ed3f3a4bec4c0286cab55b896b28bbbcd4e61cf584cecfd47063b18b481d8d680eafbf869ada1a02c52441210237a84e6d70e775f274e4cbd9f30f9f8b1a426e8b08a9f802a851ce501c930011
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: scripthash
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 03dcf4150c0b2f454233322f414431322f04da88506004565cc01f0c3130fc5f4e050000000000000a626368706f6f6c172f20626974636f696e636173682e6e6574776f726b202f
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.2354"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 1
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_DUP OP_HASH160 4112d3f2cc01db043c0e638bb6338c83a7b9aa8f OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: 76a9144112d3f2cc01db043c0e638bb6338c83a7b9aa8f88ac
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 1
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDash_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "0.5896"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereum_gasPrice:
      properties:
        amount:
          description: Represents the price offered to the miner to purchase this
            amount of gas.
          example: "2994782927"
          type: string
        unit:
          description: Defines the unit of the gas price amount, e.g. BTC, ETH, XRP.
          example: WEI
          type: string
      required:
      - amount
      - unit
      type: object
    GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificEthereumClassic_gasPrice:
      properties:
        amount:
          description: Represents the price offered to the miner to purchase this
            amount of gas.
          example: "2994782934"
          type: string
        unit:
          description: Defines the unit of the gas price amount, e.g. BTC, ETH, XRP.
          example: WEI
          type: string
      required:
      - amount
      - unit
      type: object
    GetTransactionDetailsByTransactionIDResponseItem_recipients:
      example:
        amount: "0.000144"
        address: 2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV
      properties:
        address:
          description: The address which receives this transaction. In UTXO-based
            protocols like Bitcoin there could be several senders while in account-based
            protocols like Ethereum there is always only one recipient.
          example: 2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV
          type: string
        amount:
          description: Represents the amount received to this address.
          example: "0.000144"
          type: string
      required:
      - address
      - amount
      type: object
    GetTransactionDetailsByTransactionIDResponseItem_senders:
      example:
        amount: "0.00873472"
        address: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
      properties:
        address:
          description: Represents the address which sends this transaction. In UTXO-based
            protocols like Bitcoin there could be several senders while in account-based
            protocols like Ethereum there is always only one sender.
          example: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
          type: string
        amount:
          description: Represents the amount sent by this address.
          example: "0.00873472"
          type: string
      required:
      - address
      - amount
      type: object
    GetTransactionDetailsByTransactionIDResponseItem_fee:
      example:
        amount: "0.00016932"
        unit: BTC
      properties:
        amount:
          description: Defines the amount of the transaction fee.
          example: "0.00016932"
          type: string
        unit:
          description: Defines the unit of the fee amount, e.g. BTC, ETH, XRP.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    GetTransactionDetailsByTransactionIDResponse_data:
      example:
        item:
          recipients:
          - amount: "0.000144"
            address: 2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV
          - amount: "0.000144"
            address: 2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV
          fee:
            amount: "0.00016932"
            unit: BTC
          minedInBlockHeight: 1939750
          index: 1
          minedInBlockHash: 00000000407f119ecb74b44229228910400aaeb9f4e3b9869955b85a53e9b7db
          isConfirmed: false
          senders:
          - amount: "0.00873472"
            address: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
          - amount: "0.00873472"
            address: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
          transactionHash: 1ec73b0f61359927d02376b35993b756b1097cb9a857bec23da4c98c4977d2b2
          transactionId: 4b66461bf88b61e1e4326356534c135129defb504c7acb2fd6c92697d79eb250
          timestamp: 1582202940
      properties:
        item:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItem'
      required:
      - item
      type: object
    BlockchainDataTransactionNotFound_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: blockchain_data_transaction_not_found
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The specified transaction has not been found on the specific blockchain.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    ListOmniTransactionsByAddressResponseItem_recipients:
      example:
        amount: "0.1"
        address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
      properties:
        address:
          description: Represents the hash of the address that receives the funds.
          example: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          type: string
        amount:
          description: Defines the amount of the received funds as a string.
          example: "0.1"
          type: string
      required:
      - address
      - amount
      type: object
    ListOmniTransactionsByAddressResponseItem_senders:
      properties:
        address:
          description: Represents the hash of the address that provides the funds.
          example: mpBjRU6F2YrgWwxtMw4Fp1hikqPdrx6spB
          type: string
        amount:
          description: Defines the amount of the sent funds as a string.
          example: "0.1"
          type: string
      required:
      - address
      - amount
      type: object
    ListOmniTransactionsByAddressResponseItem_fee:
      properties:
        amount:
          description: Defines the amount of the fee.
          example: "0.00011977"
          type: string
        unit:
          description: Defines the unit of the fee.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    ListOmniTransactionsByAddressResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByAddressResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    GetXRPRippleTransactionDetailsByTransactionIDResponseItem_offer:
      description: Defines the specific offer.
      example:
        amount: "3.0154"
        unit: XRP
      properties:
        amount:
          description: Defines the amount of the offer.
          example: "3.0154"
          type: string
        unit:
          description: Defines the unit of the offer.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    GetXRPRippleTransactionDetailsByTransactionIDResponseItem_receive:
      description: Defines on object array of the funds for which an offer is made.
      example:
        amount: "2.1256"
        unit: XRP
      properties:
        amount:
          description: Defines the amount of the funds for which an offer is made.
          example: "2.1256"
          type: string
        unit:
          description: Defines the unit of the funds for which an offer is made.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    GetXRPRippleTransactionDetailsByTransactionIDResponseItem_recipients:
      example:
        amount: "0.00001"
        address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
      properties:
        address:
          description: Represents the hash of the address that receives the funds.
          example: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
          type: string
        amount:
          description: Defines the amount of the received funds as a string.
          example: "0.00001"
          type: string
      required:
      - address
      - amount
      type: object
    GetXRPRippleTransactionDetailsByTransactionIDResponseItem_senders:
      example:
        amount: "0.00001"
        address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
      properties:
        address:
          description: Represents the hash of the address that provides the funds.
          example: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
          type: string
        amount:
          description: Defines the amount of the sent funds as a string.
          example: "0.00001"
          type: string
      required:
      - address
      - amount
      type: object
    GetXRPRippleTransactionDetailsByTransactionIDResponseItem_fee:
      example:
        amount: "0.0021"
        unit: XRP
      properties:
        amount:
          description: Defines the amount of the fee.
          example: "0.0021"
          type: string
        unit:
          description: Defines the unit of the fee.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    GetXRPRippleTransactionDetailsByTransactionIDResponseItem_value:
      example:
        amount: "3.0254"
        unit: XRP
      properties:
        amount:
          description: Defines the amount of the value.
          example: "3.0254"
          type: string
        unit:
          description: Defines the unit of the value.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    GetXRPRippleTransactionDetailsByTransactionIDResponse_data:
      example:
        item:
          receive:
            amount: "2.1256"
            unit: XRP
          fee:
            amount: "0.0021"
            unit: XRP
          index: "2"
          minedInBlockHash: 3f7af58d6cf1cd9020fb285d8e3e215131800d5109e42647ffd9b3aeae59df33
          type: Payment
          transactionHash: 36a1737481edec87bacc3101dfb752ae2c76f9171e7edebe587e330c1ea77c8d
          offer:
            amount: "3.0154"
            unit: XRP
          sequence: 4294967295
          recipients:
          - amount: "0.00001"
            address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
          - amount: "0.00001"
            address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
          minedInBlockHeight: "15973802"
          additionalData: rPmPErQe4g9725pcNxJpuvKkdqTESTQ6Tu
          senders:
          - amount: "0.00001"
            address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
          - amount: "0.00001"
            address: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
          value:
            amount: "3.0254"
            unit: XRP
          status: status
          timestamp: 1582202940
      properties:
        item:
          $ref: '#/components/schemas/GetXRPRippleTransactionDetailsByTransactionIDResponseItem'
      required:
      - item
      type: object
    ResourceNotFound_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: resource_not_found
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: Resource not found
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 0399991d20706f6f6c2e656e6a6f79626f646965732e636f6d20393963336532346234374747a53e994c4a000001
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: caee978cae255bbe303ac86152679e46113a8b12925aa3afaa312d89d11ccbf8
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: '"3045022100c11ea5740bcd69f0f68a4914279838014d28923134d18e05c5a5486dfd06cc8c02200dadccec3f07bed0d1040f9e5a155efa5fdd40fc91f92342578d26848da4c6b901",
              "0287e995526aa6ccb96141bb598fc7f73323279e026c55039d15f0cfbda5dea841"'
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.00873472"
          type: string
        vout:
          description: Defines the vout of the transaction output, i.e. which output
            to spend.
          example: 1
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_HASH160 ca94af32587de4e5006685ffffc65a818ccd3fbc OP_EQUAL
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: a914507a5bd8cac1d9efdf4c0a4bfacb3e0abb4f8d1587
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 1
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: true
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificBitcoin_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "0.000144"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificBitcoinCash_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: bitcoincash:qq0adqyntn2zl9tsyjfagnyda9j2gfjkk574lxyrxd
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 0399991d20706f6f6c2e656e6a6f79626f646965732e636f6d20393963336532346234374747a53e994c4a000001
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: caee978cae255bbe303ac86152679e46113a8b12925aa3afaa312d89d11ccbf8
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: '"3045022100c11ea5740bcd69f0f68a4914279838014d28923134d18e05c5a5486dfd06cc8c02200dadccec3f07bed0d1040f9e5a155efa5fdd40fc91f92342578d26848da4c6b901",
              "0287e995526aa6ccb96141bb598fc7f73323279e026c55039d15f0cfbda5dea841"'
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.00873472"
          type: string
        vout:
          description: Defines the vout of the transaction output, i.e. which output
            to spend.
          example: 1
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txid
      - txinwitness
      - value
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          example: 0 eab6ff0ee1158241737dfa5c78449dc06cf021cc
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          example: 0014eab6ff0ee1158241737dfa5c78449dc06cf021cc
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: scripthash
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          type: string
        scriptSig:
          $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificLitecoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967294"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: 1db56e1e8dfab84f6f0e33f8ddb160c9b16286471a3b486d79ea85bcf4d076b2
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: 304402204e88dfe79e58b640908812c496ea74d2941c23e70ee3d93ebd469dbd136afe0c02203d7631427c0b5cb96e8a8b23b6c8c0c8112ecb5fb020ee2a7a70841564ed679b01,  03427a5dc74f302c76e31094755aef4c2ae9c2fcef70acf6c29285a40150ff33e3
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.0225"
          type: string
        vout:
          description: Defines the vout of the transaction output, i.e. which output
            to spend.
          example: 1
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txid
      - txinwitness
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          example: 030483ff6271580681f4f7828c01df56d5aebfe982cbaa2922594be9eb6cf40206
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          example: 21030483ff6271580681f4f7828c01df56d5aebfe982cbaa2922594be9eb6cf40206ac
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: pubkey
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: DPzdWPsKaGvRn3AH7WjBpnNVHhAPELDY4o
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 0301352f0101
          type: string
        scriptSig:
          $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificDogecoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: e1945b5d7e05f6d5ff77983d8a701b806722063559ed2528721b23fcb50baf06
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: nY1qa6325pH5zfGjA3NW16xPYG8XYQjtbS
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.0225"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 1
          type: integer
      required:
      - addresses
      - coinbase
      - scriptSig
      - sequence
      - txinwitness
      - value
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificDash_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          example: OP_DUP OP_HASH160 1ec5c66e9789c655ae068d35088b4073345fe0b0 OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          example: 76a9141ec5c66e9789c655ae068d35088b4073345fe0b088ac
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: scripthash
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificDash_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: yP8A3cbdxRtLRduy5mXDsBnJtMzHWs6ZXr
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: "039312070108"
          type: string
        scriptSig:
          $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificDash_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: 54b8f0e54b4b66fab386c6f9dea76bfe06524ab71d1d42b321aea9a7fea50f48
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: yP8A3cbdxRtLRduy5mXDsBnJtMzHWs6ZXr
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "7.76021116"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 1
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      - vout
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificDash_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: yP8A3cbdxRtLRduy5mXDsBnJtMzHWs6ZXr
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_DUP OP_HASH160 1ec5c66e9789c655ae068d35088b4073345fe0b0 OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: 76a9141ec5c66e9789c655ae068d35088b4073345fe0b088ac
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 1
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificDash_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/ListTransactionsByAddressResponseItemBlockchainSpecificDash_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "7.76020409"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificEthereumClassic_gasPrice:
      properties:
        amount:
          description: Represents the price offered to the miner to purchase this
            amount of gas.
          example: "21000"
          type: string
        unit:
          description: Defines the unit of the gas price amount, e.g. BTC, ETH, XRP.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    ListTransactionsByAddressResponseItemBlockchainSpecificEthereum_gasPrice:
      properties:
        amount:
          description: Represents the price offered to the miner to purchase this
            amount of gas
          example: "2994782927"
          type: string
        unit:
          description: Defines the unit of the gas price amount, e.g. BTC, ETH, XRP.
          example: WEI
          type: string
      required:
      - amount
      - unit
      type: object
    ListTransactionsByAddressResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListTransactionsByAddressResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    ListXRPRippleTransactionsByAddressResponseItem_fee:
      properties:
        amount:
          description: Defines the amount of the transaction fee.
          example: "0.000024"
          type: string
        unit:
          description: Defines the unit of the transaction fee.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    ListXRPRippleTransactionsByAddressResponseItem_offer:
      properties:
        amount:
          description: Defines the amount of the offer.
          example: "5.256"
          type: string
        unit:
          description: Defines the unit of the offer.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    ListXRPRippleTransactionsByAddressResponseItem_receive:
      properties:
        amount:
          description: Defines the amount received.
          example: "4.236"
          type: string
        unit:
          description: Defines the unit of the amount received.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    ListXRPRippleTransactionsByAddressResponseItem_value:
      properties:
        amount:
          description: Defines the specific amount of the value.
          example: "22"
          type: string
        unit:
          description: Defines the specific unit of the value.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    ListXRPRippleTransactionsByAddressResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListXRPRippleTransactionsByAddressResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    ListUnconfirmedOmniTransactionsByAddressResponseItem_senders:
      properties:
        address:
          description: Represents the hash of the address that provides the funds.
          example: mwDuExdjRewYKYoR454sZGvd15LnJVsmoR
          type: string
        amount:
          description: Defines the amount of the sent funds as a string.
          example: "0.1"
          type: string
      required:
      - address
      - amount
      type: object
    ListUnconfirmedOmniTransactionsByAddressResponseItem_fee:
      example:
        amount: "0.0001"
        unit: BTC
      properties:
        amount:
          description: Defines the amount of the fee.
          example: "0.0001"
          type: string
        unit:
          description: Defines the unit of the fee.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    ListUnconfirmedOmniTransactionsByAddressResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByAddressResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 0399991d20706f6f6c2e656e6a6f79626f646965732e636f6d20393963336532346234374747a53e994c4a000001
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: caee978cae255bbe303ac86152679e46113a8b12925aa3afaa312d89d11ccbf8
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: '"3045022100c11ea5740bcd69f0f68a4914279838014d28923134d18e05c5a5486dfd06cc8c02200dadccec3f07bed0d1040f9e5a155efa5fdd40fc91f92342578d26848da4c6b901",
              "0287e995526aa6ccb96141bb598fc7f73323279e026c55039d15f0cfbda5dea841"'
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.00873472"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 1
          type: integer
      required:
      - addresses
      - coinbase
      - scriptSig
      - sequence
      - txid
      - txinwitness
      - value
      - vout
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: bitcoincash:qq0adqyntn2zl9tsyjfagnyda9j2gfjkk574lxyrxd
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 0399991d20706f6f6c2e656e6a6f79626f646965732e636f6d20393963336532346234374747a53e994c4a000001
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificBitcoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: caee978cae255bbe303ac86152679e46113a8b12925aa3afaa312d89d11ccbf8
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: '"3045022100c11ea5740bcd69f0f68a4914279838014d28923134d18e05c5a5486dfd06cc8c02200dadccec3f07bed0d1040f9e5a155efa5fdd40fc91f92342578d26848da4c6b901",
              "0287e995526aa6ccb96141bb598fc7f73323279e026c55039d15f0cfbda5dea841"'
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.00873472"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 2
          type: integer
      required:
      - addresses
      - coinbase
      - scriptSig
      - sequence
      - txid
      - txinwitness
      - value
      - vout
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: bchtest:qqux7gek8sg6r9qjkrdmrvz6t4xet3ax3gztt2drzk
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_DUP OP_HASH160 386f23363c11a19412b0dbb1b05a5d4d95c7a68a OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: a914507a5bd8cac1d9efdf4c0a4bfacb3e0abb4f8d1587
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 2
          type: integer
        type:
          description: Represents the script type.
          example: pubkeyhash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCash_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "0.000122"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 0382221c04d6e05160086800002d090000000d2f6e6f64655374726174756d2f
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificLitecoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967294"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: 1db56e1e8dfab84f6f0e33f8ddb160c9b16286471a3b486d79ea85bcf4d076b2
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: 304402204e88dfe79e58b640908812c496ea74d2941c23e70ee3d93ebd469dbd136afe0c02203d7631427c0b5cb96e8a8b23b6c8c0c8112ecb5fb020ee2a7a70841564ed679b01,  03427a5dc74f302c76e31094755aef4c2ae9c2fcef70acf6c29285a40150ff33e3
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.0225"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 2
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txid
      - txinwitness
      - value
      - vout
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin_scriptPubKey:
      description: Object representation of the script
      example: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: 3LAAY4fp88RsNHkVW5DZJgqUdbMD5rVoqZ
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_HASH160 ca94af32587de4e5006685ffffc65a818ccd3fbc OP_EQUAL
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: a914ca94af32587de4e5006685ffffc65a818ccd3fbc87
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 2
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificLitecoin_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "0.03505975"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: DPzdWPsKaGvRn3AH7WjBpnNVHhAPELDY4o
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 037a3a2f
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.0225"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 2
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      - value
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: yd5KMREs3GLMe6mTJYr3YrH1juwNwrFCfB
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_DUP OP_HASH160 430158211605af1f0fa26d90405199621bdae5cd OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: 76a914430158211605af1f0fa26d90405199621bdae5cd88ac
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 2
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDogecoin_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "11.25"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificDash_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          example: OP_DUP OP_HASH160 1fd680935cd42f95702493d44c8de964a42656b5 OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          example: 76a9141442eec4888ec035fd27a82f227e09f548bec81288ac
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: scripthash
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificDash_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: nW3Hxfx9a9ef1MCHm6veWBbw1Nh2ZEefER
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 037a3a2f
          type: string
        scriptSig:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDash_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: ddeb07a87366077535455148a79fabc160dbe5d455a3b69a70246316d1acf384
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "10000"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 2
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      - vout
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificDash_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: nW3Hxfx9a9ef1MCHm6veWBbw1Nh2ZEefER
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_DUP OP_HASH160 1442eec4888ec035fd27a82f227e09f548bec812 OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: 76a9141442eec4888ec035fd27a82f227e09f548bec81288ac
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 2
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificDash_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItemBlockchainSpecificDash_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "10000"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    ListTransactionsByBlockHashResponseItemBlockchainSpecificEthereum_gasPrice:
      properties:
        amount:
          description: Represents the price offered to the miner to purchase this
            amount of gas.
          example: "21000"
          type: string
        unit:
          description: Defines the unit of the gas price amount, e.g. BTC, ETH, XRP.
          example: WEI
          type: string
      required:
      - amount
      - unit
      type: object
    ListTransactionsByBlockHashResponseItem_recipients:
      properties:
        address:
          description: The address which receives this transaction. In UTXO-based
            protocols like Bitcoin there could be several senders while in account-based
            protocols like Ethereum there is always only one recipient.
          example: mvuvhgT5DUjpQ2LBWQhujiFGDZiDHGdHa7
          type: string
        amount:
          description: Represents the amount received to this address.
          example: "0.00476076"
          type: string
      required:
      - address
      - amount
      type: object
    ListTransactionsByBlockHashResponseItem_senders:
      properties:
        address:
          description: Represents the address which sends this transaction. In UTXO-based
            protocols like Bitcoin there could be several senders while in account-based
            protocols like Ethereum there is always only one sender.
          example: n3NFmt8ibu1FnUqxexrVg4psg88Sx2PMsv
          type: string
        amount:
          description: Represents the amount sent by this address.
          example: "0.00572702"
          type: string
      required:
      - address
      - amount
      type: object
    ListTransactionsByBlockHashResponseItem_fee:
      properties:
        amount:
          description: Represents the fee amount.
          example: "0.00016932"
          type: string
        unit:
          description: Defines the unit of the fee amount, e.g. BTC, ETH, XRP.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    ListTransactionsByBlockHashResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHashResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    ListXRPRippleTransactionsByBlockHashResponseItem_recipients:
      properties:
        address:
          description: Represents the hash of the address that receives the funds.
          example: rNUY3X3HovAXuTesTbMh8PAX6CM5V2RzMY
          type: string
        amount:
          description: Defines the amount of the received funds as a string.
          example: "0.0001"
          type: string
      required:
      - address
      - amount
      type: object
    ListXRPRippleTransactionsByBlockHashResponseItem_senders:
      properties:
        address:
          description: Represents the hash of the address that provides the funds.
          example: rPmPErQe4g9725pcNxJpuvKkdqTESTQ6Tu
          type: string
        amount:
          description: Defines the amount of the sent funds as a string.
          example: "0.0001"
          type: string
      required:
      - address
      - amount
      type: object
    ListXRPRippleTransactionsByBlockHashResponseItem_fee:
      properties:
        amount:
          description: Defines the amount of the fee.
          example: "2.0325"
          type: string
        unit:
          description: Defines the unit of the fee.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    ListXRPRippleTransactionsByBlockHashResponseItem_offer:
      properties:
        amount:
          description: Defines the amount of the offer.
          example: "8.2365"
          type: string
        unit:
          description: Defines the unit of the offer.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    ListXRPRippleTransactionsByBlockHashResponseItem_receive:
      properties:
        amount:
          description: Defines the received amount.
          example: "6.2354"
          type: string
        unit:
          description: Defines the unit of the received amount.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    ListXRPRippleTransactionsByBlockHashResponseItem_value:
      properties:
        amount:
          description: Defines the amount of the value.
          example: "22.023"
          type: string
        unit:
          description: Defines the unit of the value.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    ListXRPRippleTransactionsByBlockHashResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListXRPRippleTransactionsByBlockHashResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    GetUnconfirmedOmniTransactionByTransactionIDTxidResponseItem_recipients:
      example:
        amount: "0.1"
        address: mpBjRU6F2YrgWwxtMw4Fp1hikqPdrx6spB
      properties:
        address:
          description: Represents the hash of the address that receives the funds.
          example: mpBjRU6F2YrgWwxtMw4Fp1hikqPdrx6spB
          type: string
        amount:
          description: Defines the amount of the received funds as a string.
          example: "0.1"
          type: string
      required:
      - address
      - amount
      type: object
    GetUnconfirmedOmniTransactionByTransactionIDTxidResponseItem_senders:
      example:
        amount: "0.1"
        address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
      properties:
        address:
          description: Represents the hash of the address that provides the funds.
          example: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          type: string
        amount:
          description: Defines the amount of the sent funds as a string.
          example: "0.1"
          type: string
      required:
      - address
      - amount
      type: object
    GetUnconfirmedOmniTransactionByTransactionIDTxidResponse_data:
      example:
        item:
          mined: true
          amount: "14.915785"
          divisible: true
          fee:
            amount: "0.0001"
            unit: BTC
          type: Simple Send
          sent: false
          version: 0
          transactionId: 92f17d3d16a1baf7de570a86179cc263cb9866c66778feec2dce111430f41c08
          typeInt: 0
          recipients:
          - amount: "0.1"
            address: mpBjRU6F2YrgWwxtMw4Fp1hikqPdrx6spB
          - amount: "0.1"
            address: mpBjRU6F2YrgWwxtMw4Fp1hikqPdrx6spB
          propertyId: 2
          senders:
          - amount: "0.1"
            address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          - amount: "0.1"
            address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          timestamp: 1616431490
      properties:
        item:
          $ref: '#/components/schemas/GetUnconfirmedOmniTransactionByTransactionIDTxidResponseItem'
      required:
      - item
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_HASH160 507a5bd8cac1d9efdf4c0a4bfacb3e0abb4f8d15 OP_EQUAL
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: a914507a5bd8cac1d9efdf4c0a4bfacb3e0abb4f8d1587
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 2
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: true
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "0.000144"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          example: OP_DUP OP_HASH160 1fd680935cd42f95702493d44c8de964a42656b5 OP_EQUALVERIFY
            OP_CHECKSIG
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: scripthash
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: Represents the coinbase hex.
          type: string
        scriptSig:
          $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash_scriptSig'
        sequence:
          description: Represents the script sequence number.
          type: string
        txid:
          description: Represents the reference transaction identifier.
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 2
          type: integer
      required:
      - addresses
      - coinbase
      - scriptSig
      - sequence
      - txinwitness
      - vout
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 2
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: Represents the sent/received amount.
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            example: DPzdWPsKaGvRn3AH7WjBpnNVHhAPELDY4o
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 03dcf4150c0b2f454233322f414431322f04da88506004565cc01f0c3130fc5f4e050000000000000a626368706f6f6c172f20626974636f696e636173682e6e6574776f726b202f
          type: string
        scriptSig:
          $ref: '#/components/schemas/GetTransactionDetailsByTransactionIDResponseItemBlockchainSpecificDogecoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967295"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.0225"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 2
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txinwitness
      - value
      - vout
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin_scriptSig:
      description: Specifies the required signatures.
      properties:
        asm:
          description: The asm strands for assembly, which is the symbolic representation
            of the Bitcoin's Script language op-codes.
          example: e052170e6a8ca2a891158c2f3a268521ae16bd1927d3cb941d54ff194986263dda8582fbc3d1a38155e366d7bea9e58501e84daf6d84f0ccb99380af36477c4f[ALL|FORKID]
            027774729b977f98bb119fb1cf6fb17cc6b2d78af7acbeb6ad2b49187e8894efba
          type: string
        hex:
          description: Represents the hex of the public key of the address.
          example: 41e052170e6a8ca2a891158c2f3a268521ae16bd1927d3cb941d54ff194986263dda8582fbc3d1a38155e366d7bea9e58501e84daf6d84f0ccb99380af36477c4f4121027774729b977f98bb119fb1cf6fb17cc6b2d78af7acbeb6ad2b49187e8894efba
          type: string
        type:
          description: Represents the script type of the reference transaction identifier.
          example: scripthash
          type: string
      required:
      - asm
      - hex
      - type
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin_vin:
      properties:
        addresses:
          items:
            description: Represents the addresses which send/receive the amount.
            type: string
          type: array
        coinbase:
          description: Represents the coinbase hex.
          example: 03dcf4150c0b2f454233322f414431322f04da88506004565cc01f0c3130fc5f4e050000000000000a626368706f6f6c172f20626974636f696e636173682e6e6574776f726b202f
          type: string
        scriptSig:
          $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin_scriptSig'
        sequence:
          description: Represents the script sequence number.
          example: "4294967294"
          type: string
        txid:
          description: Represents the reference transaction identifier.
          example: 1db56e1e8dfab84f6f0e33f8ddb160c9b16286471a3b486d79ea85bcf4d076b2
          type: string
        txinwitness:
          items:
            description: Represents an array hex-encoded witness data (if there is
              any) as strings.
            example: 304402204e88dfe79e58b640908812c496ea74d2941c23e70ee3d93ebd469dbd136afe0c02203d7631427c0b5cb96e8a8b23b6c8c0c8112ecb5fb020ee2a7a70841564ed679b01,  03427a5dc74f302c76e31094755aef4c2ae9c2fcef70acf6c29285a40150ff33e3
            type: string
          type: array
        value:
          description: Represents the sent/received amount.
          example: "0.0225"
          type: string
        vout:
          description: It refers to the index of the output address of this transaction.
            The index starts from 0.
          example: 2
          type: integer
      required:
      - addresses
      - scriptSig
      - sequence
      - txid
      - txinwitness
      - value
      - vout
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin_scriptPubKey:
      description: Represents the script public key.
      properties:
        addresses:
          items:
            description: Represents the addresses which send the amount.
            example: 3LAAY4fp88RsNHkVW5DZJgqUdbMD5rVoqZ
            type: string
          type: array
        asm:
          description: Represents the assembly of the script public key of the address.
          example: OP_HASH160 ca94af32587de4e5006685ffffc65a818ccd3fbc OP_EQUAL
          type: string
        hex:
          description: Represents the hex of the script public key of the address.
          example: a914ca94af32587de4e5006685ffffc65a818ccd3fbc87
          type: string
        reqSigs:
          description: Represents the required signatures.
          example: 2
          type: integer
        type:
          description: Represents the script type.
          example: scripthash
          type: string
      required:
      - addresses
      - asm
      - hex
      - reqSigs
      - type
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin_vout:
      properties:
        isSpent:
          description: Defines whether the output is spent or not.
          example: false
          type: boolean
        scriptPubKey:
          $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin_scriptPubKey'
        value:
          description: Represents the sent/received amount.
          example: "0.03505975"
          type: string
      required:
      - isSpent
      - scriptPubKey
      - value
      type: object
    ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic_gasPrice:
      properties:
        amount:
          description: Represents the price offered to the miner to purchase this
            amount of gas.
          example: "17000000000"
          type: string
        unit:
          description: Defines the unit of the gas price amount, e.g. BTC, ETH, XRP.
          example: WEI
          type: string
      required:
      - amount
      - unit
      type: object
    ListTransactionsByBlockHeightResponseItem_fee:
      properties:
        amount:
          description: Defines the amount of the fee.
          example: "0.00016932"
          type: string
        unit:
          description: Defines the unit of the fee amount, e.g. BTC, ETH, XRP.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    ListTransactionsByBlockHeightResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListTransactionsByBlockHeightResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    BlockchainDataBlockNotFound_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: blockchain_data_block_not_found
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The specified block has not been found on the specific blockchain.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    GetBlockDetailsByBlockHeightResponse_data:
      example:
        item:
          previousBlockHash: 00000000b8c2337ed1221d1861105ad227dfff93b0a1798e78fb6edff58925f5
          nextBlockHash: 000000000000000e2f2e4fab8eaaa6bb39632a79a825d34169d451a86959fe04
          hash: 000000000000000cf507214c4f86a5048449230bc5c5dbbed59aa74421553f26
          transactionsCount: 12
          height: 1939743
          timestamp: 1615378134
      properties:
        item:
          $ref: '#/components/schemas/GetBlockDetailsByBlockHeightResponseItem'
      required:
      - item
      type: object
    GetXRPRippleBlockDetailsByBlockHeightResponseItem_totalCoins:
      description: Represents the total Coins of the block as a string.
      example:
        amount: "22.0012"
        unit: Drops
      properties:
        amount:
          description: Represents the total amount of all Coins of the block as a
            string.
          example: "22.0012"
          type: string
        unit:
          description: Represents the unit of total Coins of the block as a string.
          example: Drops
          type: string
      required:
      - amount
      - unit
      type: object
    GetXRPRippleBlockDetailsByBlockHeightResponseItem_totalFees:
      description: Defines the total fees included in the specific block.
      example:
        amount: "0.004487"
        unit: XRP
      properties:
        amount:
          description: Defines the amount of all fees included in the specific block.
          example: "0.004487"
          type: string
        unit:
          description: Defines the unit of all fees included in the specific block.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    GetXRPRippleBlockDetailsByBlockHeightResponse_data:
      example:
        item:
          blockHash: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
          totalFees:
            amount: "0.004487"
            unit: XRP
          previousBlockHash: dcf6ade36e1d5f30b3e52605692ff47123f290f4c8915cbf5a6b7c3541f2354e
          nextBlockHash: 738cf04b9e32826395a8445aa44ec6bbb83f2cc296d94201625f3a3d6ff85a5a
          blockHeight: 15886156
          totalCoins:
            amount: "22.0012"
            unit: Drops
          transactionsCount: 0
          timestamp: 1616069434
      properties:
        item:
          $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHeightResponseItem'
      required:
      - item
      type: object
    ListUnconfirmedOmniTransactionsByPropertyIDResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListUnconfirmedOmniTransactionsByPropertyIDResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    GetBlockDetailsByBlockHashResponse_data:
      example:
        item:
          previousBlockHash: 00000000844434fd86a630ba8e29503d5396a2b6c4003d69bf0a08d96169d4cd
          nextBlockHash: 0000000000000003b08ca90b701da447fb3e7c5c6b43acd33a5e4062fe98dea5
          hash: 0000000006b3f483bec16b8a85c632bdd30a14a202c83a9148002c9ee441dd0c
          transactionsCount: 145
          height: 1941208
          timestamp: 1615378134
      properties:
        item:
          $ref: '#/components/schemas/GetBlockDetailsByBlockHashResponseItem'
      required:
      - item
      type: object
    GetXRPRippleBlockDetailsByBlockHashResponseItem_totalCoins:
      example:
        amount: "22.0012"
        unit: Drops
      properties:
        amount:
          example: "22.0012"
          type: string
        unit:
          example: Drops
          type: string
      required:
      - amount
      - unit
      type: object
    GetXRPRippleBlockDetailsByBlockHashResponse_data:
      example:
        item:
          blockHash: 1ab0614d2a438da8b23086cbceef7d443edbd295d9c7619fc8a19c7618bc22c9
          totalFees:
            amount: "0.004487"
            unit: XRP
          previousBlockHash: dcf6ade36e1d5f30b3e52605692ff47123f290f4c8915cbf5a6b7c3541f2354e
          nextBlockHash: 738cf04b9e32826395a8445aa44ec6bbb83f2cc296d94201625f3a3d6ff85a5a
          blockHeight: 15886156
          totalCoins:
            amount: "22.0012"
            unit: Drops
          transactionsCount: 0
          timestamp: 1616069434
      properties:
        item:
          $ref: '#/components/schemas/GetXRPRippleBlockDetailsByBlockHashResponseItem'
      required:
      - item
      type: object
    GetOmniTransactionDetailsByTransactionIDTxidResponseItem_senders:
      example:
        amount: "0.00000546"
        address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
      properties:
        address:
          description: Represents the hash of the address that provides the funds.
          example: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          type: string
        amount:
          description: Defines the amount of the sent funds as a string.
          example: "0.00000546"
          type: string
      required:
      - address
      - amount
      type: object
    GetOmniTransactionDetailsByTransactionIDTxidResponse_data:
      example:
        item:
          amount: "14.915785"
          divisible: true
          fee:
            amount: "0.0001"
            unit: BTC
          minedInBlockHash: 0000000049696aca62d2ea7db9e71aa4f1116ede1eb55f9932e758cc586eb8b6
          type: Simple Send
          version: 0
          transactionId: d237ff4a681617b767bf22c4e1e8f5115b95c8c168d6cf53bbdec68529f91ecb
          valid: true
          typeInt: 0
          recipients:
          - amount: "0.1"
            address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          - amount: "0.1"
            address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          minedInBlockHeight: 1941239
          propertyId: 2
          senders:
          - amount: "0.00000546"
            address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          - amount: "0.00000546"
            address: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          timestamp: 1616423278
      properties:
        item:
          $ref: '#/components/schemas/GetOmniTransactionDetailsByTransactionIDTxidResponseItem'
      required:
      - item
      type: object
    GetLatestMinedBlockResponse_data:
      example:
        item:
          previousBlockHash: 00000000000000000008953625613e60b56194ea31f07aad43c7505fbddce77f
          hash: 00000000000000000002ad6f9c74faf503bb055c54e0d0746ef34f888f95890f
          transactionsCount: 2755
          height: 673852
          timestamp: 1610365615
      properties:
        item:
          $ref: '#/components/schemas/GetLatestMinedBlockResponseItem'
      required:
      - item
      type: object
    ListOmniTransactionsByBlockHeightResponseItem_recipients:
      properties:
        address:
          description: Represents the hash of the address that receives the funds.
          example: 3Ld5yZ4fqTrW44cUGxpjEuBwAEtCsYUP28
          type: string
        amount:
          description: Defines the amount of the received funds as a string.
          example: "0.1"
          type: string
      required:
      - address
      - amount
      type: object
    ListOmniTransactionsByBlockHeightResponseItem_senders:
      properties:
        address:
          description: Represents the hash of the address that provides the funds.
          example: 1MRyVg2dyZNEFDy8G6i1hNcerkeZiXYK4S
          type: string
        amount:
          description: Defines the amount of the sent funds as a string.
          example: "0.1"
          type: string
      required:
      - address
      - amount
      type: object
    ListOmniTransactionsByBlockHeightResponseItem_fee:
      properties:
        amount:
          description: Defines the amount of the fee.
          example: "0.0007"
          type: string
        unit:
          description: Defines the unit of the fee.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    ListOmniTransactionsByBlockHeightResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByBlockHeightResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    GetLatestMinedXRPRippleBlockResponseItem_totalCoins:
      example:
        amount: "22.0012"
        unit: XRP
      properties:
        amount:
          description: Defines the amount of all coins.
          example: "22.0012"
          type: string
        unit:
          description: Defines the unit of the amount of all coins.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    GetLatestMinedXRPRippleBlockResponseItem_totalFees:
      example:
        amount: "0.00001"
        unit: XRP
      properties:
        amount:
          description: Defines the amount of all fees.
          example: "0.00001"
          type: string
        unit:
          description: Defines the unit of the amount of all fees.
          example: XRP
          type: string
      required:
      - amount
      - unit
      type: object
    GetLatestMinedXRPRippleBlockResponse_data:
      example:
        item:
          blockHash: f9b304b7933ef298142fdd58ad2dec414a5267dcbbd8a4fe9fc2c0a5f9dde050
          totalFees:
            amount: "0.00001"
            unit: XRP
          previousBlockHash: de9f9e5b68a1322a16f0d1217cf31765e9101764e6e2f3c7aa058b8c641da37a
          blockHeight: 15975748
          totalCoins:
            amount: "22.0012"
            unit: XRP
          transactionsCount: 1
          timestamp: 1616430182
      properties:
        item:
          $ref: '#/components/schemas/GetLatestMinedXRPRippleBlockResponseItem'
      required:
      - item
      type: object
    SyncHDWalletxPubYPubZPubResponse_data:
      example:
        item:
          extendedPublicKey: upub5Ei6bRNneqozk6smK7dvtXHC5PjUyEL4ynCfMKvjznLcXi9DQaikETzQjHvJC43XexMvQs64jxB1njMjCHpRZ4xQWAmv3ge9cVtjfsHmbvQ
      properties:
        item:
          $ref: '#/components/schemas/SyncHDWalletxPubYPubZPubResponseItem'
      required:
      - item
      type: object
    InvalidBlockchain_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: invalid_blockchain
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The provided blockchain is invalid. The blockchain **must** be
            a supported one. For the full list of supported blockchains please see
            our Documentation.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    InvalidNetwork_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: invalid_network
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The provided network is invalid. The network **must** be a supported
            one. For the full list of supported networks please see our Documentation.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    XpubNotSynced_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: xpub_not_synced
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: This xPub is not yet synced, please first use endpoint “Sync HD
            (xPub, yPub, zPub) wallet” to synchronize it.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    XpubSyncInProgress_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: xpub_sync_in_progress
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: Your wallet (xPub, yPub, zPub) is still syncing, it should take
            few seconds depending on how many transactions it has.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    AlreadyExists_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: already_exists
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The specified resource already exists.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    InvalidXpub_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: invalid_xpub
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: The provided Xpub is invalid.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    ListOmniTransactionsByBlockHashResponseItem_fee:
      properties:
        amount:
          description: Defines the amount of the fee.
          example: "0.0012"
          type: string
        unit:
          description: Defines the unit of the fee.
          example: BTC
          type: string
      required:
      - amount
      - unit
      type: object
    ListOmniTransactionsByBlockHashResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListOmniTransactionsByBlockHashResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    GetHDWalletxPubYPubZPubDetailsResponse_data:
      example:
        item:
          confirmedBalance: "0.0021"
          totalSpent: "0.0001"
          totalReceived: "0.0002"
      properties:
        item:
          $ref: '#/components/schemas/GetHDWalletxPubYPubZPubDetailsResponseItem'
      required:
      - item
      type: object
    ListHDWalletxPubYPubZPubTransactionsResponseItem_recipients:
      properties:
        address:
          description: The address which receives this transaction. In UTXO-based
            protocols like Bitcoin there could be several senders while in account-based
            protocols like Ethereum there is always only one recipient.
          example: 2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV
          type: string
        amount:
          description: Represents the amount received to this address.
          example: "0.000144"
          type: string
        isMember:
          description: Defines whether an address is a child address derived from
            the HD wallet (xPub, yPub, zPub) as boolean.
          example: false
          type: boolean
      required:
      - address
      - amount
      - isMember
      type: object
    ListHDWalletxPubYPubZPubTransactionsResponseItem_senders:
      properties:
        address:
          description: Represents the address which sends this transaction. In UTXO-based
            protocols like Bitcoin there could be several senders while in account-based
            protocols like Ethereum there is always only one sender.
          example: 2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1
          type: string
        amount:
          description: Represents the amount sent by this address.
          example: "0.00873472"
          type: string
        isMember:
          description: Defines whether an address is a child address derived from
            the HD wallet (xPub, yPub, zPub) as boolean.
          example: true
          type: boolean
      required:
      - address
      - amount
      - isMember
      type: object
    ListHDWalletxPubYPubZPubTransactionsResponseItem_fee:
      properties:
        amount:
          description: Defines the amount of the transaction fee.
          example: "0.00016932"
          type: string
      required:
      - amount
      type: object
    ListHDWalletxPubYPubZPubTransactionsResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListHDWalletxPubYPubZPubTransactionsResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    GetFeeRecommendationsResponse_data:
      example:
        item:
          standard: "0.00000178"
          unit: BTC
          fast: "0.00000476"
          slow: "0.00000049"
      properties:
        item:
          $ref: '#/components/schemas/GetFeeRecommendationsResponseItem'
      required:
      - item
      type: object
    GetContractDetailsByAddressResponse_data:
      example:
        item:
          confirmedBalance: confirmedBalance
          tokenSymbol: tokenSymbol
          tokenDecimals: tokenDecimals
          totalSupply: totalSupply
          tokensBalance: tokensBalance
          tokenName: tokenName
          tokenType: tokenType
          creatorAddress: creatorAddress
      properties:
        item:
          $ref: '#/components/schemas/GetContractDetailsByAddressResponseItem'
      required:
      - item
      type: object
    ListTokensTransfersByTransactionHashResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListTokensTransfersByTransactionHashResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    ListTokensTransfersByAddressResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListTokensTransfersByAddressResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    ListTokensByAddressResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListTokensByAddressResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    NewUnconfirmedCoinsTransactionsResponse_data:
      example:
        item:
          confirmationsCount: 4
          createdTimestamp: 1611238648
          callbackSecretKey: yourSecretKey
          callbackUrl: https://example.com
          eventType: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
          isActive: true
          referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
          transactionId: 96b4ea92dcca3a046c0ca2738ed9400f3c04f6c5f497cce4f3a148b1c948a1b3
      properties:
        item:
          $ref: '#/components/schemas/NewUnconfirmedCoinsTransactionsResponseItem'
      required:
      - item
      type: object
    BlockchainEventsCallbacksLimitReached_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: blockchain_events_callbacks_limit_reached
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: You have reached the maximum number of active Blockchain Events
            subscriptions which is {callbacks_limit} now. Please upgrade your plan
            to be get higher number of active subscriptions.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    NewUnconfirmedTokensTransactionsResponse_data:
      example:
        item:
          address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
          createdTimestamp: 1611238648
          callbackSecretKey: yourSecretKey
          callbackUrl: https://example.com
          eventType: ADDRESS_TOKENS_TRANSACTION_UNCONFIRMED
          isActive: true
          referenceId: c748624f-1843-4738-a7de-8258ada0f524
          transactionId: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
      properties:
        item:
          $ref: '#/components/schemas/NewUnconfirmedTokensTransactionsResponseItem'
      required:
      - item
      type: object
    NewConfirmedCoinsTransactionsResponse_data:
      example:
        item:
          confirmationsCount: 2
          address: mfo7jkvcoSNxpRBM7XfcseZGQf9PmmU8TZ
          createdTimestamp: 1236238648
          callbackSecretKey: yourSecretKey
          callbackUrl: https://example.com
          eventType: ADDRESS_COINS_TRANSACTION_CONFIRMED
          isActive: true
          referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
          transactionId: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
      properties:
        item:
          $ref: '#/components/schemas/NewConfirmedCoinsTransactionsResponseItem'
      required:
      - item
      type: object
    NewConfirmedTokensTransactionsResponse_data:
      example:
        item:
          confirmationsCount: "2"
          address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
          createdTimestamp: 1611238648
          callbackSecretKey: yourSecretKey
          callbackUrl: https://example.com
          eventType: ADDRESS_TOKENS_TRANSACTION_CONFIRMED
          isActive: true
          referenceId: c748624f-1843-4738-a7de-8258ada0f524
          transactionId: f43676625cc8a8d0ccd98a3795ad5369187cd5b279c3d06f99601566713aa961
      properties:
        item:
          $ref: '#/components/schemas/NewConfirmedTokensTransactionsResponseItem'
      required:
      - item
      type: object
    NewConfirmedTokensTransactionsAndEachConfirmationResponse_data:
      example:
        item:
          address: mwDuExdjRewYKYoR454sZGvd15LnJVsmoR
          createdTimestamp: 1236238648
          callbackUrl: https://example.com
          eventType: ADDRESS_TOKENS_TRANSACTION_CONFIRMED_EACH_CONFIRAMTION
          referenceId: c748624f-1843-4738-a7de-8258ada0f524
      properties:
        item:
          $ref: '#/components/schemas/NewConfirmedTokensTransactionsAndEachConfirmationResponseItem'
      required:
      - item
      type: object
    NewConfirmedCoinsTransactionsAndEachConfirmationResponse_data:
      example:
        item:
          confirmationsCount: 2
          address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
          createdTimestamp: 1611238648
          callbackSecretKey: yourSecretKey
          callbackUrl: https://example.com
          eventType: ADDRESS_COINS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
          isActive: true
          referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
          transactionId: 96b4ea92dcca3a046c0ca2738ed9400f3c04f6c5f497cce4f3a148b1c948a1b3
      properties:
        item:
          $ref: '#/components/schemas/NewConfirmedCoinsTransactionsAndEachConfirmationResponseItem'
      required:
      - item
      type: object
    MinedTransactionResponse_data:
      example:
        item:
          confirmationsCount: 2
          address: 2NCQH4pN7nf6Jb8iGoh69dgVLcVPQXBYHHk
          createdTimestamp: 1611238648
          callbackSecretKey: yourSecretKey
          callbackUrl: https://example.com
          eventType: TRANSACTION_MINED
          isActive: true
          referenceId: bc243c86-0902-4386-b30d-e6b30fa1f2aa
          transactionId: 742b4a8d54a663d372fa16abf74093595ae6fc950f2fa2bb7388c7f4d061d7b8
      properties:
        item:
          $ref: '#/components/schemas/MinedTransactionResponseItem'
      required:
      - item
      type: object
    NewBlockResponse_data:
      example:
        item:
          createdTimestamp: 1611238648
          callbackSecretKey: yourSecretKey
          callbackUrl: http://yourURL.com
          isActive: true
          referenceId: 4c530a43-5602-41d9-bc69-156a0372f9aa
      properties:
        item:
          $ref: '#/components/schemas/NewBlockResponseItem'
      required:
      - item
      type: object
    ListBlockchainEventsSubscriptionsResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListBlockchainEventsSubscriptionsResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    DeleteBlockchainEventSubscriptionResponse_data:
      example:
        item:
          createdTimestamp: 1611238648
          callbackSecretKey: yourSecretKey
          callbackUrl: http://example.com
          eventType: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
          referenceId: 6de9a6ae-1463-458c-81a5-16d68d108012
      properties:
        item:
          $ref: '#/components/schemas/DeleteBlockchainEventSubscriptionResponseItem'
      required:
      - item
      type: object
    CreateAutomaticCoinsForwardingResponse_data:
      example:
        item:
          confirmationsCount: 3
          feePriority: slow
          createdTimestamp: 1611238648
          minimumTransferAmount: "0.0002"
          callbackUrl: https://example.com
          fromAddress: mzAsK3csTnozLnYVdca4gaoH1btBZBC6QB
          toAddress: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
          referenceId: 6017c964973cdcf4d4f69e29
      properties:
        item:
          $ref: '#/components/schemas/CreateAutomaticCoinsForwardingResponseItem'
      required:
      - item
      type: object
    CoinsForwardingAutomationsLimitReached_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: coins_forwarding_automations_limit_reached
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: Your current package plan coins forwarding automations limit of
            {automations_limit} reached. Please contact us if you need more or upgrade
            your plan.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    ListCoinsForwardingAutomationsResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListCoinsForwardingAutomationsResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    DeleteAutomaticCoinsForwardingResponse_data:
      example:
        item:
          confirmationsCount: "3"
          feePriority: slow
          createdTimestamp: "1611238648"
          minimumTransferAmount: "0.00002"
          callbackUrl: https://example.com
          fromAddress: mzAsK3csTnozLnYVdca4gaoH1btBZBC6QB
          toAddress: mzYijhgmzZrmuB7wBDazRKirnChKyow4M3
          referenceId: 601c1f23ec4b80f51245e617
      properties:
        item:
          $ref: '#/components/schemas/DeleteAutomaticCoinsForwardingResponseItem'
      required:
      - item
      type: object
    AddTokensToExistingFromAddressResponse_data:
      example:
        item:
          confirmationsCount: 3
          feePriority: standard
          createdTimestamp: 1611238648
          feeAddress: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
          minimumTransferAmount: "0.0001"
          callbackUrl: https://example.com
          fromAddress: mizRduUBKEbJ6uzYJUegPh78gEGgM3WjAr
          toAddress: mnumE76iEKN47bUsdni85oped5D1fRwKWi
          referenceId: 6017dd02a309213863be9e55
      properties:
        item:
          $ref: '#/components/schemas/AddTokensToExistingFromAddressResponseItem'
      required:
      - item
      type: object
    TokensForwardingAutomationsLimitReached_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: tokens_forwarding_automations_limit_reached
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: Your current package plan tokens forwarding automations limit of
            {automations_limit} reached. Please contact us if you need more or upgrade
            your plan.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    CreateAutomaticTokensForwardingResponse_data:
      example:
        item:
          confirmationsCount: 2
          feePriority: slow
          createdTimestamp: 1611238648
          feeAddress: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
          minimumTransferAmount: "0.5"
          callbackUrl: https://example.com
          fromAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          toAddress: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
          referenceId: 6017dd02a309213863be9e55
      properties:
        item:
          $ref: '#/components/schemas/CreateAutomaticTokensForwardingResponseItem'
      required:
      - item
      type: object
    ListTokensForwardingAutomationsResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListTokensForwardingAutomationsResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    GetFeeAddressDetailsResponseItem_balance:
      description: Specifies the balance of the fee address.
      example:
        amount: "0.01"
        unit: ETH
      properties:
        amount:
          description: Represents the amount of the units in fee address.
          example: "0.01"
          type: string
        unit:
          description: Represents the unit of the fee spent for the forwarded tokens,
            e.g. BTC.
          example: ETH
          type: string
      required:
      - amount
      - unit
      type: object
    GetFeeAddressDetailsResponse_data:
      example:
        item:
          address: 0xe2b5f5e885a268e4b6faae53f99a663f3bb3e036
          balance:
            amount: "0.01"
            unit: ETH
          minimumTransferAmount: "0.0002"
      properties:
        item:
          $ref: '#/components/schemas/GetFeeAddressDetailsResponseItem'
      required:
      - item
      type: object
    DeleteAutomaticTokensForwardingResponse_data:
      example:
        item:
          confirmationsCount: 2
          feePriority: slow
          createdTimestamp: 1611238648
          feeAddress: mojjR51gMXLJ4B3SBPhEXXRFDX7U5UWXNQ
          minimumTransferAmount: "0.5"
          callbackUrl: https://example.com
          fromAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          toAddress: tb1q54j7qcu7kgsrx87yn0r9zjdvsxrnvxg4qua2z6
          referenceId: 6017dd02a309213863be9e55
      properties:
        item:
          $ref: '#/components/schemas/DeleteAutomaticTokensForwardingResponseItem'
      required:
      - item
      type: object
    ValidateAddressResponse_data:
      example:
        item:
          address: 15XyNC88pujwuuur8DCsXBCfEhJJMzHayU
          isValid: true
      properties:
        item:
          $ref: '#/components/schemas/ValidateAddressResponseItem'
      required:
      - item
      type: object
    ListSupportedAssetsResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListSupportedAssetsResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    GetExchangeRateByAssetSymbolsResponse_data:
      example:
        item:
          rate: "54768.26745499848"
          fromAssetSymbol: BTC
          fromAssetId: 5b1ea92e584bf50020130612
          toAssetSymbol: USD
          calculationTimestamp: 1618577849
          toAssetId: 5b1ea92e584bf50020130615
      properties:
        item:
          $ref: '#/components/schemas/GetExchangeRateByAssetSymbolsResponseItem'
      required:
      - item
      type: object
    CouldNotCalculateRateForPair_error:
      properties:
        code:
          description: Specifies an error code, e.g. error 404.
          example: could_not_calculate_rate_for_pair
          type: string
        message:
          description: Specifies the message of the error, i.e. why the error was
            returned, e.g. error 404 stands for “not found”.
          example: Rate could not be calculated due to not enough pair trades data.
          type: string
        details:
          items:
            $ref: '#/components/schemas/BannedIpAddress_error_details'
          type: array
      required:
      - code
      - message
      type: object
    GetExchangeRateByAssetsIDsResponse_data:
      example:
        item:
          rate: "54691.40481689715"
          fromAssetSymbol: BTC
          fromAssetId: 5b1ea92e584bf50020130612
          toAssetSymbol: USD
          calculationTimestamp: 1618577849
          toAssetId: 5b1ea92e584bf50020130615
      properties:
        item:
          $ref: '#/components/schemas/GetExchangeRateByAssetsIDsResponseItem'
      required:
      - item
      type: object
    ListAssetsDetailsResponseItem_assetLogo:
      description: Defines the logo of the asset.
      properties:
        encoding:
          description: Defines the encoding of the image data which is usually base64.
          example: base64
          type: string
        imageData:
          description: Defines the encoded image data as a string.
          example: PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIzMiIgaGVpZ2h0PSIzMiI+PGcgZmlsbD0ibm9uZSIgZmlsbC1ydWxlPSJldmVub2RkIj48Y2lyY2xlIGN4PSIxNiIgY3k9IjE2IiByPSIxNiIgZmlsbD0iIzYyN0VFQSIvPjxnIGZpbGw9IiNGRkYiIGZpbGwtcnVsZT0ibm9uemVybyI+PHBhdGggZmlsbC1vcGFjaXR5PSIuNjAyIiBkPSJNMTYuNDk4IDR2OC44N2w3LjQ5NyAzLjM1eiIvPjxwYXRoIGQ9Ik0xNi40OTggNEw5IDE2LjIybDcuNDk4LTMuMzV6Ii8+PHBhdGggZmlsbC1vcGFjaXR5PSIuNjAyIiBkPSJNMTYuNDk4IDIxLjk2OHY2LjAyN0wyNCAxNy42MTZ6Ii8+PHBhdGggZD0iTTE2LjQ5OCAyNy45OTV2LTYuMDI4TDkgMTcuNjE2eiIvPjxwYXRoIGZpbGwtb3BhY2l0eT0iLjIiIGQ9Ik0xNi40OTggMjAuNTczbDcuNDk3LTQuMzUzLTcuNDk3LTMuMzQ4eiIvPjxwYXRoIGZpbGwtb3BhY2l0eT0iLjYwMiIgZD0iTTkgMTYuMjJsNy40OTggNC4zNTN2LTcuNzAxeiIvPjwvZz48L2c+PC9zdmc+
          type: string
        mimeType:
          description: Defines the image type of the logo - jpg, png, svg, etc.
          example: '"image/svg+xml"'
          type: string
      required:
      - encoding
      - imageData
      - mimeType
      type: object
    ListAssetsDetailsResponseItem_latestRate:
      description: Specifies the latest price of the asset.
      properties:
        amount:
          description: Specifies the amount of the latest price of the asset.
          example: "55249.960371879235"
          type: string
        calculationTimestamp:
          description: Defines when the price was calculated in UNIX timestamp.
          example: 1618843796
          type: integer
        unit:
          description: Specifies the unit of the latest price of the asset.
          example: USD
          type: string
      required:
      - amount
      - unit
      type: object
    ListAssetsDetailsResponse_data:
      example:
        total: 100
        offset: 0
        limit: 50
        items: []
      properties:
        offset:
          description: The starting index of the response items, i.e. where the response
            should start listing the returned items.
          example: 0
          type: integer
        limit:
          description: Defines how many items should be returned in the response per
            page basis.
          example: 50
          type: integer
        total:
          description: Defines the total number of items returned in the response.
          example: 100
          type: integer
        items:
          example: []
          items:
            $ref: '#/components/schemas/ListAssetsDetailsResponseItem'
          type: array
      required:
      - items
      - limit
      - offset
      - total
      type: object
    AddressCoinsTransactionUnconfirmed_data_item:
      description: Defines an `item` as one result.
      example:
        amount: "0.6508984"
        unit: BTC
        address: 3CzKAnCXt7ePb5NCp5qrAEimrxjY81oLoT
        blockchain: bitcoin
        firstSeenInMempoolTimestamp: 1610365615
        transactionId: 4b2159770f75a7200ea168eb56ebbf3303b025d838f743fb6e785bc32d5ac65b
        network: testnet
        direction: incoming
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        address:
          description: Defines the specific address to which the coin transaction
            has been sent and is pending confirmation.
          example: 3CzKAnCXt7ePb5NCp5qrAEimrxjY81oLoT
          type: string
        transactionId:
          description: Defines the unique ID of the specific transaction, i.e. its
            identification number.
          example: 4b2159770f75a7200ea168eb56ebbf3303b025d838f743fb6e785bc32d5ac65b
          type: string
        amount:
          description: Defines the amount of coins sent with the transaction that
            is pending confirmation.
          example: "0.6508984"
          type: string
        unit:
          description: Defines the unit of the transaction, e.g. BTC.
          enum:
          - btc
          - satoshi
          - wei
          - gwei
          - eth
          - doge
          - dash
          - etc
          - xrp
          - zil
          example: BTC
          type: string
        direction:
          description: Defines whether the transaction is "incoming" or "outgoing".
          enum:
          - incoming
          - outgoing
          example: incoming
          type: string
        firstSeenInMempoolTimestamp:
          description: Defines the exact time the transaction has been first accepted
            into the mempool to await confirmation as timestamp.
          example: 1610365615
          type: integer
      required:
      - address
      - amount
      - blockchain
      - direction
      - firstSeenInMempoolTimestamp
      - network
      - transactionId
      - unit
      type: object
    AddressCoinsTransactionUnconfirmed_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Events
        item:
          amount: "0.6508984"
          unit: BTC
          address: 3CzKAnCXt7ePb5NCp5qrAEimrxjY81oLoT
          blockchain: bitcoin
          firstSeenInMempoolTimestamp: 1610365615
          transactionId: 4b2159770f75a7200ea168eb56ebbf3303b025d838f743fb6e785bc32d5ac65b
          network: testnet
          direction: incoming
        event: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Events
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: ADDRESS_COINS_TRANSACTION_UNCONFIRMED
          type: string
        item:
          $ref: '#/components/schemas/AddressCoinsTransactionUnconfirmed_data_item'
      required:
      - event
      - item
      - product
      type: object
    AddressTokensTransactionUnconfirmed_data_item:
      description: Defines an `item` as one result.
      example:
        address: bc1qj9k6mryqfyl9dghdwnxx29660nws90mfarld46
        blockchain: bitcoin
        firstSeenInMempoolTimestamp: 1210363220
        tokenType: ethereumERC20Token
        transactionId: ade174e0ff264094bfcf4a83789d3aa3e7d7ab423ffa89e21871aad849f302db
        network: testnet
        direction: incoming
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        address:
          description: Defines the specific address to which the token transaction
            has been sent and is pending confirmation.
          example: bc1qj9k6mryqfyl9dghdwnxx29660nws90mfarld46
          type: string
        transactionId:
          description: Defines the unique ID of the specific transaction, i.e. its
            identification number.
          example: ade174e0ff264094bfcf4a83789d3aa3e7d7ab423ffa89e21871aad849f302db
          type: string
        tokenType:
          description: Defines the type of token sent with the transaction, e.g. ERC
            20.
          enum:
          - ethereumERC20Token
          - ethereumERC721Token
          - omniLayerToken
          example: ethereumERC20Token
          type: string
        token:
          $ref: '#/components/schemas/AddressTokensTransactionUnconfirmedToken'
        direction:
          description: Defines whether the transaction is "incoming" or "outgoing".
          enum:
          - incoming
          - outgoing
          example: incoming
          type: string
        firstSeenInMempoolTimestamp:
          description: Defines the exact time the transaction has been first accepted
            into the mempool to await confirmation as timestamp.
          example: 1210363220
          type: integer
      required:
      - address
      - blockchain
      - direction
      - firstSeenInMempoolTimestamp
      - network
      - token
      - tokenType
      - transactionId
      type: object
    AddressTokensTransactionUnconfirmed_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Events
        item:
          address: bc1qj9k6mryqfyl9dghdwnxx29660nws90mfarld46
          blockchain: bitcoin
          firstSeenInMempoolTimestamp: 1210363220
          tokenType: ethereumERC20Token
          transactionId: ade174e0ff264094bfcf4a83789d3aa3e7d7ab423ffa89e21871aad849f302db
          network: testnet
          direction: incoming
        event: ADDRESS_TOKENS_TRANSACTION_UNCONFIRMED
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Events
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: ADDRESS_TOKENS_TRANSACTION_UNCONFIRMED
          type: string
        item:
          $ref: '#/components/schemas/AddressTokensTransactionUnconfirmed_data_item'
      required:
      - event
      - item
      - product
      type: object
    AddressCoinsTransactionConfirmed_data_item_minedInBlock:
      description: Defines the block height in which this transaction was mined and
        confirmed in.
      example:
        hash: b00d27cccd5e4f4fa1b28824d9a1e5fef88e6c37cdeb09e37eb39aa1d3d63448
        height: 667861
        timestamp: 1610365213
      properties:
        height:
          description: Defines the number of blocks in the blockchain preceding this
            specific block.
          example: 667861
          type: integer
        hash:
          description: Represents the hash of the block's header, i.e. an output that
            has a fixed length.
          example: b00d27cccd5e4f4fa1b28824d9a1e5fef88e6c37cdeb09e37eb39aa1d3d63448
          type: string
        timestamp:
          description: Defines the exact date/time when this transaction was mined
            in seconds since Unix Epoch time.
          example: 1610365213
          type: integer
      required:
      - hash
      - height
      - timestamp
      type: object
    AddressCoinsTransactionConfirmed_data_item:
      description: Defines an `item` as one result.
      example:
        minedInBlock:
          hash: b00d27cccd5e4f4fa1b28824d9a1e5fef88e6c37cdeb09e37eb39aa1d3d63448
          height: 667861
          timestamp: 1610365213
        amount: "0.0315"
        unit: BTC
        address: bc1qmjhy4exylset37e6sfjdtfksm8kpcrxknj7cag
        blockchain: bitcoin
        transactionId: b00d27cccd5e4f4fa1b28824d9a1e5fef88e6c37cdeb09e37eb39aa1d3d63448
        network: testnet
        direction: incoming
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        address:
          description: Defines the specific address to which the coin transaction
            has been sent and is confirmed.
          example: bc1qmjhy4exylset37e6sfjdtfksm8kpcrxknj7cag
          type: string
        minedInBlock:
          $ref: '#/components/schemas/AddressCoinsTransactionConfirmed_data_item_minedInBlock'
        transactionId:
          description: Defines the unique ID of the specific transaction, i.e. its
            identification number.
          example: b00d27cccd5e4f4fa1b28824d9a1e5fef88e6c37cdeb09e37eb39aa1d3d63448
          type: string
        amount:
          description: Defines the amount of coins sent with the confirmed transaction.
          example: "0.0315"
          type: string
        unit:
          description: Defines the unit of the transaction, e.g. BTC.
          example: BTC
          type: string
        direction:
          description: Defines whether the transaction is "incoming" or "outgoing".
          enum:
          - incoming
          - outgoing
          example: incoming
          type: string
      required:
      - address
      - amount
      - blockchain
      - direction
      - minedInBlock
      - network
      - transactionId
      - unit
      type: object
    AddressCoinsTransactionConfirmed_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Events
        item:
          minedInBlock:
            hash: b00d27cccd5e4f4fa1b28824d9a1e5fef88e6c37cdeb09e37eb39aa1d3d63448
            height: 667861
            timestamp: 1610365213
          amount: "0.0315"
          unit: BTC
          address: bc1qmjhy4exylset37e6sfjdtfksm8kpcrxknj7cag
          blockchain: bitcoin
          transactionId: b00d27cccd5e4f4fa1b28824d9a1e5fef88e6c37cdeb09e37eb39aa1d3d63448
          network: testnet
          direction: incoming
        event: ADDRESS_COINS_TRANSACTION_CONFIRMED
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Events
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: ADDRESS_COINS_TRANSACTION_CONFIRMED
          type: string
        item:
          $ref: '#/components/schemas/AddressCoinsTransactionConfirmed_data_item'
      required:
      - event
      - item
      - product
      type: object
    AddressTokensTransactionConfirmed_data_item_minedInBlock:
      description: Refers to the specific block the transaction was mined in.
      example:
        hash: 269b0de44db95beddb6aecc520b375ba8f91f3dc5558a24aa4c26979eb00c7e2
        height: 657915
        timestamp: 1586365500
      properties:
        height:
          description: Defines the number of blocks in the blockchain preceding this
            specific block.
          example: 657915
          type: integer
        hash:
          description: Represents the hash of the block's header, i.e. an output that
            has a fixed length.
          example: 269b0de44db95beddb6aecc520b375ba8f91f3dc5558a24aa4c26979eb00c7e2
          type: string
        timestamp:
          description: Defines the exact date/time when this transaction was mined
            in seconds since Unix Epoch time.
          example: 1586365500
          type: integer
      required:
      - hash
      - height
      - timestamp
      type: object
    AddressTokensTransactionConfirmed_data_item:
      description: Defines an `item` as one result.
      example:
        minedInBlock:
          hash: 269b0de44db95beddb6aecc520b375ba8f91f3dc5558a24aa4c26979eb00c7e2
          height: 657915
          timestamp: 1586365500
        address: 16sAXi1jxhxKCfY84hubDdnFNaAhqd5t49
        blockchain: bitcoin
        tokenType: ethereumERC20Token
        transactionId: 269b0de44db95beddb6aecc520b375ba8f91f3dc5558a24aa4c26979eb00c7e2
        network: testnet
        direction: incoming
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        address:
          description: Defines the specific address to which the transaction has been
            sent.
          example: 16sAXi1jxhxKCfY84hubDdnFNaAhqd5t49
          type: string
        minedInBlock:
          $ref: '#/components/schemas/AddressTokensTransactionConfirmed_data_item_minedInBlock'
        transactionId:
          description: Defines the unique ID of the specific transaction, i.e. its
            identification number.
          example: 269b0de44db95beddb6aecc520b375ba8f91f3dc5558a24aa4c26979eb00c7e2
          type: string
        tokenType:
          description: Defines the type of token sent with the transaction, e.g. ERC
            20.
          enum:
          - ethereumERC20Token
          - ethereumERC721Token
          - omniLayerToken
          example: ethereumERC20Token
          type: string
        token:
          $ref: '#/components/schemas/AddressTokensTransactionConfirmedToken'
        direction:
          description: Defines whether the transaction is "incoming" or "outgoing".
          enum:
          - incoming
          - outgoing
          example: incoming
          type: string
      required:
      - address
      - blockchain
      - direction
      - minedInBlock
      - network
      - token
      - tokenType
      - transactionId
      type: object
    AddressTokensTransactionConfirmed_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Events
        item:
          minedInBlock:
            hash: 269b0de44db95beddb6aecc520b375ba8f91f3dc5558a24aa4c26979eb00c7e2
            height: 657915
            timestamp: 1586365500
          address: 16sAXi1jxhxKCfY84hubDdnFNaAhqd5t49
          blockchain: bitcoin
          tokenType: ethereumERC20Token
          transactionId: 269b0de44db95beddb6aecc520b375ba8f91f3dc5558a24aa4c26979eb00c7e2
          network: testnet
          direction: incoming
        event: ADDRESS_TOKENS_TRANSACTION_CONFIRMED
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Events
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: ADDRESS_TOKENS_TRANSACTION_CONFIRMED
          type: string
        item:
          $ref: '#/components/schemas/AddressTokensTransactionConfirmed_data_item'
      required:
      - event
      - item
      - product
      type: object
    AddressTokensTransactionConfirmedEachConfirmation_data_item_minedInBlock:
      description: Refers to the specific block the transaction was mined in.
      example:
        hash: 17b76ef496153888aafc661c00b9f8bd8e86fed5f7670dd17ce5be57be961089
        height: 668198
        timestamp: 1110365209
      properties:
        height:
          description: Defines the number of blocks in the blockchain preceding this
            specific block.
          example: 668198
          type: integer
        hash:
          description: Represents the hash of the block's header, i.e. an output that
            has a fixed length.
          example: 17b76ef496153888aafc661c00b9f8bd8e86fed5f7670dd17ce5be57be961089
          type: string
        timestamp:
          description: Defines the exact date/time when this transaction was mined
            in seconds since Unix Epoch time.
          example: 1110365209
          type: integer
      required:
      - hash
      - height
      - timestamp
      type: object
    AddressTokensTransactionConfirmedEachConfirmation_data_item:
      description: Defines an `item` as one result.
      example:
        currentConfirmations: 6
        minedInBlock:
          hash: 17b76ef496153888aafc661c00b9f8bd8e86fed5f7670dd17ce5be57be961089
          height: 668198
          timestamp: 1110365209
        address: 12dRugNcdxK39288NjcDV4GX7rMsKCGn6B
        blockchain: bitcoin
        tokenType: 'It could be one of: "ethereumERC20Token", "ethereumERC721Token",
          "omniLayerToken"'
        transactionId: c2163e3a0ac22a7256fd1e8b0391a27e3479723e72f5efed1676d0eea9ed6ef4
        network: testnet
        targetConfirmations: 15
        direction: incoming
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        address:
          description: Defines the specific address to which the transaction has been
            sent.
          example: 12dRugNcdxK39288NjcDV4GX7rMsKCGn6B
          type: string
        minedInBlock:
          $ref: '#/components/schemas/AddressTokensTransactionConfirmedEachConfirmation_data_item_minedInBlock'
        transactionId:
          description: Defines the unique ID of the specific transaction, i.e. its
            identification number.
          example: c2163e3a0ac22a7256fd1e8b0391a27e3479723e72f5efed1676d0eea9ed6ef4
          type: string
        currentConfirmations:
          description: Defines the number of currently received confirmations for
            the transaction.
          example: 6
          type: integer
        targetConfirmations:
          description: Defines the number of confirmation transactions requested as
            callbacks, i.e. the system can notify till the n-th confirmation.
          example: 15
          type: integer
        tokenType:
          description: Defines the type of token sent with the transaction, e.g. ERC
            20.
          enum:
          - ethereumERC20Token
          - ethereumERC721Token
          - omniLayerToken
          example: 'It could be one of: "ethereumERC20Token", "ethereumERC721Token",
            "omniLayerToken"'
          type: string
        token:
          $ref: '#/components/schemas/AddressTokensTransactionConfirmedEachConfirmationToken'
        direction:
          description: Defines whether the transaction is "incoming" or "outgoing".
          enum:
          - incoming
          - outgoing
          example: incoming
          type: string
      required:
      - address
      - blockchain
      - currentConfirmations
      - direction
      - minedInBlock
      - network
      - targetConfirmations
      - token
      - tokenType
      - transactionId
      type: object
    AddressTokensTransactionConfirmedEachConfirmation_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Events
        item:
          currentConfirmations: 6
          minedInBlock:
            hash: 17b76ef496153888aafc661c00b9f8bd8e86fed5f7670dd17ce5be57be961089
            height: 668198
            timestamp: 1110365209
          address: 12dRugNcdxK39288NjcDV4GX7rMsKCGn6B
          blockchain: bitcoin
          tokenType: 'It could be one of: "ethereumERC20Token", "ethereumERC721Token",
            "omniLayerToken"'
          transactionId: c2163e3a0ac22a7256fd1e8b0391a27e3479723e72f5efed1676d0eea9ed6ef4
          network: testnet
          targetConfirmations: 15
          direction: incoming
        event: ADDRESS_TOKENS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Events
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: ADDRESS_TOKENS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
          type: string
        item:
          $ref: '#/components/schemas/AddressTokensTransactionConfirmedEachConfirmation_data_item'
      required:
      - event
      - item
      - product
      type: object
    AddressCoinsTransactionConfirmedEachConfirmation_data_item_minedInBlock:
      description: Refers to the specific block the transaction was mined in.
      example:
        hash: dfe45f6724b550c281107ffaa5880cb280878fb4dbaa742aa21449f3d2340c13
        height: 667754
        timestamp: 1610365314
      properties:
        height:
          description: Defines the number of blocks in the blockchain preceding this
            specific block.
          example: 667754
          type: integer
        hash:
          description: Represents the hash of the block's header, i.e. an output that
            has a fixed length.
          example: dfe45f6724b550c281107ffaa5880cb280878fb4dbaa742aa21449f3d2340c13
          type: string
        timestamp:
          description: Defines the exact date/time when this transaction was mined
            in seconds since Unix Epoch time.
          example: 1610365314
          type: integer
      required:
      - hash
      - height
      - timestamp
      type: object
    AddressCoinsTransactionConfirmedEachConfirmation_data_item:
      description: Defines an `item` as one result.
      example:
        currentConfirmations: 8
        minedInBlock:
          hash: dfe45f6724b550c281107ffaa5880cb280878fb4dbaa742aa21449f3d2340c13
          height: 667754
          timestamp: 1610365314
        amount: "0.0611"
        unit: BTC
        address: 15282N4BYEwYh3j1dTgJu64Ey5qWn9Po9F
        blockchain: bitcoin
        transactionId: cbd3dea703bd2bc78bca69ee61ca14e6ffcdd809d07ebbc3b8fea3c30ea38f33
        network: testnet
        targetConfirmations: 12
        direction: incoming
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        address:
          description: Defines the specific address to which the transaction has been
            sent.
          example: 15282N4BYEwYh3j1dTgJu64Ey5qWn9Po9F
          type: string
        minedInBlock:
          $ref: '#/components/schemas/AddressCoinsTransactionConfirmedEachConfirmation_data_item_minedInBlock'
        transactionId:
          description: Defines the unique ID of the specific transaction, i.e. its
            identification number.
          example: cbd3dea703bd2bc78bca69ee61ca14e6ffcdd809d07ebbc3b8fea3c30ea38f33
          type: string
        currentConfirmations:
          description: Defines the number of currently received confirmations for
            the transaction.
          example: 8
          type: integer
        targetConfirmations:
          description: Defines the number of confirmation transactions requested as
            callbacks, i.e. the system can notify till the n-th confirmation.
          example: 12
          type: integer
        amount:
          description: Defines the amount of coins sent with the confirmed transaction.
          example: "0.0611"
          type: string
        unit:
          description: Defines the unit of the transaction, e.g. BTC.
          example: BTC
          type: string
        direction:
          description: Defines whether the transaction is "incoming" or "outgoing".
          enum:
          - incoming
          - outgoing
          example: incoming
          type: string
      required:
      - address
      - amount
      - blockchain
      - currentConfirmations
      - direction
      - minedInBlock
      - network
      - targetConfirmations
      - transactionId
      - unit
      type: object
    AddressCoinsTransactionConfirmedEachConfirmation_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Events
        item:
          currentConfirmations: 8
          minedInBlock:
            hash: dfe45f6724b550c281107ffaa5880cb280878fb4dbaa742aa21449f3d2340c13
            height: 667754
            timestamp: 1610365314
          amount: "0.0611"
          unit: BTC
          address: 15282N4BYEwYh3j1dTgJu64Ey5qWn9Po9F
          blockchain: bitcoin
          transactionId: cbd3dea703bd2bc78bca69ee61ca14e6ffcdd809d07ebbc3b8fea3c30ea38f33
          network: testnet
          targetConfirmations: 12
          direction: incoming
        event: ADDRESS_COINS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Events
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: ADDRESS_COINS_TRANSACTION_CONFIRMED_EACH_CONFIRMATION
          type: string
        item:
          $ref: '#/components/schemas/AddressCoinsTransactionConfirmedEachConfirmation_data_item'
      required:
      - event
      - item
      - product
      type: object
    TransactionMined_data_item_minedInBlock:
      description: Refers to the specific block the transaction was mined in.
      example:
        hash: e9da0c8ce1861050c20f40fb660df4d13399f50b882e85bcd98126eb1173cc50
        height: 667900
        timestamp: 1610355613
      properties:
        height:
          description: Defines the number of blocks in the blockchain preceding this
            specific block.
          example: 667900
          type: integer
        hash:
          description: Represents the hash of the block's header, i.e. an output that
            has a fixed length.
          example: e9da0c8ce1861050c20f40fb660df4d13399f50b882e85bcd98126eb1173cc50
          type: string
        timestamp:
          description: Defines the exact date/time when this transaction was mined
            in seconds since Unix Epoch time.
          example: 1610355613
          type: integer
      required:
      - hash
      - height
      - timestamp
      type: object
    TransactionMined_data_item:
      description: Defines an `item` as one result.
      example:
        minedInBlock:
          hash: e9da0c8ce1861050c20f40fb660df4d13399f50b882e85bcd98126eb1173cc50
          height: 667900
          timestamp: 1610355613
        blockchain: bitcoin
        transactionId: e6439461e5bf8920e75740896d4b47730b844837295e8c3f2dbf441542aebcb6
        network: testnet
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        transactionId:
          description: Defines the unique ID of the specific transaction, i.e. its
            identification number.
          example: e6439461e5bf8920e75740896d4b47730b844837295e8c3f2dbf441542aebcb6
          type: string
        minedInBlock:
          $ref: '#/components/schemas/TransactionMined_data_item_minedInBlock'
      required:
      - blockchain
      - minedInBlock
      - network
      - transactionId
      type: object
    TransactionMined_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Events
        item:
          minedInBlock:
            hash: e9da0c8ce1861050c20f40fb660df4d13399f50b882e85bcd98126eb1173cc50
            height: 667900
            timestamp: 1610355613
          blockchain: bitcoin
          transactionId: e6439461e5bf8920e75740896d4b47730b844837295e8c3f2dbf441542aebcb6
          network: testnet
        event: TRANSACTION_MINED
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Events
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: TRANSACTION_MINED
          type: string
        item:
          $ref: '#/components/schemas/TransactionMined_data_item'
      required:
      - event
      - item
      - product
      type: object
    BlockMined_data_item:
      description: Defines an `item` as one result.
      example:
        blockchain: bitcoin
        hash: 00000000000000000006ddb5e854505f8b792122b0ac9469c07eb26db414f6fb
        network: testnet
        height: 570008
        timestamp: 1610365615
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        height:
          description: Defines the number of blocks in the blockchain preceding this
            specific block.
          example: 570008
          type: integer
        hash:
          description: Represents the hash of the block's header, i.e. an output that
            has a fixed length.
          example: 00000000000000000006ddb5e854505f8b792122b0ac9469c07eb26db414f6fb
          type: string
        timestamp:
          description: Defines the exact date/time when this block was mined in seconds
            since Unix Epoch time.
          example: 1610365615
          type: integer
      required:
      - blockchain
      - hash
      - height
      - network
      - timestamp
      type: object
    BlockMined_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Events
        item:
          blockchain: bitcoin
          hash: 00000000000000000006ddb5e854505f8b792122b0ac9469c07eb26db414f6fb
          network: testnet
          height: 570008
          timestamp: 1610365615
        event: BLOCK_MINED
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Events
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: BLOCK_MINED
          type: string
        item:
          $ref: '#/components/schemas/BlockMined_data_item'
      required:
      - event
      - item
      - product
      type: object
    CoinsForwardingSuccess_data_item:
      description: Defines an `item` as one result.
      example:
        spentFeesUnit: BTC
        forwardedUnit: BTC
        spentFeesAmount: "0.00022827"
        blockchain: bitcoin
        forwardingTransactionId: 2241b5264fac8acb92e9fc597035b99cdd22f6578d63c6f52b099729f7c4f979
        fromAddress: mmd963W1fECjLyaDCHcioSCZYHkRwjkGST
        forwardedAmount: "00059441"
        toAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        network: testnet
        triggerTransactionId: 86a7546bde4ac28b34504909d138592a6d6fc1277ea1f8f2f9c75dc04bdf3b7b
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        fromAddress:
          description: Represents the hash of the address that provides the coins.
          example: mmd963W1fECjLyaDCHcioSCZYHkRwjkGST
          type: string
        toAddress:
          description: Represents the hash of the address to forward the coins to.
          example: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          type: string
        forwardedAmount:
          description: Represents the amount of coins that have been forwarded.
          example: "00059441"
          type: string
        forwardedUnit:
          description: Represents the unit of coins that have been forwarded, e.g.
            BTC.
          example: BTC
          type: string
        spentFeesAmount:
          description: Represents the amount of the fee spent for the coins to be
            forwarded.
          example: "0.00022827"
          type: string
        spentFeesUnit:
          description: Represents the unit of the fee spent for the coins to be forwarded,
            e.g. BTC.
          example: BTC
          type: string
        triggerTransactionId:
          description: Defines the unique Transaction ID that triggered the coin forwarding.
          example: 86a7546bde4ac28b34504909d138592a6d6fc1277ea1f8f2f9c75dc04bdf3b7b
          type: string
        forwardingTransactionId:
          description: Defines the unique Transaction ID that forwarded the coins.
          example: 2241b5264fac8acb92e9fc597035b99cdd22f6578d63c6f52b099729f7c4f979
          type: string
      required:
      - blockchain
      - forwardedAmount
      - forwardedUnit
      - forwardingTransactionId
      - fromAddress
      - network
      - spentFeesAmount
      - spentFeesUnit
      - toAddress
      - triggerTransactionId
      type: object
    CoinsForwardingSuccess_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Automations
        item:
          spentFeesUnit: BTC
          forwardedUnit: BTC
          spentFeesAmount: "0.00022827"
          blockchain: bitcoin
          forwardingTransactionId: 2241b5264fac8acb92e9fc597035b99cdd22f6578d63c6f52b099729f7c4f979
          fromAddress: mmd963W1fECjLyaDCHcioSCZYHkRwjkGST
          forwardedAmount: "00059441"
          toAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          network: testnet
          triggerTransactionId: 86a7546bde4ac28b34504909d138592a6d6fc1277ea1f8f2f9c75dc04bdf3b7b
        event: COINS_FORWARDING_SUCCESS
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Automations
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: COINS_FORWARDING_SUCCESS
          type: string
        item:
          $ref: '#/components/schemas/CoinsForwardingSuccess_data_item'
      required:
      - event
      - item
      - product
      type: object
    CoinsForwardingFail_data_item:
      description: Defines an `item` as one result.
      example:
        blockchain: bitcoin
        errorMessage: Address not found
        errorCode: blockchain_data_address_not_found
        fromAddress: 38RTQQ8915tEmKFMjpPJPfrh9yV5HbJCRb
        toAddress: 1PkLrGoEGiGdmqNXX8daYNFvVVTjmWjc7m
        network: testnet
        triggerTransactionId: 7e56c9cfaec36c77049ce5298bc153bb03b0b6b5dae760a62915617015f8e2a6
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        fromAddress:
          description: Represents the hash of the address that provides the coins.
          example: 38RTQQ8915tEmKFMjpPJPfrh9yV5HbJCRb
          type: string
        toAddress:
          description: Represents the hash of the address to forward the coins to.
          example: 1PkLrGoEGiGdmqNXX8daYNFvVVTjmWjc7m
          type: string
        triggerTransactionId:
          description: Defines the unique Transaction ID that triggered the coin forwarding.
          example: 7e56c9cfaec36c77049ce5298bc153bb03b0b6b5dae760a62915617015f8e2a6
          type: string
        errorCode:
          description: Represents the error code received for the failed coin forwarding.
          enum:
          - NOT_ENOUGH_CREDITS
          - WRONG_ADDRESS_CREDENTIALS
          example: blockchain_data_address_not_found
          type: string
        errorMessage:
          description: Represents the error message received for the failed coin forwarding.
          example: Address not found
          type: string
      required:
      - blockchain
      - errorCode
      - errorMessage
      - fromAddress
      - network
      - toAddress
      - triggerTransactionId
      type: object
    CoinsForwardingFail_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Automations
        item:
          blockchain: bitcoin
          errorMessage: Address not found
          errorCode: blockchain_data_address_not_found
          fromAddress: 38RTQQ8915tEmKFMjpPJPfrh9yV5HbJCRb
          toAddress: 1PkLrGoEGiGdmqNXX8daYNFvVVTjmWjc7m
          network: testnet
          triggerTransactionId: 7e56c9cfaec36c77049ce5298bc153bb03b0b6b5dae760a62915617015f8e2a6
        event: COINS_FORWARDING_FAIL
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Automations
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: COINS_FORWARDING_FAIL
          type: string
        item:
          $ref: '#/components/schemas/CoinsForwardingFail_data_item'
      required:
      - event
      - item
      - product
      type: object
    TokensForwardingSuccess_data_item:
      description: Defines an `item` as one result.
      example:
        spentFeesUnit: BTC
        spentFeesAmount: "0.00013601"
        blockchain: bitcoin
        forwardingTransactionId: b15ab5bbaf5107d551ae1b50181f4c55959205c4ff843e3c10d86d00e690fc72
        fromAddress: mh8E9c2YDQvn8uRf47Wy4zCv2zHQzcdgkk
        tokenType: omniLayerToken
        toAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
        network: testnet
        triggerTransactionId: 6ed1f1c8f2887a78ee8c45a975d928ca63eafc7b63def56324606ddd3cc9854f
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        fromAddress:
          description: Represents the hash of the address that provides the tokens.
          example: mh8E9c2YDQvn8uRf47Wy4zCv2zHQzcdgkk
          type: string
        toAddress:
          description: Represents the hash of the address to forward the tokens to.
          example: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          type: string
        spentFeesAmount:
          description: Represents the amount of the fee spent for the tokens to be
            forwarded.
          example: "0.00013601"
          type: string
        spentFeesUnit:
          description: Represents the unit of the fee spent for the tokens to be forwarded,
            e.g. BTC.
          example: BTC
          type: string
        triggerTransactionId:
          description: Defines the unique Transaction ID that triggered the token
            forwarding.
          example: 6ed1f1c8f2887a78ee8c45a975d928ca63eafc7b63def56324606ddd3cc9854f
          type: string
        forwardingTransactionId:
          description: Defines the unique Transaction ID that forwarded the tokens.
          example: b15ab5bbaf5107d551ae1b50181f4c55959205c4ff843e3c10d86d00e690fc72
          type: string
        tokenType:
          description: Defines the type of token sent with the transaction, e.g. ERC
            20.
          enum:
          - ethereumERC20Token
          - ethereumERC721Token
          - omniLayerToken
          example: omniLayerToken
          type: string
        token:
          $ref: '#/components/schemas/TokensForwardingSuccessToken'
      required:
      - blockchain
      - forwardingTransactionId
      - fromAddress
      - network
      - spentFeesAmount
      - spentFeesUnit
      - toAddress
      - token
      - tokenType
      - triggerTransactionId
      type: object
    TokensForwardingSuccess_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Automations
        item:
          spentFeesUnit: BTC
          spentFeesAmount: "0.00013601"
          blockchain: bitcoin
          forwardingTransactionId: b15ab5bbaf5107d551ae1b50181f4c55959205c4ff843e3c10d86d00e690fc72
          fromAddress: mh8E9c2YDQvn8uRf47Wy4zCv2zHQzcdgkk
          tokenType: omniLayerToken
          toAddress: ms4KNsbNpoU8g424pzmEjbkFbfAHae1msB
          network: testnet
          triggerTransactionId: 6ed1f1c8f2887a78ee8c45a975d928ca63eafc7b63def56324606ddd3cc9854f
        event: TOKENS_FORWARDING_SUCCESS
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Automations
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: TOKENS_FORWARDING_SUCCESS
          type: string
        item:
          $ref: '#/components/schemas/TokensForwardingSuccess_data_item'
      required:
      - event
      - item
      - product
      type: object
    TokensForwardingFail_data_item:
      description: Defines an `item` as one result.
      example:
        blockchain: bitcoin
        errorMessage: The specified URI has not been found. Check the URI and try
          again.
        errorCode: FEE_ADDRESS_OUT_OF_FUNDS
        fromAddress: bc1qy4tncwfr6nw3rd8hcr6psxlrkufe6cq44tlfvv
        toAddress: 32Dv1CCNFagLcEdmC1uamj2k2jVDdokVQL
        network: testnet
        triggerTransactionId: 044681d8571cb55047d9425b7095272fbb8fe4f325b0cd822d374b6153af12a1
      properties:
        blockchain:
          description: Represents the specific blockchain protocol name, e.g. Ethereum,
            Bitcoin, etc.
          example: bitcoin
          type: string
        network:
          description: Represents the name of the blockchain network used; blockchain
            networks are usually identical as technology and software, but they differ
            in data, e.g. - "mainnet" is the live network with actual data while networks
            like "testnet", "ropsten", "rinkeby" are test networks.
          example: testnet
          type: string
        fromAddress:
          description: Represents the hash of the address that provides the tokens.
          example: bc1qy4tncwfr6nw3rd8hcr6psxlrkufe6cq44tlfvv
          type: string
        toAddress:
          description: Represents the hash of the address to forward the tokens to.
          example: 32Dv1CCNFagLcEdmC1uamj2k2jVDdokVQL
          type: string
        triggerTransactionId:
          description: Defines the unique Transaction ID that triggered the token
            forwarding.
          example: 044681d8571cb55047d9425b7095272fbb8fe4f325b0cd822d374b6153af12a1
          type: string
        errorCode:
          description: Represents the error code received for the failed token forwarding.
          enum:
          - NOT_ENOUGH_CREDITS
          - FEE_ADDRESS_OUT_OF_FUNDS
          - WRONG_ADDRESS_CREDENTIALS
          example: FEE_ADDRESS_OUT_OF_FUNDS
          type: string
        errorMessage:
          description: Represents the error message received for the failed token
            forwarding.
          example: The specified URI has not been found. Check the URI and try again.
          type: string
      required:
      - blockchain
      - errorCode
      - errorMessage
      - fromAddress
      - network
      - toAddress
      - triggerTransactionId
      type: object
    TokensForwardingFail_data:
      description: Specifies all data, as attributes, included into the callback notification,
        which depends on the `event`.
      example:
        product: Blockchain Automations
        item:
          blockchain: bitcoin
          errorMessage: The specified URI has not been found. Check the URI and try
            again.
          errorCode: FEE_ADDRESS_OUT_OF_FUNDS
          fromAddress: bc1qy4tncwfr6nw3rd8hcr6psxlrkufe6cq44tlfvv
          toAddress: 32Dv1CCNFagLcEdmC1uamj2k2jVDdokVQL
          network: testnet
          triggerTransactionId: 044681d8571cb55047d9425b7095272fbb8fe4f325b0cd822d374b6153af12a1
        event: TOKENS_FORWARDING_FAIL
      properties:
        product:
          description: Represents the Crypto APIs 2.0 product which sends the callback.
          example: Blockchain Automations
          type: string
        event:
          description: Defines the specific event, for which a callback subscription
            is set.
          example: TOKENS_FORWARDING_FAIL
          type: string
        item:
          $ref: '#/components/schemas/TokensForwardingFail_data_item'
      required:
      - event
      - item
      - product
      type: object
  securitySchemes:
    ApiKey:
      description: API Key
      in: header
      name: x-api-key
      type: apiKey
x-tagGroups:
- name: General Information
  tags:
  - Overview
  - Getting Started
  - Authentication
  - What we support
  - Errors and API status
  - Data Flow Limiting
  - Standards and Conventions
  - Callbacks
- name: REST APIs
  tags:
  - Blockchain Data
  - Blockchain Events
  - Blockchain Automations
  - Blockchain Tools
- name: Blockchain Data
  tags:
  - Unified Endpoints
  - Tokens
  - UTXO Based
  - XRP (Ripple)
  - Omni Layer
- name: Blockchain Events
  tags:
  - Create Subscriptions for
  - Manage Subscriptions
- name: Blockchain Automations
  tags:
  - Automatic Coins Forwarding
  - Automatic Tokens Forwarding
- name: Blockchain Tools
  tags:
  - Validating
- name: Market Data
  tags:
  - Metadata
  - Exchange Rates
  - Assets
