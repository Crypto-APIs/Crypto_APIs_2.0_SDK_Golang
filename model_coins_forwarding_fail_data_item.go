/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// CoinsForwardingFailDataItem Defines an `item` as one result.
type CoinsForwardingFailDataItem struct {
	// Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
	Blockchain string `json:"blockchain"`
	// Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\", \"rinkeby\" are test networks.
	Network string `json:"network"`
	// Represents the hash of the address that provides the coins.
	FromAddress string `json:"fromAddress"`
	// Represents the hash of the address to forward the coins to.
	ToAddress string `json:"toAddress"`
	// Defines the unique Transaction ID that triggered the coin forwarding.
	TriggerTransactionId string `json:"triggerTransactionId"`
	// Represents the error code received for the failed coin forwarding.
	ErrorCode string `json:"errorCode"`
	// Represents the error message received for the failed coin forwarding.
	ErrorMessage string `json:"errorMessage"`
}

// NewCoinsForwardingFailDataItem instantiates a new CoinsForwardingFailDataItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoinsForwardingFailDataItem(blockchain string, network string, fromAddress string, toAddress string, triggerTransactionId string, errorCode string, errorMessage string) *CoinsForwardingFailDataItem {
	this := CoinsForwardingFailDataItem{}
	this.Blockchain = blockchain
	this.Network = network
	this.FromAddress = fromAddress
	this.ToAddress = toAddress
	this.TriggerTransactionId = triggerTransactionId
	this.ErrorCode = errorCode
	this.ErrorMessage = errorMessage
	return &this
}

// NewCoinsForwardingFailDataItemWithDefaults instantiates a new CoinsForwardingFailDataItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoinsForwardingFailDataItemWithDefaults() *CoinsForwardingFailDataItem {
	this := CoinsForwardingFailDataItem{}
	return &this
}

// GetBlockchain returns the Blockchain field value
func (o *CoinsForwardingFailDataItem) GetBlockchain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Blockchain
}

// GetBlockchainOk returns a tuple with the Blockchain field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingFailDataItem) GetBlockchainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blockchain, true
}

// SetBlockchain sets field value
func (o *CoinsForwardingFailDataItem) SetBlockchain(v string) {
	o.Blockchain = v
}

// GetNetwork returns the Network field value
func (o *CoinsForwardingFailDataItem) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingFailDataItem) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *CoinsForwardingFailDataItem) SetNetwork(v string) {
	o.Network = v
}

// GetFromAddress returns the FromAddress field value
func (o *CoinsForwardingFailDataItem) GetFromAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingFailDataItem) GetFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAddress, true
}

// SetFromAddress sets field value
func (o *CoinsForwardingFailDataItem) SetFromAddress(v string) {
	o.FromAddress = v
}

// GetToAddress returns the ToAddress field value
func (o *CoinsForwardingFailDataItem) GetToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingFailDataItem) GetToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *CoinsForwardingFailDataItem) SetToAddress(v string) {
	o.ToAddress = v
}

// GetTriggerTransactionId returns the TriggerTransactionId field value
func (o *CoinsForwardingFailDataItem) GetTriggerTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerTransactionId
}

// GetTriggerTransactionIdOk returns a tuple with the TriggerTransactionId field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingFailDataItem) GetTriggerTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerTransactionId, true
}

// SetTriggerTransactionId sets field value
func (o *CoinsForwardingFailDataItem) SetTriggerTransactionId(v string) {
	o.TriggerTransactionId = v
}

// GetErrorCode returns the ErrorCode field value
func (o *CoinsForwardingFailDataItem) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingFailDataItem) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *CoinsForwardingFailDataItem) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetErrorMessage returns the ErrorMessage field value
func (o *CoinsForwardingFailDataItem) GetErrorMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value
// and a boolean to check if the value has been set.
func (o *CoinsForwardingFailDataItem) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorMessage, true
}

// SetErrorMessage sets field value
func (o *CoinsForwardingFailDataItem) SetErrorMessage(v string) {
	o.ErrorMessage = v
}

func (o CoinsForwardingFailDataItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blockchain"] = o.Blockchain
	}
	if true {
		toSerialize["network"] = o.Network
	}
	if true {
		toSerialize["fromAddress"] = o.FromAddress
	}
	if true {
		toSerialize["toAddress"] = o.ToAddress
	}
	if true {
		toSerialize["triggerTransactionId"] = o.TriggerTransactionId
	}
	if true {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if true {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return json.Marshal(toSerialize)
}

type NullableCoinsForwardingFailDataItem struct {
	value *CoinsForwardingFailDataItem
	isSet bool
}

func (v NullableCoinsForwardingFailDataItem) Get() *CoinsForwardingFailDataItem {
	return v.value
}

func (v *NullableCoinsForwardingFailDataItem) Set(val *CoinsForwardingFailDataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCoinsForwardingFailDataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCoinsForwardingFailDataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoinsForwardingFailDataItem(val *CoinsForwardingFailDataItem) *NullableCoinsForwardingFailDataItem {
	return &NullableCoinsForwardingFailDataItem{value: val, isSet: true}
}

func (v NullableCoinsForwardingFailDataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoinsForwardingFailDataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


