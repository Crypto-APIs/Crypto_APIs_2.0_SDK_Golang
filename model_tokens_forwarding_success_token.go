/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// TokensForwardingSuccessToken - struct for TokensForwardingSuccessToken
type TokensForwardingSuccessToken struct {
	TokensForwardingSuccessErc20 *TokensForwardingSuccessErc20
	TokensForwardingSuccessErc721 *TokensForwardingSuccessErc721
	TokensForwardingSuccessOmni *TokensForwardingSuccessOmni
}

// TokensForwardingSuccessErc20AsTokensForwardingSuccessToken is a convenience function that returns TokensForwardingSuccessErc20 wrapped in TokensForwardingSuccessToken
func TokensForwardingSuccessErc20AsTokensForwardingSuccessToken(v *TokensForwardingSuccessErc20) TokensForwardingSuccessToken {
	return TokensForwardingSuccessToken{
		TokensForwardingSuccessErc20: v,
	}
}

// TokensForwardingSuccessErc721AsTokensForwardingSuccessToken is a convenience function that returns TokensForwardingSuccessErc721 wrapped in TokensForwardingSuccessToken
func TokensForwardingSuccessErc721AsTokensForwardingSuccessToken(v *TokensForwardingSuccessErc721) TokensForwardingSuccessToken {
	return TokensForwardingSuccessToken{
		TokensForwardingSuccessErc721: v,
	}
}

// TokensForwardingSuccessOmniAsTokensForwardingSuccessToken is a convenience function that returns TokensForwardingSuccessOmni wrapped in TokensForwardingSuccessToken
func TokensForwardingSuccessOmniAsTokensForwardingSuccessToken(v *TokensForwardingSuccessOmni) TokensForwardingSuccessToken {
	return TokensForwardingSuccessToken{
		TokensForwardingSuccessOmni: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TokensForwardingSuccessToken) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TokensForwardingSuccessErc20
	err = newStrictDecoder(data).Decode(&dst.TokensForwardingSuccessErc20)
	if err == nil {
		jsonTokensForwardingSuccessErc20, _ := json.Marshal(dst.TokensForwardingSuccessErc20)
		if string(jsonTokensForwardingSuccessErc20) == "{}" { // empty struct
			dst.TokensForwardingSuccessErc20 = nil
		} else {
			match++
		}
	} else {
		dst.TokensForwardingSuccessErc20 = nil
	}

	// try to unmarshal data into TokensForwardingSuccessErc721
	err = newStrictDecoder(data).Decode(&dst.TokensForwardingSuccessErc721)
	if err == nil {
		jsonTokensForwardingSuccessErc721, _ := json.Marshal(dst.TokensForwardingSuccessErc721)
		if string(jsonTokensForwardingSuccessErc721) == "{}" { // empty struct
			dst.TokensForwardingSuccessErc721 = nil
		} else {
			match++
		}
	} else {
		dst.TokensForwardingSuccessErc721 = nil
	}

	// try to unmarshal data into TokensForwardingSuccessOmni
	err = newStrictDecoder(data).Decode(&dst.TokensForwardingSuccessOmni)
	if err == nil {
		jsonTokensForwardingSuccessOmni, _ := json.Marshal(dst.TokensForwardingSuccessOmni)
		if string(jsonTokensForwardingSuccessOmni) == "{}" { // empty struct
			dst.TokensForwardingSuccessOmni = nil
		} else {
			match++
		}
	} else {
		dst.TokensForwardingSuccessOmni = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TokensForwardingSuccessErc20 = nil
		dst.TokensForwardingSuccessErc721 = nil
		dst.TokensForwardingSuccessOmni = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(TokensForwardingSuccessToken)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(TokensForwardingSuccessToken)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TokensForwardingSuccessToken) MarshalJSON() ([]byte, error) {
	if src.TokensForwardingSuccessErc20 != nil {
		return json.Marshal(&src.TokensForwardingSuccessErc20)
	}

	if src.TokensForwardingSuccessErc721 != nil {
		return json.Marshal(&src.TokensForwardingSuccessErc721)
	}

	if src.TokensForwardingSuccessOmni != nil {
		return json.Marshal(&src.TokensForwardingSuccessOmni)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TokensForwardingSuccessToken) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TokensForwardingSuccessErc20 != nil {
		return obj.TokensForwardingSuccessErc20
	}

	if obj.TokensForwardingSuccessErc721 != nil {
		return obj.TokensForwardingSuccessErc721
	}

	if obj.TokensForwardingSuccessOmni != nil {
		return obj.TokensForwardingSuccessOmni
	}

	// all schemas are nil
	return nil
}

type NullableTokensForwardingSuccessToken struct {
	value *TokensForwardingSuccessToken
	isSet bool
}

func (v NullableTokensForwardingSuccessToken) Get() *TokensForwardingSuccessToken {
	return v.value
}

func (v *NullableTokensForwardingSuccessToken) Set(val *TokensForwardingSuccessToken) {
	v.value = val
	v.isSet = true
}

func (v NullableTokensForwardingSuccessToken) IsSet() bool {
	return v.isSet
}

func (v *NullableTokensForwardingSuccessToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokensForwardingSuccessToken(val *TokensForwardingSuccessToken) *NullableTokensForwardingSuccessToken {
	return &NullableTokensForwardingSuccessToken{value: val, isSet: true}
}

func (v NullableTokensForwardingSuccessToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokensForwardingSuccessToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


