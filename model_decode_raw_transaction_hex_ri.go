/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// DecodeRawTransactionHexRI struct for DecodeRawTransactionHexRI
type DecodeRawTransactionHexRI struct {
	BlockchainSpeficicData DecodeRawTransactionHexRIS `json:"blockchainSpeficicData"`
	// Represents the total size of this transaction.
	Size int32 `json:"size"`
	// Represents the decoded transaction hex.
	TransactionId string `json:"transactionId"`
}

// NewDecodeRawTransactionHexRI instantiates a new DecodeRawTransactionHexRI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecodeRawTransactionHexRI(blockchainSpeficicData DecodeRawTransactionHexRIS, size int32, transactionId string) *DecodeRawTransactionHexRI {
	this := DecodeRawTransactionHexRI{}
	this.BlockchainSpeficicData = blockchainSpeficicData
	this.Size = size
	this.TransactionId = transactionId
	return &this
}

// NewDecodeRawTransactionHexRIWithDefaults instantiates a new DecodeRawTransactionHexRI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecodeRawTransactionHexRIWithDefaults() *DecodeRawTransactionHexRI {
	this := DecodeRawTransactionHexRI{}
	return &this
}

// GetBlockchainSpeficicData returns the BlockchainSpeficicData field value
func (o *DecodeRawTransactionHexRI) GetBlockchainSpeficicData() DecodeRawTransactionHexRIS {
	if o == nil {
		var ret DecodeRawTransactionHexRIS
		return ret
	}

	return o.BlockchainSpeficicData
}

// GetBlockchainSpeficicDataOk returns a tuple with the BlockchainSpeficicData field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRI) GetBlockchainSpeficicDataOk() (*DecodeRawTransactionHexRIS, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockchainSpeficicData, true
}

// SetBlockchainSpeficicData sets field value
func (o *DecodeRawTransactionHexRI) SetBlockchainSpeficicData(v DecodeRawTransactionHexRIS) {
	o.BlockchainSpeficicData = v
}

// GetSize returns the Size field value
func (o *DecodeRawTransactionHexRI) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRI) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *DecodeRawTransactionHexRI) SetSize(v int32) {
	o.Size = v
}

// GetTransactionId returns the TransactionId field value
func (o *DecodeRawTransactionHexRI) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRI) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *DecodeRawTransactionHexRI) SetTransactionId(v string) {
	o.TransactionId = v
}

func (o DecodeRawTransactionHexRI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blockchainSpeficicData"] = o.BlockchainSpeficicData
	}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["transactionId"] = o.TransactionId
	}
	return json.Marshal(toSerialize)
}

type NullableDecodeRawTransactionHexRI struct {
	value *DecodeRawTransactionHexRI
	isSet bool
}

func (v NullableDecodeRawTransactionHexRI) Get() *DecodeRawTransactionHexRI {
	return v.value
}

func (v *NullableDecodeRawTransactionHexRI) Set(val *DecodeRawTransactionHexRI) {
	v.value = val
	v.isSet = true
}

func (v NullableDecodeRawTransactionHexRI) IsSet() bool {
	return v.isSet
}

func (v *NullableDecodeRawTransactionHexRI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecodeRawTransactionHexRI(val *DecodeRawTransactionHexRI) *NullableDecodeRawTransactionHexRI {
	return &NullableDecodeRawTransactionHexRI{value: val, isSet: true}
}

func (v NullableDecodeRawTransactionHexRI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecodeRawTransactionHexRI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


