/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GetTransactionDetailsByTransactionIDFromCallbackRIBS - struct for GetTransactionDetailsByTransactionIDFromCallbackRIBS
type GetTransactionDetailsByTransactionIDFromCallbackRIBS struct {
	GetTransactionDetailsByTransactionIDFromCallbackRIBSB *GetTransactionDetailsByTransactionIDFromCallbackRIBSB
	GetTransactionDetailsByTransactionIDFromCallbackRIBSBC *GetTransactionDetailsByTransactionIDFromCallbackRIBSBC
	GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC *GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC
	GetTransactionDetailsByTransactionIDFromCallbackRIBSD *GetTransactionDetailsByTransactionIDFromCallbackRIBSD
	GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 *GetTransactionDetailsByTransactionIDFromCallbackRIBSD2
	GetTransactionDetailsByTransactionIDFromCallbackRIBSE *GetTransactionDetailsByTransactionIDFromCallbackRIBSE
	GetTransactionDetailsByTransactionIDFromCallbackRIBSEC *GetTransactionDetailsByTransactionIDFromCallbackRIBSEC
	GetTransactionDetailsByTransactionIDFromCallbackRIBSL *GetTransactionDetailsByTransactionIDFromCallbackRIBSL
	GetTransactionDetailsByTransactionIDFromCallbackRIBSX *GetTransactionDetailsByTransactionIDFromCallbackRIBSX
	GetTransactionDetailsByTransactionIDFromCallbackRIBSZ *GetTransactionDetailsByTransactionIDFromCallbackRIBSZ
	GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 *GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSBAsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSB wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSBAsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSB) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSB: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSBCAsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSBC wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSBCAsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSBC) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSBC: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSBSCAsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSBSCAsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSDAsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSD wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSDAsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSD) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSD: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSD2AsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSD2AsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSD2) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSD2: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSEAsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSE wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSEAsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSE) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSE: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSECAsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSEC wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSECAsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSEC) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSEC: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSLAsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSL wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSLAsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSL) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSL: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSXAsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSX wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSXAsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSX) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSX: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSZAsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSZ wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSZAsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSZ) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSZ: v}
}

// GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2AsGetTransactionDetailsByTransactionIDFromCallbackRIBS is a convenience function that returns GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 wrapped in GetTransactionDetailsByTransactionIDFromCallbackRIBS
func GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2AsGetTransactionDetailsByTransactionIDFromCallbackRIBS(v *GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2) GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return GetTransactionDetailsByTransactionIDFromCallbackRIBS{ GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetTransactionDetailsByTransactionIDFromCallbackRIBS) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSB
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSB)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSB, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSB)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSB) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSB = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSB = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSBC
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSBC, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSBC) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSBSC, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSBSC) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSD
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSD, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSD) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSD2
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSD2, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSD2) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSE
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSE)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSE, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSE)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSE) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSE = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSE = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSEC
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSEC, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSEC) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSL
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSL)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSL, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSL)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSL) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSL = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSL = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSX
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSX)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSX, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSX)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSX) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSX = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSX = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSZ
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSZ, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSZ) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ = nil
	}

	// try to unmarshal data into GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2
	err = json.Unmarshal(data, &dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2)
	if err == nil {
		jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSZ2, _ := json.Marshal(dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2)
		if string(jsonGetTransactionDetailsByTransactionIDFromCallbackRIBSZ2) == "{}" { // empty struct
			dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 = nil
		} else {
			match++
		}
	} else {
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSB = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSE = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSL = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSX = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ = nil
		dst.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetTransactionDetailsByTransactionIDFromCallbackRIBS)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetTransactionDetailsByTransactionIDFromCallbackRIBS)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetTransactionDetailsByTransactionIDFromCallbackRIBS) MarshalJSON() ([]byte, error) {
	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSB != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSB)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSD != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSD)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSE != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSE)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSL != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSL)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSX != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSX)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ)
	}

	if src.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 != nil {
		return json.Marshal(&src.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetTransactionDetailsByTransactionIDFromCallbackRIBS) GetActualInstance() (interface{}) {
	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSB != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSB
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSD != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSD
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSE != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSE
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSL != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSL
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSX != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSX
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ
	}

	if obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 != nil {
		return obj.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2
	}

	// all schemas are nil
	return nil
}

type NullableGetTransactionDetailsByTransactionIDFromCallbackRIBS struct {
	value *GetTransactionDetailsByTransactionIDFromCallbackRIBS
	isSet bool
}

func (v NullableGetTransactionDetailsByTransactionIDFromCallbackRIBS) Get() *GetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return v.value
}

func (v *NullableGetTransactionDetailsByTransactionIDFromCallbackRIBS) Set(val *GetTransactionDetailsByTransactionIDFromCallbackRIBS) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTransactionDetailsByTransactionIDFromCallbackRIBS) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTransactionDetailsByTransactionIDFromCallbackRIBS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTransactionDetailsByTransactionIDFromCallbackRIBS(val *GetTransactionDetailsByTransactionIDFromCallbackRIBS) *NullableGetTransactionDetailsByTransactionIDFromCallbackRIBS {
	return &NullableGetTransactionDetailsByTransactionIDFromCallbackRIBS{value: val, isSet: true}
}

func (v NullableGetTransactionDetailsByTransactionIDFromCallbackRIBS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTransactionDetailsByTransactionIDFromCallbackRIBS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


