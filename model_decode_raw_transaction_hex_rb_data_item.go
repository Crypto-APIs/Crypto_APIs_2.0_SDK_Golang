/*
CryptoAPIs

Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2021-03-20
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// DecodeRawTransactionHexRBDataItem struct for DecodeRawTransactionHexRBDataItem
type DecodeRawTransactionHexRBDataItem struct {
	// Represents the raw transaction Hex that has to be decoded.
	RawTransactionHex string `json:"rawTransactionHex"`
}

// NewDecodeRawTransactionHexRBDataItem instantiates a new DecodeRawTransactionHexRBDataItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecodeRawTransactionHexRBDataItem(rawTransactionHex string) *DecodeRawTransactionHexRBDataItem {
	this := DecodeRawTransactionHexRBDataItem{}
	this.RawTransactionHex = rawTransactionHex
	return &this
}

// NewDecodeRawTransactionHexRBDataItemWithDefaults instantiates a new DecodeRawTransactionHexRBDataItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecodeRawTransactionHexRBDataItemWithDefaults() *DecodeRawTransactionHexRBDataItem {
	this := DecodeRawTransactionHexRBDataItem{}
	return &this
}

// GetRawTransactionHex returns the RawTransactionHex field value
func (o *DecodeRawTransactionHexRBDataItem) GetRawTransactionHex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawTransactionHex
}

// GetRawTransactionHexOk returns a tuple with the RawTransactionHex field value
// and a boolean to check if the value has been set.
func (o *DecodeRawTransactionHexRBDataItem) GetRawTransactionHexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawTransactionHex, true
}

// SetRawTransactionHex sets field value
func (o *DecodeRawTransactionHexRBDataItem) SetRawTransactionHex(v string) {
	o.RawTransactionHex = v
}

func (o DecodeRawTransactionHexRBDataItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["rawTransactionHex"] = o.RawTransactionHex
	}
	return json.Marshal(toSerialize)
}

type NullableDecodeRawTransactionHexRBDataItem struct {
	value *DecodeRawTransactionHexRBDataItem
	isSet bool
}

func (v NullableDecodeRawTransactionHexRBDataItem) Get() *DecodeRawTransactionHexRBDataItem {
	return v.value
}

func (v *NullableDecodeRawTransactionHexRBDataItem) Set(val *DecodeRawTransactionHexRBDataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDecodeRawTransactionHexRBDataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDecodeRawTransactionHexRBDataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecodeRawTransactionHexRBDataItem(val *DecodeRawTransactionHexRBDataItem) *NullableDecodeRawTransactionHexRBDataItem {
	return &NullableDecodeRawTransactionHexRBDataItem{value: val, isSet: true}
}

func (v NullableDecodeRawTransactionHexRBDataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecodeRawTransactionHexRBDataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


