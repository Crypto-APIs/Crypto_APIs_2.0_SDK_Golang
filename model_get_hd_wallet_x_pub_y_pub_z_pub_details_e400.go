/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// GetHDWalletXPubYPubZPubDetailsE400 - struct for GetHDWalletXPubYPubZPubDetailsE400
type GetHDWalletXPubYPubZPubDetailsE400 struct {
	InvalidBlockchain *InvalidBlockchain
	InvalidNetwork *InvalidNetwork
	InvalidPagination *InvalidPagination
	InvalidXpub *InvalidXpub
	LimitGreaterThanAllowed *LimitGreaterThanAllowed
	UriNotFound *UriNotFound
	XpubNotSynced *XpubNotSynced
}

// InvalidBlockchainAsGetHDWalletXPubYPubZPubDetailsE400 is a convenience function that returns InvalidBlockchain wrapped in GetHDWalletXPubYPubZPubDetailsE400
func InvalidBlockchainAsGetHDWalletXPubYPubZPubDetailsE400(v *InvalidBlockchain) GetHDWalletXPubYPubZPubDetailsE400 {
	return GetHDWalletXPubYPubZPubDetailsE400{
		InvalidBlockchain: v,
	}
}

// InvalidNetworkAsGetHDWalletXPubYPubZPubDetailsE400 is a convenience function that returns InvalidNetwork wrapped in GetHDWalletXPubYPubZPubDetailsE400
func InvalidNetworkAsGetHDWalletXPubYPubZPubDetailsE400(v *InvalidNetwork) GetHDWalletXPubYPubZPubDetailsE400 {
	return GetHDWalletXPubYPubZPubDetailsE400{
		InvalidNetwork: v,
	}
}

// InvalidPaginationAsGetHDWalletXPubYPubZPubDetailsE400 is a convenience function that returns InvalidPagination wrapped in GetHDWalletXPubYPubZPubDetailsE400
func InvalidPaginationAsGetHDWalletXPubYPubZPubDetailsE400(v *InvalidPagination) GetHDWalletXPubYPubZPubDetailsE400 {
	return GetHDWalletXPubYPubZPubDetailsE400{
		InvalidPagination: v,
	}
}

// InvalidXpubAsGetHDWalletXPubYPubZPubDetailsE400 is a convenience function that returns InvalidXpub wrapped in GetHDWalletXPubYPubZPubDetailsE400
func InvalidXpubAsGetHDWalletXPubYPubZPubDetailsE400(v *InvalidXpub) GetHDWalletXPubYPubZPubDetailsE400 {
	return GetHDWalletXPubYPubZPubDetailsE400{
		InvalidXpub: v,
	}
}

// LimitGreaterThanAllowedAsGetHDWalletXPubYPubZPubDetailsE400 is a convenience function that returns LimitGreaterThanAllowed wrapped in GetHDWalletXPubYPubZPubDetailsE400
func LimitGreaterThanAllowedAsGetHDWalletXPubYPubZPubDetailsE400(v *LimitGreaterThanAllowed) GetHDWalletXPubYPubZPubDetailsE400 {
	return GetHDWalletXPubYPubZPubDetailsE400{
		LimitGreaterThanAllowed: v,
	}
}

// UriNotFoundAsGetHDWalletXPubYPubZPubDetailsE400 is a convenience function that returns UriNotFound wrapped in GetHDWalletXPubYPubZPubDetailsE400
func UriNotFoundAsGetHDWalletXPubYPubZPubDetailsE400(v *UriNotFound) GetHDWalletXPubYPubZPubDetailsE400 {
	return GetHDWalletXPubYPubZPubDetailsE400{
		UriNotFound: v,
	}
}

// XpubNotSyncedAsGetHDWalletXPubYPubZPubDetailsE400 is a convenience function that returns XpubNotSynced wrapped in GetHDWalletXPubYPubZPubDetailsE400
func XpubNotSyncedAsGetHDWalletXPubYPubZPubDetailsE400(v *XpubNotSynced) GetHDWalletXPubYPubZPubDetailsE400 {
	return GetHDWalletXPubYPubZPubDetailsE400{
		XpubNotSynced: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetHDWalletXPubYPubZPubDetailsE400) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InvalidBlockchain
	err = newStrictDecoder(data).Decode(&dst.InvalidBlockchain)
	if err == nil {
		jsonInvalidBlockchain, _ := json.Marshal(dst.InvalidBlockchain)
		if string(jsonInvalidBlockchain) == "{}" { // empty struct
			dst.InvalidBlockchain = nil
		} else {
			match++
		}
	} else {
		dst.InvalidBlockchain = nil
	}

	// try to unmarshal data into InvalidNetwork
	err = newStrictDecoder(data).Decode(&dst.InvalidNetwork)
	if err == nil {
		jsonInvalidNetwork, _ := json.Marshal(dst.InvalidNetwork)
		if string(jsonInvalidNetwork) == "{}" { // empty struct
			dst.InvalidNetwork = nil
		} else {
			match++
		}
	} else {
		dst.InvalidNetwork = nil
	}

	// try to unmarshal data into InvalidPagination
	err = newStrictDecoder(data).Decode(&dst.InvalidPagination)
	if err == nil {
		jsonInvalidPagination, _ := json.Marshal(dst.InvalidPagination)
		if string(jsonInvalidPagination) == "{}" { // empty struct
			dst.InvalidPagination = nil
		} else {
			match++
		}
	} else {
		dst.InvalidPagination = nil
	}

	// try to unmarshal data into InvalidXpub
	err = newStrictDecoder(data).Decode(&dst.InvalidXpub)
	if err == nil {
		jsonInvalidXpub, _ := json.Marshal(dst.InvalidXpub)
		if string(jsonInvalidXpub) == "{}" { // empty struct
			dst.InvalidXpub = nil
		} else {
			match++
		}
	} else {
		dst.InvalidXpub = nil
	}

	// try to unmarshal data into LimitGreaterThanAllowed
	err = newStrictDecoder(data).Decode(&dst.LimitGreaterThanAllowed)
	if err == nil {
		jsonLimitGreaterThanAllowed, _ := json.Marshal(dst.LimitGreaterThanAllowed)
		if string(jsonLimitGreaterThanAllowed) == "{}" { // empty struct
			dst.LimitGreaterThanAllowed = nil
		} else {
			match++
		}
	} else {
		dst.LimitGreaterThanAllowed = nil
	}

	// try to unmarshal data into UriNotFound
	err = newStrictDecoder(data).Decode(&dst.UriNotFound)
	if err == nil {
		jsonUriNotFound, _ := json.Marshal(dst.UriNotFound)
		if string(jsonUriNotFound) == "{}" { // empty struct
			dst.UriNotFound = nil
		} else {
			match++
		}
	} else {
		dst.UriNotFound = nil
	}

	// try to unmarshal data into XpubNotSynced
	err = newStrictDecoder(data).Decode(&dst.XpubNotSynced)
	if err == nil {
		jsonXpubNotSynced, _ := json.Marshal(dst.XpubNotSynced)
		if string(jsonXpubNotSynced) == "{}" { // empty struct
			dst.XpubNotSynced = nil
		} else {
			match++
		}
	} else {
		dst.XpubNotSynced = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InvalidBlockchain = nil
		dst.InvalidNetwork = nil
		dst.InvalidPagination = nil
		dst.InvalidXpub = nil
		dst.LimitGreaterThanAllowed = nil
		dst.UriNotFound = nil
		dst.XpubNotSynced = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetHDWalletXPubYPubZPubDetailsE400)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetHDWalletXPubYPubZPubDetailsE400)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetHDWalletXPubYPubZPubDetailsE400) MarshalJSON() ([]byte, error) {
	if src.InvalidBlockchain != nil {
		return json.Marshal(&src.InvalidBlockchain)
	}

	if src.InvalidNetwork != nil {
		return json.Marshal(&src.InvalidNetwork)
	}

	if src.InvalidPagination != nil {
		return json.Marshal(&src.InvalidPagination)
	}

	if src.InvalidXpub != nil {
		return json.Marshal(&src.InvalidXpub)
	}

	if src.LimitGreaterThanAllowed != nil {
		return json.Marshal(&src.LimitGreaterThanAllowed)
	}

	if src.UriNotFound != nil {
		return json.Marshal(&src.UriNotFound)
	}

	if src.XpubNotSynced != nil {
		return json.Marshal(&src.XpubNotSynced)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetHDWalletXPubYPubZPubDetailsE400) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InvalidBlockchain != nil {
		return obj.InvalidBlockchain
	}

	if obj.InvalidNetwork != nil {
		return obj.InvalidNetwork
	}

	if obj.InvalidPagination != nil {
		return obj.InvalidPagination
	}

	if obj.InvalidXpub != nil {
		return obj.InvalidXpub
	}

	if obj.LimitGreaterThanAllowed != nil {
		return obj.LimitGreaterThanAllowed
	}

	if obj.UriNotFound != nil {
		return obj.UriNotFound
	}

	if obj.XpubNotSynced != nil {
		return obj.XpubNotSynced
	}

	// all schemas are nil
	return nil
}

type NullableGetHDWalletXPubYPubZPubDetailsE400 struct {
	value *GetHDWalletXPubYPubZPubDetailsE400
	isSet bool
}

func (v NullableGetHDWalletXPubYPubZPubDetailsE400) Get() *GetHDWalletXPubYPubZPubDetailsE400 {
	return v.value
}

func (v *NullableGetHDWalletXPubYPubZPubDetailsE400) Set(val *GetHDWalletXPubYPubZPubDetailsE400) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHDWalletXPubYPubZPubDetailsE400) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHDWalletXPubYPubZPubDetailsE400) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHDWalletXPubYPubZPubDetailsE400(val *GetHDWalletXPubYPubZPubDetailsE400) *NullableGetHDWalletXPubYPubZPubDetailsE400 {
	return &NullableGetHDWalletXPubYPubZPubDetailsE400{value: val, isSet: true}
}

func (v NullableGetHDWalletXPubYPubZPubDetailsE400) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHDWalletXPubYPubZPubDetailsE400) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


