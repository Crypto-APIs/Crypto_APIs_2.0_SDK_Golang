/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * API version: 2.0.0
 * Contact: developers@cryptoapis.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
)

// ListTokensByAddressResponseItem struct for ListTokensByAddressResponseItem
type ListTokensByAddressResponseItem struct {
	// Defines the token balance that has been confirmed.
	ConfirmedBalance string `json:"confirmedBalance"`
	// Represents the contract address of the token, which controls its logic. It is not the address that holds the tokens.
	ContractAddress string `json:"contractAddress"`
	// Defines the token's name as a string.
	Name string `json:"name"`
	// Defines the token symbol by which the token contract is known. It is usually 3-4 characters in length.
	Symbol string `json:"symbol"`
	// Defines the specific token type.
	Type string `json:"type"`
}

// NewListTokensByAddressResponseItem instantiates a new ListTokensByAddressResponseItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTokensByAddressResponseItem(confirmedBalance string, contractAddress string, name string, symbol string, type_ string) *ListTokensByAddressResponseItem {
	this := ListTokensByAddressResponseItem{}
	this.ConfirmedBalance = confirmedBalance
	this.ContractAddress = contractAddress
	this.Name = name
	this.Symbol = symbol
	this.Type = type_
	return &this
}

// NewListTokensByAddressResponseItemWithDefaults instantiates a new ListTokensByAddressResponseItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTokensByAddressResponseItemWithDefaults() *ListTokensByAddressResponseItem {
	this := ListTokensByAddressResponseItem{}
	return &this
}

// GetConfirmedBalance returns the ConfirmedBalance field value
func (o *ListTokensByAddressResponseItem) GetConfirmedBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfirmedBalance
}

// GetConfirmedBalanceOk returns a tuple with the ConfirmedBalance field value
// and a boolean to check if the value has been set.
func (o *ListTokensByAddressResponseItem) GetConfirmedBalanceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfirmedBalance, true
}

// SetConfirmedBalance sets field value
func (o *ListTokensByAddressResponseItem) SetConfirmedBalance(v string) {
	o.ConfirmedBalance = v
}

// GetContractAddress returns the ContractAddress field value
func (o *ListTokensByAddressResponseItem) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *ListTokensByAddressResponseItem) GetContractAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *ListTokensByAddressResponseItem) SetContractAddress(v string) {
	o.ContractAddress = v
}

// GetName returns the Name field value
func (o *ListTokensByAddressResponseItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListTokensByAddressResponseItem) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListTokensByAddressResponseItem) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *ListTokensByAddressResponseItem) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *ListTokensByAddressResponseItem) GetSymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *ListTokensByAddressResponseItem) SetSymbol(v string) {
	o.Symbol = v
}

// GetType returns the Type field value
func (o *ListTokensByAddressResponseItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ListTokensByAddressResponseItem) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ListTokensByAddressResponseItem) SetType(v string) {
	o.Type = v
}

func (o ListTokensByAddressResponseItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["confirmedBalance"] = o.ConfirmedBalance
	}
	if true {
		toSerialize["contractAddress"] = o.ContractAddress
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableListTokensByAddressResponseItem struct {
	value *ListTokensByAddressResponseItem
	isSet bool
}

func (v NullableListTokensByAddressResponseItem) Get() *ListTokensByAddressResponseItem {
	return v.value
}

func (v *NullableListTokensByAddressResponseItem) Set(val *ListTokensByAddressResponseItem) {
	v.value = val
	v.isSet = true
}

func (v NullableListTokensByAddressResponseItem) IsSet() bool {
	return v.isSet
}

func (v *NullableListTokensByAddressResponseItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTokensByAddressResponseItem(val *ListTokensByAddressResponseItem) *NullableListTokensByAddressResponseItem {
	return &NullableListTokensByAddressResponseItem{value: val, isSet: true}
}

func (v NullableListTokensByAddressResponseItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTokensByAddressResponseItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


