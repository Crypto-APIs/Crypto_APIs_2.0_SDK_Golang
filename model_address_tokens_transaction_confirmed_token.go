/*
CryptoAPIs

Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

API version: 2.0.0
Contact: developers@cryptoapis.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptoapis

import (
	"encoding/json"
	"fmt"
)

// AddressTokensTransactionConfirmedToken - struct for AddressTokensTransactionConfirmedToken
type AddressTokensTransactionConfirmedToken struct {
	AddressTokensTransactionConfirmedBep20 *AddressTokensTransactionConfirmedBep20
	AddressTokensTransactionConfirmedErc20 *AddressTokensTransactionConfirmedErc20
	AddressTokensTransactionConfirmedErc721 *AddressTokensTransactionConfirmedErc721
	AddressTokensTransactionConfirmedOmni *AddressTokensTransactionConfirmedOmni
}

// AddressTokensTransactionConfirmedBep20AsAddressTokensTransactionConfirmedToken is a convenience function that returns AddressTokensTransactionConfirmedBep20 wrapped in AddressTokensTransactionConfirmedToken
func AddressTokensTransactionConfirmedBep20AsAddressTokensTransactionConfirmedToken(v *AddressTokensTransactionConfirmedBep20) AddressTokensTransactionConfirmedToken {
	return AddressTokensTransactionConfirmedToken{
		AddressTokensTransactionConfirmedBep20: v,
	}
}

// AddressTokensTransactionConfirmedErc20AsAddressTokensTransactionConfirmedToken is a convenience function that returns AddressTokensTransactionConfirmedErc20 wrapped in AddressTokensTransactionConfirmedToken
func AddressTokensTransactionConfirmedErc20AsAddressTokensTransactionConfirmedToken(v *AddressTokensTransactionConfirmedErc20) AddressTokensTransactionConfirmedToken {
	return AddressTokensTransactionConfirmedToken{
		AddressTokensTransactionConfirmedErc20: v,
	}
}

// AddressTokensTransactionConfirmedErc721AsAddressTokensTransactionConfirmedToken is a convenience function that returns AddressTokensTransactionConfirmedErc721 wrapped in AddressTokensTransactionConfirmedToken
func AddressTokensTransactionConfirmedErc721AsAddressTokensTransactionConfirmedToken(v *AddressTokensTransactionConfirmedErc721) AddressTokensTransactionConfirmedToken {
	return AddressTokensTransactionConfirmedToken{
		AddressTokensTransactionConfirmedErc721: v,
	}
}

// AddressTokensTransactionConfirmedOmniAsAddressTokensTransactionConfirmedToken is a convenience function that returns AddressTokensTransactionConfirmedOmni wrapped in AddressTokensTransactionConfirmedToken
func AddressTokensTransactionConfirmedOmniAsAddressTokensTransactionConfirmedToken(v *AddressTokensTransactionConfirmedOmni) AddressTokensTransactionConfirmedToken {
	return AddressTokensTransactionConfirmedToken{
		AddressTokensTransactionConfirmedOmni: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddressTokensTransactionConfirmedToken) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddressTokensTransactionConfirmedBep20
	err = newStrictDecoder(data).Decode(&dst.AddressTokensTransactionConfirmedBep20)
	if err == nil {
		jsonAddressTokensTransactionConfirmedBep20, _ := json.Marshal(dst.AddressTokensTransactionConfirmedBep20)
		if string(jsonAddressTokensTransactionConfirmedBep20) == "{}" { // empty struct
			dst.AddressTokensTransactionConfirmedBep20 = nil
		} else {
			match++
		}
	} else {
		dst.AddressTokensTransactionConfirmedBep20 = nil
	}

	// try to unmarshal data into AddressTokensTransactionConfirmedErc20
	err = newStrictDecoder(data).Decode(&dst.AddressTokensTransactionConfirmedErc20)
	if err == nil {
		jsonAddressTokensTransactionConfirmedErc20, _ := json.Marshal(dst.AddressTokensTransactionConfirmedErc20)
		if string(jsonAddressTokensTransactionConfirmedErc20) == "{}" { // empty struct
			dst.AddressTokensTransactionConfirmedErc20 = nil
		} else {
			match++
		}
	} else {
		dst.AddressTokensTransactionConfirmedErc20 = nil
	}

	// try to unmarshal data into AddressTokensTransactionConfirmedErc721
	err = newStrictDecoder(data).Decode(&dst.AddressTokensTransactionConfirmedErc721)
	if err == nil {
		jsonAddressTokensTransactionConfirmedErc721, _ := json.Marshal(dst.AddressTokensTransactionConfirmedErc721)
		if string(jsonAddressTokensTransactionConfirmedErc721) == "{}" { // empty struct
			dst.AddressTokensTransactionConfirmedErc721 = nil
		} else {
			match++
		}
	} else {
		dst.AddressTokensTransactionConfirmedErc721 = nil
	}

	// try to unmarshal data into AddressTokensTransactionConfirmedOmni
	err = newStrictDecoder(data).Decode(&dst.AddressTokensTransactionConfirmedOmni)
	if err == nil {
		jsonAddressTokensTransactionConfirmedOmni, _ := json.Marshal(dst.AddressTokensTransactionConfirmedOmni)
		if string(jsonAddressTokensTransactionConfirmedOmni) == "{}" { // empty struct
			dst.AddressTokensTransactionConfirmedOmni = nil
		} else {
			match++
		}
	} else {
		dst.AddressTokensTransactionConfirmedOmni = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddressTokensTransactionConfirmedBep20 = nil
		dst.AddressTokensTransactionConfirmedErc20 = nil
		dst.AddressTokensTransactionConfirmedErc721 = nil
		dst.AddressTokensTransactionConfirmedOmni = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(AddressTokensTransactionConfirmedToken)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(AddressTokensTransactionConfirmedToken)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddressTokensTransactionConfirmedToken) MarshalJSON() ([]byte, error) {
	if src.AddressTokensTransactionConfirmedBep20 != nil {
		return json.Marshal(&src.AddressTokensTransactionConfirmedBep20)
	}

	if src.AddressTokensTransactionConfirmedErc20 != nil {
		return json.Marshal(&src.AddressTokensTransactionConfirmedErc20)
	}

	if src.AddressTokensTransactionConfirmedErc721 != nil {
		return json.Marshal(&src.AddressTokensTransactionConfirmedErc721)
	}

	if src.AddressTokensTransactionConfirmedOmni != nil {
		return json.Marshal(&src.AddressTokensTransactionConfirmedOmni)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddressTokensTransactionConfirmedToken) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddressTokensTransactionConfirmedBep20 != nil {
		return obj.AddressTokensTransactionConfirmedBep20
	}

	if obj.AddressTokensTransactionConfirmedErc20 != nil {
		return obj.AddressTokensTransactionConfirmedErc20
	}

	if obj.AddressTokensTransactionConfirmedErc721 != nil {
		return obj.AddressTokensTransactionConfirmedErc721
	}

	if obj.AddressTokensTransactionConfirmedOmni != nil {
		return obj.AddressTokensTransactionConfirmedOmni
	}

	// all schemas are nil
	return nil
}

type NullableAddressTokensTransactionConfirmedToken struct {
	value *AddressTokensTransactionConfirmedToken
	isSet bool
}

func (v NullableAddressTokensTransactionConfirmedToken) Get() *AddressTokensTransactionConfirmedToken {
	return v.value
}

func (v *NullableAddressTokensTransactionConfirmedToken) Set(val *AddressTokensTransactionConfirmedToken) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressTokensTransactionConfirmedToken) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressTokensTransactionConfirmedToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressTokensTransactionConfirmedToken(val *AddressTokensTransactionConfirmedToken) *NullableAddressTokensTransactionConfirmedToken {
	return &NullableAddressTokensTransactionConfirmedToken{value: val, isSet: true}
}

func (v NullableAddressTokensTransactionConfirmedToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressTokensTransactionConfirmedToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


